






Started logging.
15:25:58.494326 Language server launched with arguments:
15:25:58.494326   arg[0] = c:\Users\рс\AppData\Local\Programs\Arduino IDE\resources\app\lib\backend\resources\arduino-language-server.exe
15:25:58.494326   arg[1] = -clangd
15:25:58.494326   arg[2] = c:\Users\рс\AppData\Local\Programs\Arduino IDE\resources\app\lib\backend\resources\clangd.exe
15:25:58.494326   arg[3] = -cli-daemon-addr
15:25:58.494326   arg[4] = localhost:56002
15:25:58.494326   arg[5] = -cli-daemon-instance
15:25:58.494326   arg[6] = 1
15:25:58.494326   arg[7] = -fqbn
15:25:58.494326   arg[8] = arduino:avr:leonardo
15:25:58.494326   arg[9] = -skip-libraries-discovery-on-rebuild
15:25:58.494326   arg[10] = -board-name
15:25:58.494877   arg[11] = Arduino Leonardo
15:25:58.494877   arg[12] = -no-real-time-diagnostics
15:25:58.494877   arg[13] = -log
15:25:58.494877   arg[14] = -logpath
15:25:58.494877   arg[15] = d:\Arduino_GitHub\Termometer
15:25:58.495431 logging to d:\Arduino_GitHub\Termometer\inols.log
15:25:58.500975 [97mLS: : Initial board configuration: arduino:avr:leonardo[0m
15:25:58.500975 [97mLS: : arduino-language-server.exe Version: 0.0.0-git Commit:  Date: [0m
15:25:58.500975 [97mLS: : Language server temp directory: C:\Users\рс\AppData\Local\Temp\arduino-language-server3413025801[0m
15:25:58.500975 [97mLS: : Language server build path: C:\Users\рс\AppData\Local\Temp\arduino-language-server3413025801\build[0m
15:25:58.500975 [97mLS: : Language server build sketch root: C:\Users\рс\AppData\Local\Temp\arduino-language-server3413025801\build\sketch[0m
15:25:58.500975 [97mLS: : Language server FULL build path: C:\Users\рс\AppData\Local\Temp\arduino-language-server3413025801\fullbuild[0m
15:25:58.502040 IN Elapsed: 1.0649ms
15:25:58.502040 [92mIDE --> LS REQU initialize 0[0m
15:25:58.503100 [92m                initialize 0: [93mwrite-locked[0m[0m
15:25:58.503635 [92m                initialize 0: [93mwrite-unlocked[0m[0m
15:25:58.504166 [96mINIT --- : initializing workbench: file:///d%3A/Arduino_GitHub/Termometer[0m
15:25:58.504166 [96mINIT --- : [93mread-locked[0m[0m
15:25:58.504166 [96mINIT --- : [93mread-unlocked[0m[0m
15:25:58.504166 [92m                initialize 0: initialization parameters: {"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.0.0-git"}}[0m
15:25:58.504166 [32mIDE <-- LS RESP initialize 0[0m
15:25:58.504704 OUT Elapsed: 0s
15:25:58.511834 IN Elapsed: 7.1292ms
15:25:58.511834 [92mIDE --> LS NOTIF initialized[0m
15:25:58.511834 [92m                 initialized: Notification is not propagated to clangd[0m
15:25:58.512365 IN Elapsed: 18.8µs
15:25:58.512365 [92mIDE --> LS NOTIF textDocument/didOpen[0m
15:25:58.512504 [92m                 textDocument/didOpen: [93mwrite-locked[0m[0m
15:25:58.512504 [92m                 textDocument/didOpen: (throttled: waiting for clangd)[0m
15:25:58.512504 [92m                 textDocument/didOpen: [93munlocked (waiting clangd)[0m[0m
15:25:58.516754 [96mINIT --- : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server3413025801\\fullbuild",
  "verbose": true,
  "create_compilation_database_only": true
}[0m
15:26:06.452512 [96mINIT --- : Compile successful![0m
15:26:06.452512 [96mINIT --- : ERROR: updating libraries.cache: open C:\Users\рс\AppData\Local\Temp\arduino-language-server3413025801\fullbuild\libraries.cache: The system cannot find the file specified.[0m
15:26:06.453045 [96mINIT --- : [93mread-locked[0m[0m
15:26:06.453072 [96mINIT --- : [93mread-unlocked[0m[0m
15:26:06.458382 [96mINIT --- : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server3413025801\\build",
  "verbose": true,
  "create_compilation_database_only": true,
  "skip_libraries_discovery": true
}[0m
15:26:07.644551 [96mINIT --- : Compile successful![0m
15:26:07.668142 [96mINIT --- : Arduino Data Dir -> c:\Users\рс\AppData\Local\Arduino15[0m
15:26:07.670441 [96mINIT --- :     Starting clangd: c:\Users\рс\AppData\Local\Programs\Arduino IDE\resources\app\lib\backend\resources\clangd.exe -log=verbose --pch-storage=memory --compile-commands-dir=C:\Users\рс\AppData\Local\Temp\arduino-language-server3413025801\build -j 1 -query-driver=C:\Users\рс\AppData\Local\Arduino15\packages\**[0m
15:26:07.814982 logging to d:\Arduino_GitHub\Termometer\inols-clangd.log
15:26:07.815572 logging to d:\Arduino_GitHub\Termometer\inols-clangd-err.log
15:26:07.816140 [91mIDE     LS --> Clangd REQU initialize 1[0m
15:26:07.817244 OUT Elapsed: 539.7µs
15:26:07.900966 IN Elapsed: 84.8265ms
15:26:07.900966 [31mIDE     LS <-- Clangd RESP initialize 1[0m
15:26:07.901496 [96mINIT --- : clangd successfully started: {"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/","*"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"]},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",")","{","}","\u003c","\u003e",","]},"declarationProvider":{},"definitionProvider":{},"typeDefinitionProvider":{},"implementationProvider":{},"referencesProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentLinkProvider":{},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{"prepareProvider":true},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"selectionRangeProvider":{},"callHierarchyProvider":{},"semanticTokensProvider":{"legend":{"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","interface","enum","enumMember","type","type","unknown","namespace","typeParameter","concept","type","macro","comment"],"tokenModifiers":["declaration","deprecated","deduced","readonly","static","abstract","virtual","dependentName","defaultLibrary","usedAsMutableReference","functionScope","classScope","fileScope","globalScope"]},"range":false,"full":{"delta":true}},"workspaceSymbolProvider":{}},"serverInfo":{"name":"clangd","version":"clangd version 14.0.0 windows x86_64-pc-windows-msvc"}}[0m
15:26:07.901496 [91mIDE     LS --> Clangd NOTIF initialized[0m
15:26:07.901496 OUT Elapsed: 0s
15:26:07.901496 [96mINIT --- : Done initializing workbench[0m
15:26:07.901496 [92m                 textDocument/didOpen: [93mlocked (waiting clangd)[0m[0m
15:26:07.902038 [92m                 textDocument/didOpen: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp[0m
15:26:07.903709 [92m                 textDocument/didOpen: Increasing .ino tracked files count to 1[0m
15:26:07.905641 [91mIDE     LS --> Clangd NOTIF textDocument/didOpen[0m
15:26:07.905641 OUT Elapsed: 0s
15:26:07.905641 [92m                 textDocument/didOpen: [93mwrite-unlocked[0m[0m
15:26:07.905641 IN Elapsed: 0s
15:26:07.906199 [92mIDE --> LS REQU textDocument/codeAction 1[0m
15:26:07.906199 [92m                textDocument/codeAction 1: [93mread-locked[0m[0m
15:26:07.906199 [92m                textDocument/codeAction 1: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:0:0)[0m
15:26:07.906753 [92m                textDocument/codeAction 1: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp[0m
15:26:07.907847 [92m                textDocument/codeAction 1:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:0:0)[0m
15:26:07.908394 [91mIDE     LS --> Clangd REQU textDocument/codeAction 2[0m
15:26:07.908394 OUT Elapsed: 0s
15:26:07.916597 IN Elapsed: 15.6307ms
15:26:07.916597 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
15:26:07.916597 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
15:26:07.921983 IN Elapsed: 5.3858ms
15:26:07.921983 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
15:26:07.921983 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
15:26:07.928785 IN Elapsed: 6.8019ms
15:26:07.928785 [91mIDE     LS <-- Clangd REQU window/workDoneProgress/create 0[0m
15:26:07.929130 [31mIDE     LS --> Clangd RESP window/workDoneProgress/create 0[0m
15:26:07.929130 [92mIDE <-- LS REQU window/workDoneProgress/create 1[0m
15:26:07.929130 OUT Elapsed: 0s
15:26:07.929130 OUT Elapsed: 0s
15:26:07.929130 IN Elapsed: 0s
15:26:07.929130 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:26:07.929130 [91m                            $/progress: backgroundIndexProgress BEGIN indexing, 0.0%[0m
15:26:07.929667 IN Elapsed: 0s
15:26:07.929692 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:26:07.929692 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
15:26:07.932948 IN Elapsed: 3.2561ms
15:26:07.932948 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:26:07.932948 [91m                            $/progress: backgroundIndexProgress REPORT, 0/2, 0.0%[0m
15:26:07.932948 IN Elapsed: 0s
15:26:07.932948 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:26:07.932948 [91m                            $/progress: backgroundIndexProgress REPORT, 1/2, 50.0%[0m
15:26:07.932948 IN Elapsed: 0s
15:26:07.932948 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:26:07.932948 [91m                            $/progress: backgroundIndexProgress REPORT, 1/2, 50.0%[0m
15:26:08.219395 IN Elapsed: 286.4473ms
15:26:08.219395 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
15:26:08.219395 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
15:26:08.220497 IN Elapsed: 1.102ms
15:26:08.220497 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 2[0m
15:26:08.220497 [92m                textDocument/codeAction 1: [93mread-unlocked[0m[0m
15:26:08.220497 [32mIDE <-- LS RESP textDocument/codeAction 1[0m
15:26:08.220497 OUT Elapsed: 0s
15:26:08.220497 IN Elapsed: 0s
15:26:08.220497 [92mIDE --> LS REQU textDocument/documentSymbol 2[0m
15:26:08.220497 [92m                textDocument/documentSymbol 2: [93mread-locked[0m[0m
15:26:08.221059 [92m                textDocument/documentSymbol 2: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp[0m
15:26:08.221059 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 3[0m
15:26:08.221059 OUT Elapsed: 0s
15:26:08.222153 IN Elapsed: 1.6556ms
15:26:08.222153 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 3[0m
15:26:08.222153 [92m                textDocument/documentSymbol 2: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp (6 document symbols)[0m
15:26:08.222153 [92m                textDocument/documentSymbol 2:   > convert SymbolKind:Variable 13:0-13:15[0m
15:26:08.223768 [92m                textDocument/documentSymbol 2: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:13:0-13:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:0-11:15 (.ino)[0m
15:26:08.224848 [92m                textDocument/documentSymbol 2: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:13:8-13:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:8-11:15 (.ino)[0m
15:26:08.224848 [92m                textDocument/documentSymbol 2: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
15:26:08.224848 [92m                textDocument/documentSymbol 2:   > convert SymbolKind:Variable 14:0-14:25[0m
15:26:08.225390 [92m                textDocument/documentSymbol 2: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:14:0-14:25 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:12:0-12:25 (.ino)[0m
15:26:08.226556 [92m                textDocument/documentSymbol 2: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:14:18-14:25 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:12:18-12:25 (.ino)[0m
15:26:08.226556 [92m                textDocument/documentSymbol 2: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
15:26:08.226556 [92m                textDocument/documentSymbol 2:   > convert SymbolKind:Function 17:0-17:12[0m
15:26:08.227636 [92m                textDocument/documentSymbol 2: Range is in PREPROCESSED section of the sketch[0m
15:26:08.227636 [92m                textDocument/documentSymbol 2: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:17:0-17:12 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:0-14:12 (.ino)[0m
15:26:08.227636 [92m                textDocument/documentSymbol 2:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
15:26:08.227636 [92m                textDocument/documentSymbol 2:   > convert SymbolKind:Function 19:0-19:11[0m
15:26:08.228740 [92m                textDocument/documentSymbol 2: Range is in PREPROCESSED section of the sketch[0m
15:26:08.229300 [92m                textDocument/documentSymbol 2: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:19:0-19:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:0-19:11 (.ino)[0m
15:26:08.229300 [92m                textDocument/documentSymbol 2:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
15:26:08.229300 [92m                textDocument/documentSymbol 2:   > convert SymbolKind:Function 21:0-24:1[0m
15:26:08.231525 [92m                textDocument/documentSymbol 2: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:21:0-24:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:0-17:1 (.ino)[0m
15:26:08.232650 [92m                textDocument/documentSymbol 2: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:21:5-21:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:5-14:10 (.ino)[0m
15:26:08.232650 [92m                textDocument/documentSymbol 2: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
15:26:08.232650 [92m                textDocument/documentSymbol 2:   > convert SymbolKind:Function 26:0-33:1[0m
15:26:08.233848 [92m                textDocument/documentSymbol 2: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:26:0-33:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:0-26:1 (.ino)[0m
15:26:08.235499 [92m                textDocument/documentSymbol 2: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:26:5-26:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:5-19:9 (.ino)[0m
15:26:08.235499 [92m                textDocument/documentSymbol 2: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
15:26:08.235499 [92m                textDocument/documentSymbol 2: [93mread-unlocked[0m[0m
15:26:08.235499 [32mIDE <-- LS RESP textDocument/documentSymbol 2[0m
15:26:08.235499 OUT Elapsed: 0s
15:26:08.235499 IN Elapsed: 0s
15:26:08.235499 [32mIDE --> LS RESP window/workDoneProgress/create 1[0m
15:26:08.236054 IN Elapsed: 554.6µs
15:26:08.236054 [92mIDE <-- LS NOTIF $/progress[0m
15:26:08.236054 OUT Elapsed: 0s
15:26:08.236054 [92mIDE <-- LS NOTIF $/progress[0m
15:26:08.236054 OUT Elapsed: 0s
15:26:08.236054 [92mIDE --> LS NOTIF ino/didCompleteBuild[0m
15:26:08.236601 [92m                 ino/didCompleteBuild: [93mwrite-locked[0m[0m
15:26:08.237154 [92m                 ino/didCompleteBuild: ERROR: updating libraries.cache: open C:\Users\рс\AppData\Local\arduino\sketches\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\libraries.cache: The system cannot find the file specified.[0m
15:26:08.237154 [92m                 ino/didCompleteBuild: [93mwrite-unlocked[0m[0m
15:26:08.237154 IN Elapsed: 0s
15:26:08.237154 IN Elapsed: 0s
15:26:08.237667 [92mIDE --> LS REQU textDocument/documentSymbol 3[0m
15:26:08.237684 [92m                textDocument/documentSymbol 3: [93mread-locked[0m[0m
15:26:08.237684 [92m                textDocument/documentSymbol 3: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp[0m
15:26:08.237684 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 4[0m
15:26:08.237684 OUT Elapsed: 0s
15:26:08.238272 IN Elapsed: 16.1191ms
15:26:08.238799 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 4[0m
15:26:08.238819 [92m                textDocument/documentSymbol 3: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp (6 document symbols)[0m
15:26:08.238819 [92m                textDocument/documentSymbol 3:   > convert SymbolKind:Variable 13:0-13:15[0m
15:26:08.239912 [92m                textDocument/documentSymbol 3: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:13:0-13:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:0-11:15 (.ino)[0m
15:26:08.241008 [92m                textDocument/documentSymbol 3: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:13:8-13:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:8-11:15 (.ino)[0m
15:26:08.241008 [92m                textDocument/documentSymbol 3: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
15:26:08.241008 [92m                textDocument/documentSymbol 3:   > convert SymbolKind:Variable 14:0-14:25[0m
15:26:08.242116 [92m                textDocument/documentSymbol 3: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:14:0-14:25 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:12:0-12:25 (.ino)[0m
15:26:08.243183 [92m                textDocument/documentSymbol 3: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:14:18-14:25 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:12:18-12:25 (.ino)[0m
15:26:08.243183 [92m                textDocument/documentSymbol 3: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
15:26:08.243183 [92m                textDocument/documentSymbol 3:   > convert SymbolKind:Function 17:0-17:12[0m
15:26:08.244302 [92m                textDocument/documentSymbol 3: Range is in PREPROCESSED section of the sketch[0m
15:26:08.244302 [92m                textDocument/documentSymbol 3: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:17:0-17:12 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:0-14:12 (.ino)[0m
15:26:08.244302 [92m                textDocument/documentSymbol 3:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
15:26:08.244302 [92m                textDocument/documentSymbol 3:   > convert SymbolKind:Function 19:0-19:11[0m
15:26:08.245438 [92m                textDocument/documentSymbol 3: Range is in PREPROCESSED section of the sketch[0m
15:26:08.245438 [92m                textDocument/documentSymbol 3: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:19:0-19:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:0-19:11 (.ino)[0m
15:26:08.245438 [92m                textDocument/documentSymbol 3:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
15:26:08.245438 [92m                textDocument/documentSymbol 3:   > convert SymbolKind:Function 21:0-24:1[0m
15:26:08.246550 [92m                textDocument/documentSymbol 3: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:21:0-24:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:0-17:1 (.ino)[0m
15:26:08.247612 [92m                textDocument/documentSymbol 3: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:21:5-21:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:5-14:10 (.ino)[0m
15:26:08.247612 [92m                textDocument/documentSymbol 3: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
15:26:08.247612 [92m                textDocument/documentSymbol 3:   > convert SymbolKind:Function 26:0-33:1[0m
15:26:08.248678 [92m                textDocument/documentSymbol 3: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:26:0-33:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:0-26:1 (.ino)[0m
15:26:08.249221 [92m                textDocument/documentSymbol 3: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:26:5-26:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:5-19:9 (.ino)[0m
15:26:08.249221 [92m                textDocument/documentSymbol 3: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
15:26:08.249221 [92m                textDocument/documentSymbol 3: [93mread-unlocked[0m[0m
15:26:08.249835 [32mIDE <-- LS RESP textDocument/documentSymbol 3[0m
15:26:08.249835 OUT Elapsed: 0s
15:26:08.433174 IN Elapsed: 183.339ms
15:26:08.433174 [92mIDE --> LS REQU textDocument/codeAction 4[0m
15:26:08.433174 [92m                textDocument/codeAction 4: [93mread-locked[0m[0m
15:26:08.433174 [92m                textDocument/codeAction 4: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:7:0)[0m
15:26:08.433174 [92m                textDocument/codeAction 4: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp[0m
15:26:08.434756 [92m                textDocument/codeAction 4:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:7:0)[0m
15:26:08.434756 [91mIDE     LS --> Clangd REQU textDocument/codeAction 5[0m
15:26:08.434756 OUT Elapsed: 0s
15:26:08.434756 IN Elapsed: 196.4835ms
15:26:08.435285 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 5[0m
15:26:08.435285 [92m                textDocument/codeAction 4: [93mread-unlocked[0m[0m
15:26:08.435285 [32mIDE <-- LS RESP textDocument/codeAction 4[0m
15:26:08.435285 OUT Elapsed: 0s
15:26:08.458380 IN Elapsed: 23.6242ms
15:26:08.458380 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:26:08.458380 [91m                            $/progress: backgroundIndexProgress END [0m
15:26:08.458380 [92mIDE <-- LS NOTIF $/progress[0m
15:26:08.458380 OUT Elapsed: 0s
15:26:09.248981 [95mSKETCH REBUILD: : Sketch rebuild started[0m
15:26:09.248981 [92mIDE <-- LS REQU window/workDoneProgress/create 2[0m
15:26:09.248981 [95mSKETCH REBUILD: : [93mread-locked[0m[0m
15:26:09.248981 [95mSKETCH REBUILD: : [93mread-unlocked[0m[0m
15:26:09.248981 OUT Elapsed: 0s
15:26:09.249541 IN Elapsed: 814.256ms
15:26:09.249541 [32mIDE --> LS RESP window/workDoneProgress/create 2[0m
15:26:09.249541 [92mIDE <-- LS NOTIF $/progress[0m
15:26:09.249541 OUT Elapsed: 0s
15:26:09.250607 [95mSKETCH REBUILD: : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server3413025801\\build",
  "verbose": true,
  "create_compilation_database_only": true,
  "source_override": {
    "Termometer.ino": "/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include \u003cOneWire.h\u003e\r\n#include \u003cDallasTemperature.h\u003e\r\n\r\n#define ONE_WIRE_BUS 2\r\n\r\nOneWire oneWire(ONE_WIRE_BUS);\r\nDallasTemperature sensors(\u0026oneWire);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n  sensors.begin();\r\n}\r\n\r\nvoid loop() {\r\n  sensors.requestTemperatures();\r\n  float temperatureC = sensors.getTempCByIndex(0);\r\n  Serial.print(\"Temperature: \");\r\n  Serial.print(temperatureC);\r\n  Serial.println(\" °C\");\r\n  delay(1000);\r\n}\r\n\r\n"
  },
  "skip_libraries_discovery": true
}[0m
15:26:10.774738 [95mSKETCH REBUILD: : Compile successful![0m
15:26:10.794098 [95mSKETCH REBUILD: : [93mwrite-locked[0m[0m
15:26:10.795197   > Current sketchmapper content:
15:26:10.795197   0: #include <Arduino.h>                                         | /not-ino:0                                         
15:26:10.795197   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
15:26:10.795197   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
15:26:10.795197   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
15:26:10.795197   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
15:26:10.795197   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
15:26:10.795197   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
15:26:10.795197   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
15:26:10.795197   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
15:26:10.795197   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
15:26:10.795197  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
15:26:10.795197  11: #define ONE_WIRE_BUS 2                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
15:26:10.795197  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
15:26:10.795197  13: OneWire oneWire(ONE_WIRE_BUS);                               | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
15:26:10.795197  14: DallasTemperature sensors(&oneWire);                         | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
15:26:10.795197  15:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
15:26:10.795197  16: #line 15 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
15:26:10.795197  17: void setup();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:14 D:\Arduino_GitHub\Termometer\Termometer.ino:14
15:26:10.795197  18: #line 20 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
15:26:10.795197  19: void loop();                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:19 D:\Arduino_GitHub\Termometer\Termometer.ino:19
15:26:10.795197  20: #line 15 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
15:26:10.795197  21: void setup() {                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
15:26:10.795197  22:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
15:26:10.795197  23:   sensors.begin();                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
15:26:10.795197  24: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
15:26:10.795197  25:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
15:26:10.795197  26: void loop() {                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
15:26:10.795197  27:   sensors.requestTemperatures();                             | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
15:26:10.795197  28:   float temperatureC = sensors.getTempCByIndex(0);           | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
15:26:10.795197  29:   Serial.print("Temperature: ");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
15:26:10.795197  30:   Serial.print(temperatureC);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
15:26:10.795197  31:   Serial.println(" °C");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
15:26:10.795197  32:   delay(1000);                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
15:26:10.795197  33: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
15:26:10.795761  34:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
15:26:10.795761  35:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
15:26:10.795761  36:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
15:26:10.795761 [95mSKETCH REBUILD: : Sending 'didSave' notification to Clangd[0m
15:26:10.795761 [91mIDE     LS --> Clangd NOTIF textDocument/didSave[0m
15:26:10.795761 OUT Elapsed: 0s
15:26:10.795761 [95mSKETCH REBUILD: : Sending full-text 'didChange' notification to Clangd[0m
15:26:10.795761 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
15:26:10.796291 OUT Elapsed: 530.3µs
15:26:10.796309 [95mSKETCH REBUILD: : [93mwrite-unlocked[0m[0m
15:26:10.796309 [92mIDE <-- LS NOTIF $/progress[0m
15:26:10.796309 OUT Elapsed: 0s
15:26:22.974682 IN Elapsed: 13.7251418s
15:26:22.975135 [92mIDE --> LS REQU textDocument/hover 5[0m
15:26:22.975135 [92m                textDocument/hover 5: [93mread-locked[0m[0m
15:26:22.975135 [92m                textDocument/hover 5: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp[0m
15:26:22.976718 [92m                textDocument/hover 5: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:21:42 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:28:42[0m
15:26:22.976718 [91mIDE     LS --> Clangd REQU textDocument/hover 6[0m
15:26:22.976718 OUT Elapsed: 0s
15:26:22.993558 IN Elapsed: 14.535178s
15:26:22.993558 [31mIDE     LS <-- Clangd RESP textDocument/hover 6[0m
15:26:22.993558 [92m                textDocument/hover 5: null response[0m
15:26:22.993558 [92m                textDocument/hover 5: [93mread-unlocked[0m[0m
15:26:22.993558 [32mIDE <-- LS RESP textDocument/hover 5[0m
15:26:22.993558 OUT Elapsed: 0s
15:26:25.538742 IN Elapsed: 2.5451846s
15:26:25.538742 [92mIDE --> LS REQU textDocument/hover 6[0m
15:26:25.538742 [92m                textDocument/hover 6: [93mread-locked[0m[0m
15:26:25.539292 [92m                textDocument/hover 6: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp[0m
15:26:25.541916 [92m                textDocument/hover 6: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:7:24 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:9:24[0m
15:26:25.541916 [91mIDE     LS --> Clangd REQU textDocument/hover 7[0m
15:26:25.541916 OUT Elapsed: 0s
15:26:25.544490 IN Elapsed: 2.5509322s
15:26:25.544817 [31mIDE     LS <-- Clangd RESP textDocument/hover 7[0m
15:26:25.544817 [92m                textDocument/hover 6: null response[0m
15:26:25.544817 [92m                textDocument/hover 6: [93mread-unlocked[0m[0m
15:26:25.544817 [32mIDE <-- LS RESP textDocument/hover 6[0m
15:26:25.544817 OUT Elapsed: 0s
15:26:25.919272 IN Elapsed: 374.4554ms
15:26:25.919272 [92mIDE --> LS REQU textDocument/hover 7[0m
15:26:25.919272 [92m                textDocument/hover 7: [93mread-locked[0m[0m
15:26:25.919272 [92m                textDocument/hover 7: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp[0m
15:26:25.920923 [92m                textDocument/hover 7: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:7:24 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3413025801/build/sketch/Termometer.ino.cpp:9:24[0m
15:26:25.920988 [91mIDE     LS --> Clangd REQU textDocument/hover 8[0m
15:26:25.920988 OUT Elapsed: 0s
15:26:25.923195 IN Elapsed: 378.3785ms
15:26:25.923195 [31mIDE     LS <-- Clangd RESP textDocument/hover 8[0m
15:26:25.923195 [92m                textDocument/hover 7: null response[0m
15:26:25.923195 [92m                textDocument/hover 7: [93mread-unlocked[0m[0m
15:26:25.923195 [32mIDE <-- LS RESP textDocument/hover 7[0m
15:26:25.923195 OUT Elapsed: 0s
15:32:26.537292 IN Elapsed: 6m0.6140965s
15:32:26.537292 [92mIDE --> LS REQU shutdown 8[0m
15:32:26.537857 [91mIDE     LS --> Clangd REQU shutdown 9[0m
15:32:26.537857 OUT Elapsed: 0s
15:32:26.538402 IN Elapsed: 6m0.6152063s
15:32:26.538910 [31mIDE     LS <-- Clangd RESP shutdown 9[0m
15:32:26.551124 [32mIDE <-- LS RESP shutdown 8[0m
15:32:26.551124 OUT Elapsed: 0s
15:32:26.556353 IN Elapsed: 5.2294ms
15:32:26.556353 [92mIDE --> LS NOTIF exit[0m
15:32:26.556353 [91mIDE     LS --> Clangd NOTIF exit[0m
15:32:26.556353 OUT Elapsed: 0s
15:32:26.556353 [92m                 exit: Arduino Language Server is exiting.[0m
15:32:26.556353 [91mIDE     LS --> Clangd NOTIF exit[0m
15:32:26.556353 OUT Elapsed: 0s







Started logging.
15:32:26.673014 Language server launched with arguments:
15:32:26.673014   arg[0] = c:\Users\рс\AppData\Local\Programs\Arduino IDE\resources\app\lib\backend\resources\arduino-language-server.exe
15:32:26.673014   arg[1] = -clangd
15:32:26.673014   arg[2] = c:\Users\рс\AppData\Local\Programs\Arduino IDE\resources\app\lib\backend\resources\clangd.exe
15:32:26.673014   arg[3] = -cli-daemon-addr
15:32:26.673014   arg[4] = localhost:56002
15:32:26.673014   arg[5] = -cli-daemon-instance
15:32:26.673014   arg[6] = 1
15:32:26.673014   arg[7] = -fqbn
15:32:26.673014   arg[8] = arduino:avr:leonardo
15:32:26.673014   arg[9] = -skip-libraries-discovery-on-rebuild
15:32:26.673014   arg[10] = -board-name
15:32:26.673014   arg[11] = Arduino Leonardo
15:32:26.673014   arg[12] = -no-real-time-diagnostics
15:32:26.673014   arg[13] = -log
15:32:26.673014   arg[14] = -logpath
15:32:26.673014   arg[15] = d:\Arduino_GitHub\Termometer
15:32:26.673014 logging to d:\Arduino_GitHub\Termometer\inols.log
15:32:26.676810 [97mLS: : Initial board configuration: arduino:avr:leonardo[0m
15:32:26.676810 [97mLS: : arduino-language-server.exe Version: 0.0.0-git Commit:  Date: [0m
15:32:26.676810 [97mLS: : Language server temp directory: C:\Users\рс\AppData\Local\Temp\arduino-language-server3399030946[0m
15:32:26.676810 [97mLS: : Language server build path: C:\Users\рс\AppData\Local\Temp\arduino-language-server3399030946\build[0m
15:32:26.676810 [97mLS: : Language server build sketch root: C:\Users\рс\AppData\Local\Temp\arduino-language-server3399030946\build\sketch[0m
15:32:26.676810 [97mLS: : Language server FULL build path: C:\Users\рс\AppData\Local\Temp\arduino-language-server3399030946\fullbuild[0m
15:32:26.677357 IN Elapsed: 547.2µs
15:32:26.677357 [92mIDE --> LS REQU initialize 0[0m
15:32:26.678430 [92m                initialize 0: [93mwrite-locked[0m[0m
15:32:26.678430 [92m                initialize 0: [93mwrite-unlocked[0m[0m
15:32:26.679027 [96mINIT --- : initializing workbench: file:///d%3A/Arduino_GitHub/Termometer[0m
15:32:26.679027 [96mINIT --- : [93mread-locked[0m[0m
15:32:26.679027 [96mINIT --- : [93mread-unlocked[0m[0m
15:32:26.679571 [92m                initialize 0: initialization parameters: {"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.0.0-git"}}[0m
15:32:26.679571 [32mIDE <-- LS RESP initialize 0[0m
15:32:26.679571 OUT Elapsed: 0s
15:32:26.681704 IN Elapsed: 2.1329ms
15:32:26.681704 [92mIDE --> LS NOTIF initialized[0m
15:32:26.681704 [92m                 initialized: Notification is not propagated to clangd[0m
15:32:26.681704 IN Elapsed: 0s
15:32:26.681704 [92mIDE --> LS NOTIF textDocument/didOpen[0m
15:32:26.681704 [92m                 textDocument/didOpen: [93mwrite-locked[0m[0m
15:32:26.681704 [92m                 textDocument/didOpen: (throttled: waiting for clangd)[0m
15:32:26.681704 [92m                 textDocument/didOpen: [93munlocked (waiting clangd)[0m[0m
15:32:26.693364 [96mINIT --- : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server3399030946\\fullbuild",
  "verbose": true,
  "create_compilation_database_only": true
}[0m
15:32:28.429079 [96mINIT --- : Compile successful![0m
15:32:28.449550 [96mINIT --- : Updated 'libraries.cache'. Copied: C:\Users\рс\AppData\Local\Temp\arduino-language-server3399030946\fullbuild\libraries.cache to C:\Users\рс\AppData\Local\Temp\arduino-language-server3399030946\build\libraries.cache[0m
15:32:28.449550 [96mINIT --- : [93mread-locked[0m[0m
15:32:28.449550 [96mINIT --- : [93mread-unlocked[0m[0m
15:32:28.451724 [96mINIT --- : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server3399030946\\build",
  "verbose": true,
  "create_compilation_database_only": true,
  "skip_libraries_discovery": true
}[0m
15:32:29.628745 [96mINIT --- : Compile successful![0m
15:32:29.652737 [96mINIT --- : Arduino Data Dir -> c:\Users\рс\AppData\Local\Arduino15[0m
15:32:29.655419 [96mINIT --- :     Starting clangd: c:\Users\рс\AppData\Local\Programs\Arduino IDE\resources\app\lib\backend\resources\clangd.exe -log=verbose --pch-storage=memory --compile-commands-dir=C:\Users\рс\AppData\Local\Temp\arduino-language-server3399030946\build -j 1 -query-driver=C:\Users\рс\AppData\Local\Arduino15\packages\**[0m
15:32:29.663720 logging to d:\Arduino_GitHub\Termometer\inols-clangd.log
15:32:29.663720 logging to d:\Arduino_GitHub\Termometer\inols-clangd-err.log
15:32:29.664255 [91mIDE     LS --> Clangd REQU initialize 1[0m
15:32:29.664255 OUT Elapsed: 0s
15:32:29.708136 IN Elapsed: 43.8814ms
15:32:29.708136 [31mIDE     LS <-- Clangd RESP initialize 1[0m
15:32:29.708760 [96mINIT --- : clangd successfully started: {"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/","*"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"]},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",")","{","}","\u003c","\u003e",","]},"declarationProvider":{},"definitionProvider":{},"typeDefinitionProvider":{},"implementationProvider":{},"referencesProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentLinkProvider":{},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{"prepareProvider":true},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"selectionRangeProvider":{},"callHierarchyProvider":{},"semanticTokensProvider":{"legend":{"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","interface","enum","enumMember","type","type","unknown","namespace","typeParameter","concept","type","macro","comment"],"tokenModifiers":["declaration","deprecated","deduced","readonly","static","abstract","virtual","dependentName","defaultLibrary","usedAsMutableReference","functionScope","classScope","fileScope","globalScope"]},"range":false,"full":{"delta":true}},"workspaceSymbolProvider":{}},"serverInfo":{"name":"clangd","version":"clangd version 14.0.0 windows x86_64-pc-windows-msvc"}}[0m
15:32:29.708760 [91mIDE     LS --> Clangd NOTIF initialized[0m
15:32:29.708760 OUT Elapsed: 0s
15:32:29.708760 [96mINIT --- : Done initializing workbench[0m
15:32:29.708760 [92m                 textDocument/didOpen: [93mlocked (waiting clangd)[0m[0m
15:32:29.709267 [92m                 textDocument/didOpen: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:29.710358 [92m                 textDocument/didOpen: Increasing .ino tracked files count to 1[0m
15:32:29.710885 [91mIDE     LS --> Clangd NOTIF textDocument/didOpen[0m
15:32:29.711400 OUT Elapsed: 0s
15:32:29.711400 [92m                 textDocument/didOpen: [93mwrite-unlocked[0m[0m
15:32:29.711400 IN Elapsed: 0s
15:32:29.711400 [92mIDE --> LS REQU textDocument/codeAction 1[0m
15:32:29.711400 [92m                textDocument/codeAction 1: [93mread-locked[0m[0m
15:32:29.711400 [92m                textDocument/codeAction 1: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:7:0)[0m
15:32:29.711943 [92m                textDocument/codeAction 1: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:29.712998 [92m                textDocument/codeAction 1:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:7:0)[0m
15:32:29.712998 [91mIDE     LS --> Clangd REQU textDocument/codeAction 2[0m
15:32:29.712998 OUT Elapsed: 0s
15:32:29.715183 IN Elapsed: 7.0464ms
15:32:29.715183 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
15:32:29.715183 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
15:32:29.722246 IN Elapsed: 7.0638ms
15:32:29.722246 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
15:32:29.722246 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
15:32:29.727068 IN Elapsed: 4.8215ms
15:32:29.727068 [91mIDE     LS <-- Clangd REQU window/workDoneProgress/create 0[0m
15:32:29.727651 [31mIDE     LS --> Clangd RESP window/workDoneProgress/create 0[0m
15:32:29.727651 [92mIDE <-- LS REQU window/workDoneProgress/create 1[0m
15:32:29.727651 OUT Elapsed: 0s
15:32:29.727651 OUT Elapsed: 0s
15:32:29.727651 IN Elapsed: 0s
15:32:29.727651 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:32:29.727651 [91m                            $/progress: backgroundIndexProgress BEGIN indexing, 0.0%[0m
15:32:29.727651 IN Elapsed: 0s
15:32:29.727651 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:32:29.727651 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
15:32:29.730886 IN Elapsed: 3.2356ms
15:32:29.730886 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:32:29.730886 [91m                            $/progress: backgroundIndexProgress REPORT, 0/2, 0.0%[0m
15:32:29.730886 IN Elapsed: 0s
15:32:29.730886 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:32:29.730886 [91m                            $/progress: backgroundIndexProgress REPORT, 1/2, 50.0%[0m
15:32:29.730886 IN Elapsed: 0s
15:32:29.731411 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:32:29.731411 [91m                            $/progress: backgroundIndexProgress REPORT, 1/2, 50.0%[0m
15:32:29.970951 IN Elapsed: 239.5403ms
15:32:29.970951 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
15:32:29.970951 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
15:32:29.970951 IN Elapsed: 0s
15:32:29.971485 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 2[0m
15:32:29.971485 [92m                textDocument/codeAction 1: [93mread-unlocked[0m[0m
15:32:29.971485 [32mIDE <-- LS RESP textDocument/codeAction 1[0m
15:32:29.971485 OUT Elapsed: 0s
15:32:29.971485 IN Elapsed: 0s
15:32:29.971485 [92mIDE --> LS REQU textDocument/hover 2[0m
15:32:29.971485 [92m                textDocument/hover 2: [93mread-locked[0m[0m
15:32:29.972050 [92m                textDocument/hover 2: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:29.974266 [92m                textDocument/hover 2: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:19 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:11:19[0m
15:32:29.974266 [91mIDE     LS --> Clangd REQU textDocument/hover 3[0m
15:32:29.974875 OUT Elapsed: 609.2µs
15:32:29.979993 IN Elapsed: 8.5073ms
15:32:29.979993 [31mIDE     LS <-- Clangd RESP textDocument/hover 3[0m
15:32:29.981050 [92m                textDocument/hover 2: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:11:8-11:20 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:8-9:20 (.ino)[0m
15:32:29.981566 [92m                textDocument/hover 2: Hover content: "### macro `ONE_WIRE_BUS`  \n\n---\n```cpp\n#define ONE_WIRE_BUS 2\n```"[0m
15:32:29.981566 [92m                textDocument/hover 2: [93mread-unlocked[0m[0m
15:32:29.981566 [32mIDE <-- LS RESP textDocument/hover 2[0m
15:32:29.981566 OUT Elapsed: 0s
15:32:29.981566 IN Elapsed: 0s
15:32:29.981566 IN Elapsed: 0s
15:32:29.981566 [92mIDE --> LS REQU textDocument/hover 3[0m
15:32:29.981566 [92m                textDocument/hover 3: [93mread-locked[0m[0m
15:32:29.981566 [92m                textDocument/hover 3: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:29.983782 [92m                textDocument/hover 3: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:7:11 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:9:11[0m
15:32:29.983782 [91mIDE     LS --> Clangd REQU textDocument/hover 4[0m
15:32:29.983782 OUT Elapsed: 0s
15:32:29.986467 IN Elapsed: 6.4741ms
15:32:29.986467 [31mIDE     LS <-- Clangd RESP textDocument/hover 4[0m
15:32:29.986467 [92m                textDocument/hover 3: Hover content: "### `DallasTemperature.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\DallasTemperature.h\n```"[0m
15:32:29.986467 [92m                textDocument/hover 3: [93mread-unlocked[0m[0m
15:32:29.986467 [32mIDE <-- LS RESP textDocument/hover 3[0m
15:32:29.986467 OUT Elapsed: 0s
15:32:29.986467 IN Elapsed: 0s
15:32:29.987000 IN Elapsed: 27.3µs
15:32:29.987000 [32mIDE --> LS RESP window/workDoneProgress/create 1[0m
15:32:29.987000 [92mIDE <-- LS NOTIF $/progress[0m
15:32:29.987000 OUT Elapsed: 0s
15:32:29.987000 [92mIDE <-- LS NOTIF $/progress[0m
15:32:29.987000 OUT Elapsed: 0s
15:32:30.249125 IN Elapsed: 262.6577ms
15:32:30.249125 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:32:30.249125 [91m                            $/progress: backgroundIndexProgress END [0m
15:32:30.249655 [92mIDE <-- LS NOTIF $/progress[0m
15:32:30.249655 OUT Elapsed: 0s
15:32:38.210200 IN Elapsed: 8.2232s
15:32:38.210200 [92mIDE --> LS REQU textDocument/hover 4[0m
15:32:38.210200 [92m                textDocument/hover 4: [93mread-locked[0m[0m
15:32:38.210200 [92m                textDocument/hover 4: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:38.211278 [92m                textDocument/hover 4: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:26 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:13:26[0m
15:32:38.211278 [91mIDE     LS --> Clangd REQU textDocument/hover 5[0m
15:32:38.211278 OUT Elapsed: 0s
15:32:38.216169 IN Elapsed: 7.9670443s
15:32:38.216169 [31mIDE     LS <-- Clangd RESP textDocument/hover 5[0m
15:32:38.217243 [92m                textDocument/hover 4: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:13:16-13:28 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:16-11:28 (.ino)[0m
15:32:38.217243 [92m                textDocument/hover 4: Hover content: "### macro `ONE_WIRE_BUS`  \n\n---\n```cpp\n#define ONE_WIRE_BUS 2\n```"[0m
15:32:38.217243 [92m                textDocument/hover 4: [93mread-unlocked[0m[0m
15:32:38.217243 [32mIDE <-- LS RESP textDocument/hover 4[0m
15:32:38.217243 OUT Elapsed: 0s
15:32:41.700959 IN Elapsed: 3.4837167s
15:32:41.701495 [92mIDE --> LS NOTIF ino/didCompleteBuild[0m
15:32:41.702033 [92m                 ino/didCompleteBuild: [93mwrite-locked[0m[0m
15:32:41.705290 [92m                 ino/didCompleteBuild: Updated 'libraries.cache'. Copied: C:\Users\рс\AppData\Local\arduino\sketches\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\libraries.cache to C:\Users\рс\AppData\Local\Temp\arduino-language-server3399030946\build\libraries.cache[0m
15:32:41.705290 [92m                 ino/didCompleteBuild: [93mwrite-unlocked[0m[0m
15:32:42.713343 [95mSKETCH REBUILD: : Sketch rebuild started[0m
15:32:42.713343 [92mIDE <-- LS REQU window/workDoneProgress/create 2[0m
15:32:42.713343 [95mSKETCH REBUILD: : [93mread-locked[0m[0m
15:32:42.713343 [95mSKETCH REBUILD: : [93mread-unlocked[0m[0m
15:32:42.713343 OUT Elapsed: 0s
15:32:42.713984 IN Elapsed: 1.0086946s
15:32:42.713984 [32mIDE --> LS RESP window/workDoneProgress/create 2[0m
15:32:42.714532 [92mIDE <-- LS NOTIF $/progress[0m
15:32:42.715072 OUT Elapsed: 540.7µs
15:32:42.719986 [95mSKETCH REBUILD: : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server3399030946\\build",
  "verbose": true,
  "create_compilation_database_only": true,
  "source_override": {
    "Termometer.ino": "/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include \u003cOneWire.h\u003e\r\n#include \u003cDallasTemperature.h\u003e\r\n\r\n#define ONE_WIRE_BUS 2\r\n\r\nOneWire oneWire(ONE_WIRE_BUS);\r\nDallasTemperature sensors(\u0026oneWire);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n  sensors.begin();\r\n}\r\n\r\nvoid loop() {\r\n  sensors.requestTemperatures();\r\n  float temperatureC = sensors.getTempCByIndex(0);\r\n  Serial.print(\"Temperature: \");\r\n  Serial.print(temperatureC);\r\n  Serial.println(\" °C\");\r\n  delay(1000);\r\n}\r\n\r\n"
  },
  "skip_libraries_discovery": true
}[0m
15:32:44.179708 [95mSKETCH REBUILD: : Compile successful![0m
15:32:44.197922 [95mSKETCH REBUILD: : [93mwrite-locked[0m[0m
15:32:44.198988   > Current sketchmapper content:
15:32:44.198988   0: #include <Arduino.h>                                         | /not-ino:0                                         
15:32:44.198988   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
15:32:44.198988   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
15:32:44.198988   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
15:32:44.198988   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
15:32:44.198988   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
15:32:44.198988   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
15:32:44.198988   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
15:32:44.198988   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
15:32:44.198988   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
15:32:44.198988  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
15:32:44.198988  11: #define ONE_WIRE_BUS 2                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
15:32:44.198988  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
15:32:44.198988  13: OneWire oneWire(ONE_WIRE_BUS);                               | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
15:32:44.198988  14: DallasTemperature sensors(&oneWire);                         | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
15:32:44.198988  15:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
15:32:44.198988  16: #line 15 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
15:32:44.198988  17: void setup();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:14 D:\Arduino_GitHub\Termometer\Termometer.ino:14
15:32:44.198988  18: #line 20 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
15:32:44.198988  19: void loop();                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:19 D:\Arduino_GitHub\Termometer\Termometer.ino:19
15:32:44.198988  20: #line 15 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
15:32:44.198988  21: void setup() {                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
15:32:44.198988  22:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
15:32:44.198988  23:   sensors.begin();                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
15:32:44.198988  24: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
15:32:44.198988  25:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
15:32:44.198988  26: void loop() {                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
15:32:44.198988  27:   sensors.requestTemperatures();                             | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
15:32:44.198988  28:   float temperatureC = sensors.getTempCByIndex(0);           | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
15:32:44.198988  29:   Serial.print("Temperature: ");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
15:32:44.198988  30:   Serial.print(temperatureC);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
15:32:44.198988  31:   Serial.println(" °C");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
15:32:44.198988  32:   delay(1000);                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
15:32:44.198988  33: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
15:32:44.198988  34:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
15:32:44.198988  35:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
15:32:44.198988  36:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
15:32:44.198988 [95mSKETCH REBUILD: : Sending 'didSave' notification to Clangd[0m
15:32:44.199508 [91mIDE     LS --> Clangd NOTIF textDocument/didSave[0m
15:32:44.199526 OUT Elapsed: 0s
15:32:44.199526 [95mSKETCH REBUILD: : Sending full-text 'didChange' notification to Clangd[0m
15:32:44.199526 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
15:32:44.199526 OUT Elapsed: 0s
15:32:44.199526 [95mSKETCH REBUILD: : [93mwrite-unlocked[0m[0m
15:32:44.199526 [92mIDE <-- LS NOTIF $/progress[0m
15:32:44.199526 OUT Elapsed: 0s
15:32:44.263162 IN Elapsed: 6.046993s
15:32:44.263162 [91mIDE     LS <-- Clangd REQU window/workDoneProgress/create 1[0m
15:32:44.263162 [31mIDE     LS --> Clangd RESP window/workDoneProgress/create 1[0m
15:32:44.263162 [92mIDE <-- LS REQU window/workDoneProgress/create 3[0m
15:32:44.263162 OUT Elapsed: 0s
15:32:44.263162 OUT Elapsed: 0s
15:32:44.263162 IN Elapsed: 0s
15:32:44.263162 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:32:44.263162 [91m                            $/progress: backgroundIndexProgress BEGIN indexing, 0.0%[0m
15:32:44.263162 IN Elapsed: 0s
15:32:44.263162 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:32:44.263162 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
15:32:44.263695 IN Elapsed: 1.5497111s
15:32:44.263695 [32mIDE --> LS RESP window/workDoneProgress/create 3[0m
15:32:44.263695 [92mIDE <-- LS NOTIF $/progress[0m
15:32:44.263695 OUT Elapsed: 0s
15:32:44.263695 [92mIDE <-- LS NOTIF $/progress[0m
15:32:44.263695 OUT Elapsed: 0s
15:32:44.309205 IN Elapsed: 46.043ms
15:32:44.309205 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:32:44.309205 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
15:32:44.309205 IN Elapsed: 0s
15:32:44.309205 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
15:32:44.309205 [92mIDE <-- LS NOTIF $/progress[0m
15:32:44.309205 [91m                            $/progress: backgroundIndexProgress END [0m
15:32:44.309205 OUT Elapsed: 0s
15:32:44.309205 [92mIDE <-- LS NOTIF $/progress[0m
15:32:44.309205 OUT Elapsed: 0s
15:32:44.784048 IN Elapsed: 520.3523ms
15:32:44.784048 [92mIDE --> LS REQU textDocument/hover 5[0m
15:32:44.784048 [92m                textDocument/hover 5: [93mread-locked[0m[0m
15:32:44.784048 [92m                textDocument/hover 5: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:44.785672 [92m                textDocument/hover 5: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:20 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:13:20[0m
15:32:44.785672 [91mIDE     LS --> Clangd REQU textDocument/hover 6[0m
15:32:44.785672 OUT Elapsed: 0s
15:32:44.787799 IN Elapsed: 478.5938ms
15:32:44.788327 [31mIDE     LS <-- Clangd RESP textDocument/hover 6[0m
15:32:44.788858 [92m                textDocument/hover 5: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:13:16-13:28 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:16-11:28 (.ino)[0m
15:32:44.788858 [92m                textDocument/hover 5: Hover content: "### macro `ONE_WIRE_BUS`  \n\n---\n```cpp\n#define ONE_WIRE_BUS 2\n```"[0m
15:32:44.789370 [92m                textDocument/hover 5: [93mread-unlocked[0m[0m
15:32:44.789379 [32mIDE <-- LS RESP textDocument/hover 5[0m
15:32:44.789379 OUT Elapsed: 0s
15:32:45.034809 IN Elapsed: 245.4304ms
15:32:45.034809 [92mIDE --> LS REQU textDocument/hover 6[0m
15:32:45.034809 [92m                textDocument/hover 6: [93mread-locked[0m[0m
15:32:45.034809 [92m                textDocument/hover 6: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:45.036983 [92m                textDocument/hover 6: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:21 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:13:21[0m
15:32:45.036983 [91mIDE     LS --> Clangd REQU textDocument/hover 7[0m
15:32:45.036983 OUT Elapsed: 0s
15:32:45.039659 IN Elapsed: 251.3321ms
15:32:45.039659 [31mIDE     LS <-- Clangd RESP textDocument/hover 7[0m
15:32:45.040740 [92m                textDocument/hover 6: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:13:16-13:28 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:16-11:28 (.ino)[0m
15:32:45.040740 [92m                textDocument/hover 6: Hover content: "### macro `ONE_WIRE_BUS`  \n\n---\n```cpp\n#define ONE_WIRE_BUS 2\n```"[0m
15:32:45.040740 [92m                textDocument/hover 6: [93mread-unlocked[0m[0m
15:32:45.040740 [32mIDE <-- LS RESP textDocument/hover 6[0m
15:32:45.040740 OUT Elapsed: 0s
15:32:49.536981 IN Elapsed: 4.496241s
15:32:49.536981 [92mIDE --> LS REQU textDocument/hover 7[0m
15:32:49.536981 [92m                textDocument/hover 7: [93mread-locked[0m[0m
15:32:49.536981 [92m                textDocument/hover 7: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:49.538577 [92m                textDocument/hover 7: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:1:3 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:3:3[0m
15:32:49.538577 [91mIDE     LS --> Clangd REQU textDocument/hover 8[0m
15:32:49.538577 OUT Elapsed: 0s
15:32:49.542012 IN Elapsed: 4.5023534s
15:32:49.542604 [31mIDE     LS <-- Clangd RESP textDocument/hover 8[0m
15:32:49.542604 [92m                textDocument/hover 7: null response[0m
15:32:49.542604 [92m                textDocument/hover 7: [93mread-unlocked[0m[0m
15:32:49.542604 [32mIDE <-- LS RESP textDocument/hover 7[0m
15:32:49.542604 OUT Elapsed: 0s
15:32:49.926948 IN Elapsed: 384.3441ms
15:32:49.926948 [92mIDE --> LS REQU textDocument/hover 8[0m
15:32:49.926948 [92m                textDocument/hover 8: [93mread-locked[0m[0m
15:32:49.926948 [92m                textDocument/hover 8: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:49.928013 [92m                textDocument/hover 8: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:0:0 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:2:0[0m
15:32:49.928013 [91mIDE     LS --> Clangd REQU textDocument/hover 9[0m
15:32:49.928535 OUT Elapsed: 522µs
15:32:49.930440 IN Elapsed: 387.8358ms
15:32:49.930440 [31mIDE     LS <-- Clangd RESP textDocument/hover 9[0m
15:32:49.930440 [92m                textDocument/hover 8: null response[0m
15:32:49.930440 [92m                textDocument/hover 8: [93mread-unlocked[0m[0m
15:32:49.930440 [32mIDE <-- LS RESP textDocument/hover 8[0m
15:32:49.930440 OUT Elapsed: 0s
15:32:50.924000 IN Elapsed: 993.5602ms
15:32:50.924000 [92mIDE --> LS REQU textDocument/hover 9[0m
15:32:50.924000 [92m                textDocument/hover 9: [93mread-locked[0m[0m
15:32:50.924000 [92m                textDocument/hover 9: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:50.925067 [92m                textDocument/hover 9: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:0:0 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:2:0[0m
15:32:50.925067 [91mIDE     LS --> Clangd REQU textDocument/hover 10[0m
15:32:50.925596 OUT Elapsed: 14.4µs
15:32:50.927184 IN Elapsed: 996.7443ms
15:32:50.927184 [31mIDE     LS <-- Clangd RESP textDocument/hover 10[0m
15:32:50.927184 [92m                textDocument/hover 9: null response[0m
15:32:50.927184 [92m                textDocument/hover 9: [93mread-unlocked[0m[0m
15:32:50.927184 [32mIDE <-- LS RESP textDocument/hover 9[0m
15:32:50.927691 OUT Elapsed: 506.4µs
15:32:52.214365 IN Elapsed: 1.2866642s
15:32:52.214365 [92mIDE --> LS REQU textDocument/codeAction 10[0m
15:32:52.214365 [92m                textDocument/codeAction 10: [93mread-locked[0m[0m
15:32:52.214365 [92m                textDocument/codeAction 10: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:0:0)[0m
15:32:52.214365 [92m                textDocument/codeAction 10: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:52.216039 [92m                textDocument/codeAction 10:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:0:0)[0m
15:32:52.216039 [91mIDE     LS --> Clangd REQU textDocument/codeAction 11[0m
15:32:52.216039 OUT Elapsed: 0s
15:32:52.216669 IN Elapsed: 1.2894845s
15:32:52.216669 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 11[0m
15:32:52.216669 [92m                textDocument/codeAction 10: [93mread-unlocked[0m[0m
15:32:52.217209 [32mIDE <-- LS RESP textDocument/codeAction 10[0m
15:32:52.217209 OUT Elapsed: 0s
15:32:53.653703 IN Elapsed: 1.4364939s
15:32:53.653752 [92mIDE --> LS REQU textDocument/codeAction 11[0m
15:32:53.653752 [92m                textDocument/codeAction 11: [93mread-locked[0m[0m
15:32:53.653752 [92m                textDocument/codeAction 11: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:0:0)[0m
15:32:53.653752 [92m                textDocument/codeAction 11: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:53.654929 [92m                textDocument/codeAction 11:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:0:0)[0m
15:32:53.654929 [91mIDE     LS --> Clangd REQU textDocument/codeAction 12[0m
15:32:53.654929 OUT Elapsed: 0s
15:32:53.655689 IN Elapsed: 1.4390202s
15:32:53.655689 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 12[0m
15:32:53.655689 [92m                textDocument/codeAction 11: [93mread-unlocked[0m[0m
15:32:53.655689 [32mIDE <-- LS RESP textDocument/codeAction 11[0m
15:32:53.655689 OUT Elapsed: 0s
15:32:54.427895 IN Elapsed: 771.6884ms
15:32:54.427895 [92mIDE --> LS REQU textDocument/hover 12[0m
15:32:54.427895 [92m                textDocument/hover 12: [93mread-locked[0m[0m
15:32:54.428421 [92m                textDocument/hover 12: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:54.429558 [92m                textDocument/hover 12: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:22:20 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:29:20[0m
15:32:54.429558 [91mIDE     LS --> Clangd REQU textDocument/hover 13[0m
15:32:54.429558 OUT Elapsed: 0s
15:32:54.431707 IN Elapsed: 776.0179ms
15:32:54.431707 [31mIDE     LS <-- Clangd RESP textDocument/hover 13[0m
15:32:54.432216 [92m                textDocument/hover 12: null response[0m
15:32:54.432231 [92m                textDocument/hover 12: [93mread-unlocked[0m[0m
15:32:54.432254 [32mIDE <-- LS RESP textDocument/hover 12[0m
15:32:54.432254 OUT Elapsed: 0s
15:32:54.665790 IN Elapsed: 233.5353ms
15:32:54.665790 [92mIDE --> LS REQU textDocument/hover 13[0m
15:32:54.665790 [92m                textDocument/hover 13: [93mread-locked[0m[0m
15:32:54.665790 [92m                textDocument/hover 13: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:54.666886 [92m                textDocument/hover 13: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:23:19 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:30:19[0m
15:32:54.667430 [91mIDE     LS --> Clangd REQU textDocument/hover 14[0m
15:32:54.667430 OUT Elapsed: 0s
15:32:54.671428 IN Elapsed: 239.7214ms
15:32:54.671428 [31mIDE     LS <-- Clangd RESP textDocument/hover 14[0m
15:32:54.672419 [92m                textDocument/hover 13: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:30:15-30:27 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:23:15-23:27 (.ino)[0m
15:32:54.672419 [92m                textDocument/hover 13: Hover content: "### variable `temperatureC`  \n\n---\nType: `float`  \n\n---\n```cpp\n// In loop\nfloat temperatureC = sensors.getTempCByIndex(0)\n```"[0m
15:32:54.672419 [92m                textDocument/hover 13: [93mread-unlocked[0m[0m
15:32:54.672419 [32mIDE <-- LS RESP textDocument/hover 13[0m
15:32:54.672419 OUT Elapsed: 0s
15:32:55.054205 IN Elapsed: 381.7852ms
15:32:55.054205 [92mIDE --> LS REQU textDocument/hover 14[0m
15:32:55.054205 [92m                textDocument/hover 14: [93mread-locked[0m[0m
15:32:55.054766 [92m                textDocument/hover 14: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:55.057441 [92m                textDocument/hover 14: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:23:17 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:30:17[0m
15:32:55.057441 [91mIDE     LS --> Clangd REQU textDocument/hover 15[0m
15:32:55.057441 OUT Elapsed: 0s
15:32:55.060174 IN Elapsed: 388.7456ms
15:32:55.060770 [31mIDE     LS <-- Clangd RESP textDocument/hover 15[0m
15:32:55.062882 [92m                textDocument/hover 14: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:30:15-30:27 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:23:15-23:27 (.ino)[0m
15:32:55.062882 [92m                textDocument/hover 14: Hover content: "### variable `temperatureC`  \n\n---\nType: `float`  \n\n---\n```cpp\n// In loop\nfloat temperatureC = sensors.getTempCByIndex(0)\n```"[0m
15:32:55.062882 [92m                textDocument/hover 14: [93mread-unlocked[0m[0m
15:32:55.062882 [32mIDE <-- LS RESP textDocument/hover 14[0m
15:32:55.062882 OUT Elapsed: 0s
15:32:59.335495 IN Elapsed: 4.2726126s
15:32:59.335495 [92mIDE --> LS REQU textDocument/codeAction 15[0m
15:32:59.335495 [92m                textDocument/codeAction 15: [93mread-locked[0m[0m
15:32:59.335495 [92m                textDocument/codeAction 15: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:13)[0m
15:32:59.335495 [92m                textDocument/codeAction 15: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:32:59.337062 [92m                textDocument/codeAction 15:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:19:13)[0m
15:32:59.337117 [91mIDE     LS --> Clangd REQU textDocument/codeAction 16[0m
15:32:59.337117 OUT Elapsed: 0s
15:32:59.337117 IN Elapsed: 4.2763471s
15:32:59.337117 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 16[0m
15:32:59.337644 [92m                textDocument/codeAction 15: [93mread-unlocked[0m[0m
15:32:59.337644 [32mIDE <-- LS RESP textDocument/codeAction 15[0m
15:32:59.337644 OUT Elapsed: 0s
15:42:26.979241 IN Elapsed: 9m27.6415963s
15:42:26.979241 [92mIDE --> LS REQU textDocument/codeAction 16[0m
15:42:26.979241 [92m                textDocument/codeAction 16: [93mread-locked[0m[0m
15:42:26.979241 [92m                textDocument/codeAction 16: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:17:1)[0m
15:42:26.979241 [92m                textDocument/codeAction 16: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:42:26.980827 [92m                textDocument/codeAction 16:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:17:1)[0m
15:42:26.980933 [91mIDE     LS --> Clangd REQU textDocument/codeAction 17[0m
15:42:26.980933 OUT Elapsed: 0s
15:42:26.984093 IN Elapsed: 9m27.6469762s
15:42:26.984093 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 17[0m
15:42:26.984093 [92m                textDocument/codeAction 16: [93mread-unlocked[0m[0m
15:42:26.984093 [32mIDE <-- LS RESP textDocument/codeAction 16[0m
15:42:26.984615 OUT Elapsed: 0s
15:42:31.602301 IN Elapsed: 4.6176863s
15:42:31.602301 [92mIDE --> LS REQU textDocument/hover 17[0m
15:42:31.602301 [92m                textDocument/hover 17: [93mread-locked[0m[0m
15:42:31.602301 [92m                textDocument/hover 17: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:42:31.603889 [92m                textDocument/hover 17: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:7:18 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:9:18[0m
15:42:31.603889 [91mIDE     LS --> Clangd REQU textDocument/hover 18[0m
15:42:31.603889 OUT Elapsed: 0s
15:42:31.606503 IN Elapsed: 4.6224097s
15:42:31.606503 [31mIDE     LS <-- Clangd RESP textDocument/hover 18[0m
15:42:31.606503 [92m                textDocument/hover 17: Hover content: "### `DallasTemperature.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\DallasTemperature.h\n```"[0m
15:42:31.606503 [92m                textDocument/hover 17: [93mread-unlocked[0m[0m
15:42:31.606503 [32mIDE <-- LS RESP textDocument/hover 17[0m
15:42:31.606503 OUT Elapsed: 0s
15:42:32.296903 IN Elapsed: 690.4004ms
15:42:32.296903 [92mIDE --> LS REQU textDocument/hover 18[0m
15:42:32.296903 [92m                textDocument/hover 18: [93mread-locked[0m[0m
15:42:32.296903 [92m                textDocument/hover 18: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:42:32.298520 [92m                textDocument/hover 18: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:0:0 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:2:0[0m
15:42:32.298520 [91mIDE     LS --> Clangd REQU textDocument/hover 19[0m
15:42:32.298520 OUT Elapsed: 0s
15:42:32.303088 IN Elapsed: 696.5853ms
15:42:32.303088 [31mIDE     LS <-- Clangd RESP textDocument/hover 19[0m
15:42:32.303088 [92m                textDocument/hover 18: null response[0m
15:42:32.303088 [92m                textDocument/hover 18: [93mread-unlocked[0m[0m
15:42:32.303088 [32mIDE <-- LS RESP textDocument/hover 18[0m
15:42:32.303088 OUT Elapsed: 0s
15:42:33.878866 IN Elapsed: 1.5757784s
15:42:33.878866 [92mIDE --> LS REQU textDocument/codeAction 19[0m
15:42:33.878866 [92m                textDocument/codeAction 19: [93mread-locked[0m[0m
15:42:33.878866 [92m                textDocument/codeAction 19: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:0:0)[0m
15:42:33.879865 [92m                textDocument/codeAction 19: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:42:33.881000 [92m                textDocument/codeAction 19:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:0:0)[0m
15:42:33.881000 [91mIDE     LS --> Clangd REQU textDocument/codeAction 20[0m
15:42:33.881000 OUT Elapsed: 0s
15:42:33.881530 IN Elapsed: 1.5784418s
15:42:33.881530 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 20[0m
15:42:33.881530 [92m                textDocument/codeAction 19: [93mread-unlocked[0m[0m
15:42:33.881530 [32mIDE <-- LS RESP textDocument/codeAction 19[0m
15:42:33.881530 OUT Elapsed: 0s
15:42:34.515045 IN Elapsed: 633.5153ms
15:42:34.515045 [92mIDE --> LS REQU textDocument/codeAction 20[0m
15:42:34.515045 [92m                textDocument/codeAction 20: [93mread-locked[0m[0m
15:42:34.515045 [92m                textDocument/codeAction 20: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:0:0)[0m
15:42:34.515627 [92m                textDocument/codeAction 20: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:42:34.518250 [92m                textDocument/codeAction 20:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:0:0)[0m
15:42:34.518250 [91mIDE     LS --> Clangd REQU textDocument/codeAction 21[0m
15:42:34.518250 OUT Elapsed: 0s
15:42:34.518831 IN Elapsed: 637.3018ms
15:42:34.518831 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 21[0m
15:42:34.518831 [92m                textDocument/codeAction 20: [93mread-unlocked[0m[0m
15:42:34.518831 [32mIDE <-- LS RESP textDocument/codeAction 20[0m
15:42:34.518831 OUT Elapsed: 0s
15:42:35.280482 IN Elapsed: 761.6506ms
15:42:35.280566 [92mIDE --> LS REQU textDocument/hover 21[0m
15:42:35.280566 [92m                textDocument/hover 21: [93mread-locked[0m[0m
15:42:35.280566 [92m                textDocument/hover 21: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:42:35.282141 [92m                textDocument/hover 21: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:22:13 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:29:13[0m
15:42:35.282141 [91mIDE     LS --> Clangd REQU textDocument/hover 22[0m
15:42:35.282141 OUT Elapsed: 0s
15:42:35.284296 IN Elapsed: 765.4642ms
15:42:35.284296 [31mIDE     LS <-- Clangd RESP textDocument/hover 22[0m
15:42:35.284807 [92m                textDocument/hover 21: null response[0m
15:42:35.284807 [92m                textDocument/hover 21: [93mread-unlocked[0m[0m
15:42:35.284837 [32mIDE <-- LS RESP textDocument/hover 21[0m
15:42:35.284837 OUT Elapsed: 0s
15:42:35.765118 IN Elapsed: 480.281ms
15:42:35.765118 [92mIDE --> LS REQU textDocument/hover 22[0m
15:42:35.765118 [92m                textDocument/hover 22: [93mread-locked[0m[0m
15:42:35.765118 [92m                textDocument/hover 22: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:42:35.766708 [92m                textDocument/hover 22: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:23:13 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:30:13[0m
15:42:35.766708 [91mIDE     LS --> Clangd REQU textDocument/hover 23[0m
15:42:35.766708 OUT Elapsed: 0s
15:42:35.770781 IN Elapsed: 486.4852ms
15:42:35.771373 [31mIDE     LS <-- Clangd RESP textDocument/hover 23[0m
15:42:35.771373 [92m                textDocument/hover 22: null response[0m
15:42:35.771373 [92m                textDocument/hover 22: [93mread-unlocked[0m[0m
15:42:35.771373 [32mIDE <-- LS RESP textDocument/hover 22[0m
15:42:35.771373 OUT Elapsed: 0s
15:42:38.631884 IN Elapsed: 2.8605114s
15:42:38.631884 [92mIDE --> LS REQU textDocument/codeAction 23[0m
15:42:38.631884 [92m                textDocument/codeAction 23: [93mread-locked[0m[0m
15:42:38.631884 [92m                textDocument/codeAction 23: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:25:14)[0m
15:42:38.631884 [92m                textDocument/codeAction 23: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp[0m
15:42:38.633474 [92m                textDocument/codeAction 23:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server3399030946/build/sketch/Termometer.ino.cpp:25:14)[0m
15:42:38.633474 [91mIDE     LS --> Clangd REQU textDocument/codeAction 24[0m
15:42:38.633474 OUT Elapsed: 0s
15:42:38.635926 IN Elapsed: 2.8645526s
15:42:38.635926 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 24[0m
15:42:38.635926 [92m                textDocument/codeAction 23: [93mread-unlocked[0m[0m
15:42:38.635926 [32mIDE <-- LS RESP textDocument/codeAction 23[0m
15:42:38.635926 OUT Elapsed: 0s
16:29:23.925450 IN Elapsed: 46m45.2895246s
16:29:23.925450 [92mIDE --> LS REQU shutdown 24[0m
16:29:23.925450 [91mIDE     LS --> Clangd REQU shutdown 25[0m
16:29:23.925450 OUT Elapsed: 0s
16:29:23.934885 IN Elapsed: 46m45.2989597s
16:29:23.936863 [31mIDE     LS <-- Clangd RESP shutdown 25[0m
16:29:24.480005 [32mIDE <-- LS RESP shutdown 24[0m
16:29:24.480005 OUT Elapsed: 0s
16:29:24.480552 IN Elapsed: 547.5µs
16:29:24.480552 [92mIDE --> LS NOTIF exit[0m
16:29:24.480552 [91mIDE     LS --> Clangd NOTIF exit[0m
16:29:24.481059 OUT Elapsed: 507.4µs
16:29:24.481106 [92m                 exit: Arduino Language Server is exiting.[0m
16:29:24.481106 [91mIDE     LS --> Clangd NOTIF exit[0m
16:29:24.481106 OUT Elapsed: 0s







Started logging.
17:28:17.250270 Language server launched with arguments:
17:28:17.250270   arg[0] = c:\Users\рс\AppData\Local\Programs\Arduino IDE\resources\app\lib\backend\resources\arduino-language-server.exe
17:28:17.250270   arg[1] = -clangd
17:28:17.250270   arg[2] = c:\Users\рс\AppData\Local\Programs\Arduino IDE\resources\app\lib\backend\resources\clangd.exe
17:28:17.250270   arg[3] = -cli-daemon-addr
17:28:17.250270   arg[4] = localhost:56002
17:28:17.250270   arg[5] = -cli-daemon-instance
17:28:17.250270   arg[6] = 1
17:28:17.250270   arg[7] = -fqbn
17:28:17.250270   arg[8] = arduino:avr:leonardo
17:28:17.250791   arg[9] = -skip-libraries-discovery-on-rebuild
17:28:17.250809   arg[10] = -board-name
17:28:17.250809   arg[11] = Arduino Leonardo
17:28:17.250809   arg[12] = -no-real-time-diagnostics
17:28:17.250809   arg[13] = -log
17:28:17.250809   arg[14] = -logpath
17:28:17.250809   arg[15] = d:\Arduino_GitHub\Termometer
17:28:17.250809 logging to d:\Arduino_GitHub\Termometer\inols.log
17:28:17.256836 [97mLS: : Initial board configuration: arduino:avr:leonardo[0m
17:28:17.256836 [97mLS: : arduino-language-server.exe Version: 0.0.0-git Commit:  Date: [0m
17:28:17.256836 [97mLS: : Language server temp directory: C:\Users\рс\AppData\Local\Temp\arduino-language-server126403308[0m
17:28:17.256836 [97mLS: : Language server build path: C:\Users\рс\AppData\Local\Temp\arduino-language-server126403308\build[0m
17:28:17.256836 [97mLS: : Language server build sketch root: C:\Users\рс\AppData\Local\Temp\arduino-language-server126403308\build\sketch[0m
17:28:17.256836 [97mLS: : Language server FULL build path: C:\Users\рс\AppData\Local\Temp\arduino-language-server126403308\fullbuild[0m
17:28:17.256836 IN Elapsed: 0s
17:28:17.257835 [92mIDE --> LS REQU initialize 0[0m
17:28:17.258835 [92m                initialize 0: [93mwrite-locked[0m[0m
17:28:17.258835 [92m                initialize 0: [93mwrite-unlocked[0m[0m
17:28:17.259835 [96mINIT --- : initializing workbench: file:///d%3A/Arduino_GitHub/Termometer[0m
17:28:17.259835 [96mINIT --- : [93mread-locked[0m[0m
17:28:17.259835 [96mINIT --- : [93mread-unlocked[0m[0m
17:28:17.260834 [92m                initialize 0: initialization parameters: {"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.0.0-git"}}[0m
17:28:17.260834 [32mIDE <-- LS RESP initialize 0[0m
17:28:17.260834 OUT Elapsed: 0s
17:28:17.276569 IN Elapsed: 15.7353ms
17:28:17.276569 [92mIDE --> LS NOTIF initialized[0m
17:28:17.276569 [92m                 initialized: Notification is not propagated to clangd[0m
17:28:17.276569 IN Elapsed: 0s
17:28:17.277568 [92mIDE --> LS NOTIF textDocument/didOpen[0m
17:28:17.278301 [92m                 textDocument/didOpen: [93mwrite-locked[0m[0m
17:28:17.278301 [92m                 textDocument/didOpen: (throttled: waiting for clangd)[0m
17:28:17.278301 [92m                 textDocument/didOpen: [93munlocked (waiting clangd)[0m[0m
17:28:17.293290 [96mINIT --- : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server126403308\\fullbuild",
  "verbose": true,
  "create_compilation_database_only": true
}[0m
17:28:26.116691 [96mINIT --- : Compile successful![0m
17:28:26.119385 [96mINIT --- : Updated 'libraries.cache'. Copied: C:\Users\рс\AppData\Local\Temp\arduino-language-server126403308\fullbuild\libraries.cache to C:\Users\рс\AppData\Local\Temp\arduino-language-server126403308\build\libraries.cache[0m
17:28:26.119385 [96mINIT --- : [93mread-locked[0m[0m
17:28:26.119385 [96mINIT --- : [93mread-unlocked[0m[0m
17:28:26.126887 [96mINIT --- : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server126403308\\build",
  "verbose": true,
  "create_compilation_database_only": true,
  "skip_libraries_discovery": true
}[0m
17:28:27.597622 [96mINIT --- : Compile successful![0m
17:28:27.634010 [96mINIT --- : Arduino Data Dir -> c:\Users\рс\AppData\Local\Arduino15[0m
17:28:27.637842 [96mINIT --- :     Starting clangd: c:\Users\рс\AppData\Local\Programs\Arduino IDE\resources\app\lib\backend\resources\clangd.exe -log=verbose --pch-storage=memory --compile-commands-dir=C:\Users\рс\AppData\Local\Temp\arduino-language-server126403308\build -j 1 -query-driver=C:\Users\рс\AppData\Local\Arduino15\packages\**[0m
17:28:27.792709 logging to d:\Arduino_GitHub\Termometer\inols-clangd.log
17:28:27.792709 logging to d:\Arduino_GitHub\Termometer\inols-clangd-err.log
17:28:27.792709 [91mIDE     LS --> Clangd REQU initialize 1[0m
17:28:27.792709 OUT Elapsed: 0s
17:28:27.856538 IN Elapsed: 63.829ms
17:28:27.856538 [31mIDE     LS <-- Clangd RESP initialize 1[0m
17:28:27.857083 [96mINIT --- : clangd successfully started: {"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/","*"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"]},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",")","{","}","\u003c","\u003e",","]},"declarationProvider":{},"definitionProvider":{},"typeDefinitionProvider":{},"implementationProvider":{},"referencesProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentLinkProvider":{},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{"prepareProvider":true},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"selectionRangeProvider":{},"callHierarchyProvider":{},"semanticTokensProvider":{"legend":{"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","interface","enum","enumMember","type","type","unknown","namespace","typeParameter","concept","type","macro","comment"],"tokenModifiers":["declaration","deprecated","deduced","readonly","static","abstract","virtual","dependentName","defaultLibrary","usedAsMutableReference","functionScope","classScope","fileScope","globalScope"]},"range":false,"full":{"delta":true}},"workspaceSymbolProvider":{}},"serverInfo":{"name":"clangd","version":"clangd version 14.0.0 windows x86_64-pc-windows-msvc"}}[0m
17:28:27.857083 [91mIDE     LS --> Clangd NOTIF initialized[0m
17:28:27.857083 OUT Elapsed: 0s
17:28:27.857083 [96mINIT --- : Done initializing workbench[0m
17:28:27.857083 [92m                 textDocument/didOpen: [93mlocked (waiting clangd)[0m[0m
17:28:27.857623 [92m                 textDocument/didOpen: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:28:27.858690 [92m                 textDocument/didOpen: Increasing .ino tracked files count to 1[0m
17:28:27.859765 [91mIDE     LS --> Clangd NOTIF textDocument/didOpen[0m
17:28:27.859765 OUT Elapsed: 0s
17:28:27.859765 [92m                 textDocument/didOpen: [93mwrite-unlocked[0m[0m
17:28:27.859765 IN Elapsed: 0s
17:28:27.859765 [92mIDE --> LS REQU textDocument/codeAction 1[0m
17:28:27.860305 [92m                textDocument/codeAction 1: [93mread-locked[0m[0m
17:28:27.860305 [92m                textDocument/codeAction 1: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:25:14)[0m
17:28:27.860305 [92m                textDocument/codeAction 1: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:28:27.862682 [92m                textDocument/codeAction 1:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:25:14)[0m
17:28:27.862682 [91mIDE     LS --> Clangd REQU textDocument/codeAction 2[0m
17:28:27.863191 OUT Elapsed: 509.5µs
17:28:27.865440 IN Elapsed: 8.9024ms
17:28:27.865440 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:28:27.865440 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:28:27.872800 IN Elapsed: 7.3594ms
17:28:27.872800 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:28:27.872800 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:28:27.877497 IN Elapsed: 4.697ms
17:28:27.877497 [91mIDE     LS <-- Clangd REQU window/workDoneProgress/create 0[0m
17:28:27.877497 [31mIDE     LS --> Clangd RESP window/workDoneProgress/create 0[0m
17:28:27.877497 [92mIDE <-- LS REQU window/workDoneProgress/create 1[0m
17:28:27.877497 OUT Elapsed: 0s
17:28:27.877497 OUT Elapsed: 0s
17:28:27.877497 IN Elapsed: 0s
17:28:27.877497 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:28:27.878078 [91m                            $/progress: backgroundIndexProgress BEGIN indexing, 0.0%[0m
17:28:27.878078 IN Elapsed: 0s
17:28:27.878078 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:28:27.878078 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
17:28:27.882000 IN Elapsed: 3.9217ms
17:28:27.882000 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:28:27.882000 [91m                            $/progress: backgroundIndexProgress REPORT, 0/2, 0.0%[0m
17:28:27.882000 IN Elapsed: 0s
17:28:27.882000 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:28:27.882000 [91m                            $/progress: backgroundIndexProgress REPORT, 1/2, 50.0%[0m
17:28:27.882000 IN Elapsed: 0s
17:28:27.882000 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:28:27.882000 [91m                            $/progress: backgroundIndexProgress REPORT, 1/2, 50.0%[0m
17:28:28.156465 IN Elapsed: 274.4655ms
17:28:28.156465 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:28:28.156465 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:28:28.157016 IN Elapsed: 550.3µs
17:28:28.157016 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 2[0m
17:28:28.157016 [92m                textDocument/codeAction 1: [93mread-unlocked[0m[0m
17:28:28.157016 [32mIDE <-- LS RESP textDocument/codeAction 1[0m
17:28:28.157016 OUT Elapsed: 0s
17:28:28.157016 IN Elapsed: 0s
17:28:28.157016 [32mIDE --> LS RESP window/workDoneProgress/create 1[0m
17:28:28.157016 [92mIDE <-- LS NOTIF $/progress[0m
17:28:28.157016 OUT Elapsed: 0s
17:28:28.157016 [92mIDE <-- LS NOTIF $/progress[0m
17:28:28.157016 OUT Elapsed: 0s
17:28:28.530783 IN Elapsed: 373.767ms
17:28:28.531363 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:28:28.531363 [91m                            $/progress: backgroundIndexProgress END [0m
17:28:28.531363 [92mIDE <-- LS NOTIF $/progress[0m
17:28:28.531363 OUT Elapsed: 0s
17:47:25.683974 IN Elapsed: 18m57.5269585s
17:47:25.684527 [92mIDE --> LS REQU textDocument/documentHighlight 2[0m
17:47:25.685059 [92m                textDocument/documentHighlight 2: [93mread-locked[0m[0m
17:47:25.685649 [92m                textDocument/documentHighlight 2: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:25.687412 [92m                textDocument/documentHighlight 2: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:25 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:12:25[0m
17:47:25.687412 [91mIDE     LS --> Clangd REQU textDocument/documentHighlight 3[0m
17:47:25.687944 OUT Elapsed: 531.3µs
17:47:25.697494 IN Elapsed: 18m57.1661313s
17:47:25.698083 [31mIDE     LS <-- Clangd RESP textDocument/documentHighlight 3[0m
17:47:25.698083 [92m                textDocument/documentHighlight 2: [93mread-unlocked[0m[0m
17:47:25.698083 [32mIDE <-- LS RESP textDocument/documentHighlight 2[0m
17:47:25.698083 OUT Elapsed: 0s
17:47:25.892867 IN Elapsed: 194.7834ms
17:47:25.892867 [92mIDE --> LS REQU textDocument/codeAction 3[0m
17:47:25.892867 [92m                textDocument/codeAction 3: [93mread-locked[0m[0m
17:47:25.892867 [92m                textDocument/codeAction 3: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:25)[0m
17:47:25.893411 [92m                textDocument/codeAction 3: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:25.893949 [92m                textDocument/codeAction 3:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:11:25)[0m
17:47:25.893949 [91mIDE     LS --> Clangd REQU textDocument/codeAction 4[0m
17:47:25.893949 OUT Elapsed: 0s
17:47:25.895823 IN Elapsed: 197.8048ms
17:47:25.895823 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 4[0m
17:47:25.895823 [92m                textDocument/codeAction 3: [93mread-unlocked[0m[0m
17:47:25.895823 [32mIDE <-- LS RESP textDocument/codeAction 3[0m
17:47:25.895823 OUT Elapsed: 0s
17:47:26.549904 IN Elapsed: 654.0809ms
17:47:26.549904 [92mIDE --> LS REQU textDocument/hover 4[0m
17:47:26.550757 [92m                textDocument/hover 4: [93mread-locked[0m[0m
17:47:26.550757 [92m                textDocument/hover 4: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:26.551862 [92m                textDocument/hover 4: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:16 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:21:16[0m
17:47:26.551862 [91mIDE     LS --> Clangd REQU textDocument/hover 5[0m
17:47:26.551862 OUT Elapsed: 0s
17:47:26.555120 IN Elapsed: 659.297ms
17:47:26.555120 [31mIDE     LS <-- Clangd RESP textDocument/hover 5[0m
17:47:26.555120 [92m                textDocument/hover 4: null response[0m
17:47:26.555120 [92m                textDocument/hover 4: [93mread-unlocked[0m[0m
17:47:26.555120 [32mIDE <-- LS RESP textDocument/hover 4[0m
17:47:26.555120 OUT Elapsed: 0s
17:47:26.843397 IN Elapsed: 288.2774ms
17:47:26.843397 [92mIDE --> LS REQU textDocument/hover 5[0m
17:47:26.843397 [92m                textDocument/hover 5: [93mread-locked[0m[0m
17:47:26.843397 [92m                textDocument/hover 5: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:26.843931 [92m                textDocument/hover 5: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:15:16 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:16:16[0m
17:47:26.844442 [91mIDE     LS --> Clangd REQU textDocument/hover 6[0m
17:47:26.844478 OUT Elapsed: 0s
17:47:26.846610 IN Elapsed: 291.4897ms
17:47:26.847190 [31mIDE     LS <-- Clangd RESP textDocument/hover 6[0m
17:47:26.847190 [92m                textDocument/hover 5: null response[0m
17:47:26.847190 [92m                textDocument/hover 5: [93mread-unlocked[0m[0m
17:47:26.847190 [32mIDE <-- LS RESP textDocument/hover 5[0m
17:47:26.847190 OUT Elapsed: 0s
17:47:27.709667 IN Elapsed: 862.4776ms
17:47:27.709667 [92mIDE --> LS REQU textDocument/hover 6[0m
17:47:27.709667 [92m                textDocument/hover 6: [93mread-locked[0m[0m
17:47:27.710227 [92m                textDocument/hover 6: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:27.710748 [92m                textDocument/hover 6: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:26 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:12:26[0m
17:47:27.710748 [91mIDE     LS --> Clangd REQU textDocument/hover 7[0m
17:47:27.710748 OUT Elapsed: 0s
17:47:27.712375 IN Elapsed: 865.1853ms
17:47:27.712375 [31mIDE     LS <-- Clangd RESP textDocument/hover 7[0m
17:47:27.712375 [92m                textDocument/hover 6: null response[0m
17:47:27.712375 [92m                textDocument/hover 6: [93mread-unlocked[0m[0m
17:47:27.712375 [32mIDE <-- LS RESP textDocument/hover 6[0m
17:47:27.712375 OUT Elapsed: 0s
17:47:28.280949 IN Elapsed: 568.5741ms
17:47:28.280975 [92mIDE --> LS REQU textDocument/hover 7[0m
17:47:28.280975 [92m                textDocument/hover 7: [93mread-locked[0m[0m
17:47:28.280975 [92m                textDocument/hover 7: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:28.281520 [92m                textDocument/hover 7: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:27 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:12:27[0m
17:47:28.281520 [91mIDE     LS --> Clangd REQU textDocument/hover 8[0m
17:47:28.281520 OUT Elapsed: 0s
17:47:28.283712 IN Elapsed: 571.3364ms
17:47:28.283712 [31mIDE     LS <-- Clangd RESP textDocument/hover 8[0m
17:47:28.283712 [92m                textDocument/hover 7: null response[0m
17:47:28.283712 [92m                textDocument/hover 7: [93mread-unlocked[0m[0m
17:47:28.283712 [32mIDE <-- LS RESP textDocument/hover 7[0m
17:47:28.283712 OUT Elapsed: 0s
17:47:29.281396 IN Elapsed: 997.6841ms
17:47:29.281396 [92mIDE --> LS REQU textDocument/hover 8[0m
17:47:29.281396 [92m                textDocument/hover 8: [93mread-locked[0m[0m
17:47:29.281959 [92m                textDocument/hover 8: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:29.283098 [92m                textDocument/hover 8: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:7:12 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:8:12[0m
17:47:29.283624 [91mIDE     LS --> Clangd REQU textDocument/hover 9[0m
17:47:29.283645 OUT Elapsed: 0s
17:47:29.285822 IN Elapsed: 1.0021109s
17:47:29.286331 [31mIDE     LS <-- Clangd RESP textDocument/hover 9[0m
17:47:29.286364 [92m                textDocument/hover 8: Hover content: "### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"[0m
17:47:29.286364 [92m                textDocument/hover 8: [93mread-unlocked[0m[0m
17:47:29.286364 [32mIDE <-- LS RESP textDocument/hover 8[0m
17:47:29.286364 OUT Elapsed: 0s
17:47:31.871979 IN Elapsed: 2.585615s
17:47:31.872020 [92mIDE --> LS REQU textDocument/hover 9[0m
17:47:31.872020 [92m                textDocument/hover 9: [93mread-locked[0m[0m
17:47:31.872020 [92m                textDocument/hover 9: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:31.872559 [92m                textDocument/hover 9: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:7:0 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:8:0[0m
17:47:31.872559 [91mIDE     LS --> Clangd REQU textDocument/hover 10[0m
17:47:31.872559 OUT Elapsed: 0s
17:47:31.876378 IN Elapsed: 2.5905551s
17:47:31.876378 [31mIDE     LS <-- Clangd RESP textDocument/hover 10[0m
17:47:31.876378 [92m                textDocument/hover 9: Hover content: "### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"[0m
17:47:31.876378 [92m                textDocument/hover 9: [93mread-unlocked[0m[0m
17:47:31.876378 [32mIDE <-- LS RESP textDocument/hover 9[0m
17:47:31.876378 OUT Elapsed: 0s
17:47:33.430520 IN Elapsed: 1.5541429s
17:47:33.430520 [92mIDE --> LS REQU textDocument/hover 10[0m
17:47:33.430520 [92m                textDocument/hover 10: [93mread-locked[0m[0m
17:47:33.431076 [92m                textDocument/hover 10: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:33.432162 [92m                textDocument/hover 10: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:7:1 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:8:1[0m
17:47:33.432700 [91mIDE     LS --> Clangd REQU textDocument/hover 11[0m
17:47:33.432700 OUT Elapsed: 0s
17:47:33.434782 IN Elapsed: 1.5584048s
17:47:33.434782 [31mIDE     LS <-- Clangd RESP textDocument/hover 11[0m
17:47:33.434782 [92m                textDocument/hover 10: Hover content: "### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"[0m
17:47:33.434782 [92m                textDocument/hover 10: [93mread-unlocked[0m[0m
17:47:33.434782 [32mIDE <-- LS RESP textDocument/hover 10[0m
17:47:33.434782 OUT Elapsed: 0s
17:47:34.444573 IN Elapsed: 1.0097906s
17:47:34.444573 [92mIDE --> LS REQU textDocument/hover 11[0m
17:47:34.444573 [92m                textDocument/hover 11: [93mread-locked[0m[0m
17:47:34.444573 [92m                textDocument/hover 11: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:34.444573 [92m                textDocument/hover 11: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:2 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:10:2[0m
17:47:34.444573 [91mIDE     LS --> Clangd REQU textDocument/hover 12[0m
17:47:34.444573 OUT Elapsed: 0s
17:47:34.447057 IN Elapsed: 1.0122751s
17:47:34.447597 [31mIDE     LS <-- Clangd RESP textDocument/hover 12[0m
17:47:34.447597 [92m                textDocument/hover 11: null response[0m
17:47:34.447597 [92m                textDocument/hover 11: [93mread-unlocked[0m[0m
17:47:34.447597 [32mIDE <-- LS RESP textDocument/hover 11[0m
17:47:34.447597 OUT Elapsed: 0s
17:47:36.853495 IN Elapsed: 2.4058975s
17:47:36.853495 [92mIDE --> LS REQU textDocument/hover 12[0m
17:47:36.853495 [92m                textDocument/hover 12: [93mread-locked[0m[0m
17:47:36.854069 [92m                textDocument/hover 12: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:36.854610 [92m                textDocument/hover 12: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:3 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:10:3[0m
17:47:36.854610 [91mIDE     LS --> Clangd REQU textDocument/hover 13[0m
17:47:36.854610 OUT Elapsed: 0s
17:47:36.856586 IN Elapsed: 2.4089888s
17:47:36.856586 [31mIDE     LS <-- Clangd RESP textDocument/hover 13[0m
17:47:36.856586 [92m                textDocument/hover 12: null response[0m
17:47:36.856586 [92m                textDocument/hover 12: [93mread-unlocked[0m[0m
17:47:36.856586 [32mIDE <-- LS RESP textDocument/hover 12[0m
17:47:36.856586 OUT Elapsed: 0s
17:47:38.072396 IN Elapsed: 1.21581s
17:47:38.072396 [92mIDE --> LS REQU textDocument/hover 13[0m
17:47:38.072396 [92m                textDocument/hover 13: [93mread-locked[0m[0m
17:47:38.072396 [92m                textDocument/hover 13: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:38.072920 [92m                textDocument/hover 13: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:0 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:10:0[0m
17:47:38.072920 [91mIDE     LS --> Clangd REQU textDocument/hover 14[0m
17:47:38.073453 OUT Elapsed: 533.1µs
17:47:38.077068 IN Elapsed: 1.2204822s
17:47:38.077068 [31mIDE     LS <-- Clangd RESP textDocument/hover 14[0m
17:47:38.077068 [92m                textDocument/hover 13: null response[0m
17:47:38.077068 [92m                textDocument/hover 13: [93mread-unlocked[0m[0m
17:47:38.077068 [32mIDE <-- LS RESP textDocument/hover 13[0m
17:47:38.077068 OUT Elapsed: 0s
17:47:38.345763 IN Elapsed: 268.6942ms
17:47:38.345763 [92mIDE --> LS REQU textDocument/hover 14[0m
17:47:38.345763 [92m                textDocument/hover 14: [93mread-locked[0m[0m
17:47:38.345763 [92m                textDocument/hover 14: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:38.346856 [92m                textDocument/hover 14: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:0 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:10:0[0m
17:47:38.346856 [91mIDE     LS --> Clangd REQU textDocument/hover 15[0m
17:47:38.346856 OUT Elapsed: 0s
17:47:38.349168 IN Elapsed: 272.0991ms
17:47:38.349168 [31mIDE     LS <-- Clangd RESP textDocument/hover 15[0m
17:47:38.349168 [92m                textDocument/hover 14: null response[0m
17:47:38.349168 [92m                textDocument/hover 14: [93mread-unlocked[0m[0m
17:47:38.349168 [32mIDE <-- LS RESP textDocument/hover 14[0m
17:47:38.349168 OUT Elapsed: 0s
17:47:39.006542 IN Elapsed: 657.3746ms
17:47:39.006542 [92mIDE --> LS REQU textDocument/hover 15[0m
17:47:39.006542 [92m                textDocument/hover 15: [93mread-locked[0m[0m
17:47:39.006542 [92m                textDocument/hover 15: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:39.007615 [92m                textDocument/hover 15: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:1 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:12:1[0m
17:47:39.007615 [91mIDE     LS --> Clangd REQU textDocument/hover 16[0m
17:47:39.007615 OUT Elapsed: 0s
17:47:39.009591 IN Elapsed: 660.4237ms
17:47:39.009591 [31mIDE     LS <-- Clangd RESP textDocument/hover 16[0m
17:47:39.009591 [92m                textDocument/hover 15: null response[0m
17:47:39.009591 [92m                textDocument/hover 15: [93mread-unlocked[0m[0m
17:47:39.009591 [32mIDE <-- LS RESP textDocument/hover 15[0m
17:47:39.009591 OUT Elapsed: 0s
17:47:40.529854 IN Elapsed: 1.5202625s
17:47:40.529854 [92mIDE --> LS REQU textDocument/hover 16[0m
17:47:40.529854 [92m                textDocument/hover 16: [93mread-locked[0m[0m
17:47:40.530365 [92m                textDocument/hover 16: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:40.531020 [92m                textDocument/hover 16: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:7 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:15:7[0m
17:47:40.531020 [91mIDE     LS --> Clangd REQU textDocument/hover 17[0m
17:47:40.531020 OUT Elapsed: 0s
17:47:40.532641 IN Elapsed: 1.5230497s
17:47:40.533195 [31mIDE     LS <-- Clangd RESP textDocument/hover 17[0m
17:47:40.533195 [92m                textDocument/hover 16: null response[0m
17:47:40.533195 [92m                textDocument/hover 16: [93mread-unlocked[0m[0m
17:47:40.533195 [32mIDE <-- LS RESP textDocument/hover 16[0m
17:47:40.533195 OUT Elapsed: 0s
17:47:49.313681 IN Elapsed: 8.7804863s
17:47:49.313681 [92mIDE --> LS REQU textDocument/hover 17[0m
17:47:49.313681 [92m                textDocument/hover 17: [93mread-locked[0m[0m
17:47:49.314721 [92m                textDocument/hover 17: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:49.315255 [92m                textDocument/hover 17: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:8 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:15:8[0m
17:47:49.315255 [91mIDE     LS --> Clangd REQU textDocument/hover 18[0m
17:47:49.315255 OUT Elapsed: 0s
17:47:49.319625 IN Elapsed: 8.7869844s
17:47:49.319625 [31mIDE     LS <-- Clangd RESP textDocument/hover 18[0m
17:47:49.319625 [92m                textDocument/hover 17: null response[0m
17:47:49.319625 [92m                textDocument/hover 17: [93mread-unlocked[0m[0m
17:47:49.319625 [32mIDE <-- LS RESP textDocument/hover 17[0m
17:47:49.319625 OUT Elapsed: 0s
17:47:49.559108 IN Elapsed: 239.4824ms
17:47:49.559108 [92mIDE --> LS REQU textDocument/hover 18[0m
17:47:49.559108 [92m                textDocument/hover 18: [93mread-locked[0m[0m
17:47:49.559108 [92m                textDocument/hover 18: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:47:49.559646 [92m                textDocument/hover 18: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:6 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:15:6[0m
17:47:49.560184 [91mIDE     LS --> Clangd REQU textDocument/hover 19[0m
17:47:49.560184 OUT Elapsed: 0s
17:47:49.561810 IN Elapsed: 242.1849ms
17:47:49.561810 [31mIDE     LS <-- Clangd RESP textDocument/hover 19[0m
17:47:49.561810 [92m                textDocument/hover 18: null response[0m
17:47:49.561810 [92m                textDocument/hover 18: [93mread-unlocked[0m[0m
17:47:49.561810 [32mIDE <-- LS RESP textDocument/hover 18[0m
17:47:49.561810 OUT Elapsed: 0s
17:48:08.289334 IN Elapsed: 18.727524s
17:48:08.289377 [92mIDE --> LS REQU textDocument/hover 19[0m
17:48:08.289377 [92m                textDocument/hover 19: [93mread-locked[0m[0m
17:48:08.289377 [92m                textDocument/hover 19: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:48:08.289914 [92m                textDocument/hover 19: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:0 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:10:0[0m
17:48:08.289914 [91mIDE     LS --> Clangd REQU textDocument/hover 20[0m
17:48:08.289914 OUT Elapsed: 0s
17:48:08.293924 IN Elapsed: 18.7321134s
17:48:08.293924 [31mIDE     LS <-- Clangd RESP textDocument/hover 20[0m
17:48:08.293924 [92m                textDocument/hover 19: null response[0m
17:48:08.293924 [92m                textDocument/hover 19: [93mread-unlocked[0m[0m
17:48:08.293924 [32mIDE <-- LS RESP textDocument/hover 19[0m
17:48:08.293924 OUT Elapsed: 0s
17:48:09.297589 IN Elapsed: 1.0036649s
17:48:09.297589 [92mIDE --> LS REQU textDocument/hover 20[0m
17:48:09.298044 [92m                textDocument/hover 20: [93mread-locked[0m[0m
17:48:09.298044 [92m                textDocument/hover 20: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:48:09.299200 [92m                textDocument/hover 20: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:0 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:10:0[0m
17:48:09.299200 [91mIDE     LS --> Clangd REQU textDocument/hover 21[0m
17:48:09.299200 OUT Elapsed: 0s
17:48:09.303061 IN Elapsed: 1.0091376s
17:48:09.303061 [31mIDE     LS <-- Clangd RESP textDocument/hover 21[0m
17:48:09.303061 [92m                textDocument/hover 20: null response[0m
17:48:09.303061 [92m                textDocument/hover 20: [93mread-unlocked[0m[0m
17:48:09.303061 [32mIDE <-- LS RESP textDocument/hover 20[0m
17:48:09.303061 OUT Elapsed: 0s
17:48:11.268995 IN Elapsed: 1.9659338s
17:48:11.268995 [92mIDE --> LS REQU textDocument/codeAction 21[0m
17:48:11.268995 [92m                textDocument/codeAction 21: [93mread-locked[0m[0m
17:48:11.268995 [92m                textDocument/codeAction 21: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:0)[0m
17:48:11.268995 [92m                textDocument/codeAction 21: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:48:11.270080 [92m                textDocument/codeAction 21:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:9:0)[0m
17:48:11.270080 [91mIDE     LS --> Clangd REQU textDocument/codeAction 22[0m
17:48:11.270080 OUT Elapsed: 0s
17:48:11.285435 IN Elapsed: 1.9823741s
17:48:11.285435 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 22[0m
17:48:11.285435 [92m                textDocument/codeAction 21: [93mread-unlocked[0m[0m
17:48:11.285435 [32mIDE <-- LS RESP textDocument/codeAction 21[0m
17:48:11.285435 OUT Elapsed: 0s
17:48:12.871373 IN Elapsed: 1.5859381s
17:48:12.871373 [92mIDE --> LS REQU textDocument/codeAction 22[0m
17:48:12.871373 [92m                textDocument/codeAction 22: [93mread-locked[0m[0m
17:48:12.871373 [92m                textDocument/codeAction 22: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:0)[0m
17:48:12.872325 [92m                textDocument/codeAction 22: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:48:12.872859 [92m                textDocument/codeAction 22:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:9:0)[0m
17:48:12.872859 [91mIDE     LS --> Clangd REQU textDocument/codeAction 23[0m
17:48:12.872859 OUT Elapsed: 0s
17:48:12.873413 IN Elapsed: 1.5879781s
17:48:12.873413 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 23[0m
17:48:12.873413 [92m                textDocument/codeAction 22: [93mread-unlocked[0m[0m
17:48:12.873413 [32mIDE <-- LS RESP textDocument/codeAction 22[0m
17:48:12.873413 OUT Elapsed: 0s
17:48:17.998844 IN Elapsed: 5.125431s
17:48:17.998844 [92mIDE --> LS REQU textDocument/hover 23[0m
17:48:17.998844 [92m                textDocument/hover 23: [93mread-locked[0m[0m
17:48:17.999354 [92m                textDocument/hover 23: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp[0m
17:48:17.999921 [92m                textDocument/hover 23: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:21:12 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:22:12[0m
17:48:17.999921 [91mIDE     LS --> Clangd REQU textDocument/hover 24[0m
17:48:17.999921 OUT Elapsed: 0s
17:48:18.013664 IN Elapsed: 5.1402509s
17:48:18.013664 [31mIDE     LS <-- Clangd RESP textDocument/hover 24[0m
17:48:18.015286 [92m                textDocument/hover 23:     !!! Unresolved .ino path: D:\Arduino_GitHub\Termometer\Termometer.ino.cpp[0m
17:48:18.015286 [92m                textDocument/hover 23:     !!! Known doc paths are:[0m
17:48:18.015286 [92m                textDocument/hover 23:     !!! > D:\Arduino_GitHub\Termometer\Termometer.ino[0m
17:48:18.015286 [92m                textDocument/hover 23: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server126403308/build/sketch/Termometer.ino.cpp:22:9-22:14 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino.cpp:21:9-21:14 (.cpp/.h)[0m
17:48:18.015286 [92m                textDocument/hover 23: error during range conversion: Document is not available: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino.cpp[0m
17:48:18.015286 [91mIDE     LS --> Clangd NOTIF exit[0m
17:48:18.015286 OUT Elapsed: 0s
17:48:18.015286 [92m                textDocument/hover 23: [93mread-unlocked[0m[0m
17:48:18.015286 [32mIDE <-- LS RESP textDocument/hover 23[105;97;5m ERROR: -32603 Document is not available: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino.cpp[0;0;25m[0m
17:48:18.015818 OUT Elapsed: 531.6µs







Started logging.
17:48:18.608166 Language server launched with arguments:
17:48:18.608166   arg[0] = c:\Users\рс\AppData\Local\Programs\Arduino IDE\resources\app\lib\backend\resources\arduino-language-server.exe
17:48:18.608166   arg[1] = -clangd
17:48:18.608166   arg[2] = c:\Users\рс\AppData\Local\Programs\Arduino IDE\resources\app\lib\backend\resources\clangd.exe
17:48:18.608166   arg[3] = -cli-daemon-addr
17:48:18.608166   arg[4] = localhost:56002
17:48:18.608166   arg[5] = -cli-daemon-instance
17:48:18.608166   arg[6] = 1
17:48:18.608166   arg[7] = -fqbn
17:48:18.608166   arg[8] = arduino:avr:leonardo
17:48:18.608166   arg[9] = -skip-libraries-discovery-on-rebuild
17:48:18.608166   arg[10] = -board-name
17:48:18.608166   arg[11] = Arduino Leonardo
17:48:18.608166   arg[12] = -no-real-time-diagnostics
17:48:18.608166   arg[13] = -log
17:48:18.608166   arg[14] = -logpath
17:48:18.608693   arg[15] = d:\Arduino_GitHub\Termometer
17:48:18.608719 logging to d:\Arduino_GitHub\Termometer\inols.log
17:48:18.612990 [97mLS: : Initial board configuration: arduino:avr:leonardo[0m
17:48:18.612990 [97mLS: : arduino-language-server.exe Version: 0.0.0-git Commit:  Date: [0m
17:48:18.612990 [97mLS: : Language server temp directory: C:\Users\рс\AppData\Local\Temp\arduino-language-server2510331829[0m
17:48:18.612990 [97mLS: : Language server build path: C:\Users\рс\AppData\Local\Temp\arduino-language-server2510331829\build[0m
17:48:18.612990 [97mLS: : Language server build sketch root: C:\Users\рс\AppData\Local\Temp\arduino-language-server2510331829\build\sketch[0m
17:48:18.612990 [97mLS: : Language server FULL build path: C:\Users\рс\AppData\Local\Temp\arduino-language-server2510331829\fullbuild[0m
17:48:18.612990 IN Elapsed: 0s
17:48:18.613530 [92mIDE --> LS REQU initialize 0[0m
17:48:18.615155 [92m                initialize 0: [93mwrite-locked[0m[0m
17:48:18.615155 [92m                initialize 0: [93mwrite-unlocked[0m[0m
17:48:18.615705 [96mINIT --- : initializing workbench: file:///d%3A/Arduino_GitHub/Termometer[0m
17:48:18.615705 [96mINIT --- : [93mread-locked[0m[0m
17:48:18.615705 [96mINIT --- : [93mread-unlocked[0m[0m
17:48:18.616272 [92m                initialize 0: initialization parameters: {"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.0.0-git"}}[0m
17:48:18.616272 [32mIDE <-- LS RESP initialize 0[0m
17:48:18.616272 OUT Elapsed: 0s
17:48:18.619015 IN Elapsed: 2.7429ms
17:48:18.619015 [92mIDE --> LS NOTIF initialized[0m
17:48:18.619015 [92m                 initialized: Notification is not propagated to clangd[0m
17:48:18.619015 IN Elapsed: 0s
17:48:18.619015 [92mIDE --> LS NOTIF textDocument/didOpen[0m
17:48:18.619015 [92m                 textDocument/didOpen: [93mwrite-locked[0m[0m
17:48:18.619015 [92m                 textDocument/didOpen: (throttled: waiting for clangd)[0m
17:48:18.619015 [92m                 textDocument/didOpen: [93munlocked (waiting clangd)[0m[0m
17:48:18.627995 [96mINIT --- : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server2510331829\\fullbuild",
  "verbose": true,
  "create_compilation_database_only": true
}[0m
17:48:24.231535 [96mINIT --- : Compile successful![0m
17:48:24.234216 [96mINIT --- : Updated 'libraries.cache'. Copied: C:\Users\рс\AppData\Local\Temp\arduino-language-server2510331829\fullbuild\libraries.cache to C:\Users\рс\AppData\Local\Temp\arduino-language-server2510331829\build\libraries.cache[0m
17:48:24.234216 [96mINIT --- : [93mread-locked[0m[0m
17:48:24.234722 [96mINIT --- : [93mread-unlocked[0m[0m
17:48:24.240744 [96mINIT --- : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server2510331829\\build",
  "verbose": true,
  "create_compilation_database_only": true,
  "skip_libraries_discovery": true
}[0m
17:48:25.435577 [96mINIT --- : Compile successful![0m
17:48:25.455968 [96mINIT --- : Arduino Data Dir -> c:\Users\рс\AppData\Local\Arduino15[0m
17:48:25.458258 [96mINIT --- :     Starting clangd: c:\Users\рс\AppData\Local\Programs\Arduino IDE\resources\app\lib\backend\resources\clangd.exe -log=verbose --pch-storage=memory --compile-commands-dir=C:\Users\рс\AppData\Local\Temp\arduino-language-server2510331829\build -j 1 -query-driver=C:\Users\рс\AppData\Local\Arduino15\packages\**[0m
17:48:25.588548 logging to d:\Arduino_GitHub\Termometer\inols-clangd.log
17:48:25.588703 logging to d:\Arduino_GitHub\Termometer\inols-clangd-err.log
17:48:25.588703 [91mIDE     LS --> Clangd REQU initialize 1[0m
17:48:25.588703 OUT Elapsed: 0s
17:48:25.630979 IN Elapsed: 42.276ms
17:48:25.630979 [31mIDE     LS <-- Clangd RESP initialize 1[0m
17:48:25.631544 [96mINIT --- : clangd successfully started: {"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/","*"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"]},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",")","{","}","\u003c","\u003e",","]},"declarationProvider":{},"definitionProvider":{},"typeDefinitionProvider":{},"implementationProvider":{},"referencesProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentLinkProvider":{},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{"prepareProvider":true},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"selectionRangeProvider":{},"callHierarchyProvider":{},"semanticTokensProvider":{"legend":{"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","interface","enum","enumMember","type","type","unknown","namespace","typeParameter","concept","type","macro","comment"],"tokenModifiers":["declaration","deprecated","deduced","readonly","static","abstract","virtual","dependentName","defaultLibrary","usedAsMutableReference","functionScope","classScope","fileScope","globalScope"]},"range":false,"full":{"delta":true}},"workspaceSymbolProvider":{}},"serverInfo":{"name":"clangd","version":"clangd version 14.0.0 windows x86_64-pc-windows-msvc"}}[0m
17:48:25.631544 [91mIDE     LS --> Clangd NOTIF initialized[0m
17:48:25.631544 OUT Elapsed: 0s
17:48:25.631544 [96mINIT --- : Done initializing workbench[0m
17:48:25.631544 [92m                 textDocument/didOpen: [93mlocked (waiting clangd)[0m[0m
17:48:25.632106 [92m                 textDocument/didOpen: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:25.633739 [92m                 textDocument/didOpen: Increasing .ino tracked files count to 1[0m
17:48:25.633739 [91mIDE     LS --> Clangd NOTIF textDocument/didOpen[0m
17:48:25.633739 OUT Elapsed: 0s
17:48:25.633739 [92m                 textDocument/didOpen: [93mwrite-unlocked[0m[0m
17:48:25.634861 IN Elapsed: 1.1221ms
17:48:25.634907 [92mIDE --> LS REQU textDocument/codeAction 1[0m
17:48:25.634907 [92m                textDocument/codeAction 1: [93mread-locked[0m[0m
17:48:25.634907 [92m                textDocument/codeAction 1: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:0)[0m
17:48:25.635454 [92m                textDocument/codeAction 1: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:25.636565 [92m                textDocument/codeAction 1:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:9:0)[0m
17:48:25.637098 [91mIDE     LS --> Clangd REQU textDocument/codeAction 2[0m
17:48:25.637098 OUT Elapsed: 0s
17:48:25.638674 IN Elapsed: 7.6952ms
17:48:25.638674 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:25.638674 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:25.645135 IN Elapsed: 6.4609ms
17:48:25.645135 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:25.645135 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:25.653036 IN Elapsed: 7.9012ms
17:48:25.653165 [91mIDE     LS <-- Clangd REQU window/workDoneProgress/create 0[0m
17:48:25.653165 [31mIDE     LS --> Clangd RESP window/workDoneProgress/create 0[0m
17:48:25.653165 OUT Elapsed: 0s
17:48:25.653165 [92mIDE <-- LS REQU window/workDoneProgress/create 1[0m
17:48:25.653165 OUT Elapsed: 0s
17:48:25.653165 IN Elapsed: 0s
17:48:25.653165 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:48:25.653719 [91m                            $/progress: backgroundIndexProgress BEGIN indexing, 0.0%[0m
17:48:25.653719 IN Elapsed: 0s
17:48:25.653719 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:48:25.653719 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
17:48:25.656424 IN Elapsed: 2.7053ms
17:48:25.656967 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:48:25.656967 [91m                            $/progress: backgroundIndexProgress REPORT, 0/2, 0.0%[0m
17:48:25.656967 IN Elapsed: 0s
17:48:25.656967 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:48:25.656967 [91m                            $/progress: backgroundIndexProgress REPORT, 1/2, 50.0%[0m
17:48:25.656967 IN Elapsed: 0s
17:48:25.656967 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:48:25.656967 [91m                            $/progress: backgroundIndexProgress REPORT, 1/2, 50.0%[0m
17:48:25.888007 IN Elapsed: 231.0399ms
17:48:25.888007 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:25.888007 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:25.888570 IN Elapsed: 562.5µs
17:48:25.888570 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 2[0m
17:48:25.888570 [92m                textDocument/codeAction 1: [93mread-unlocked[0m[0m
17:48:25.888570 [32mIDE <-- LS RESP textDocument/codeAction 1[0m
17:48:25.888570 OUT Elapsed: 0s
17:48:25.888570 IN Elapsed: 0s
17:48:25.888570 [92mIDE --> LS REQU textDocument/hover 2[0m
17:48:25.888570 [92m                textDocument/hover 2: [93mread-locked[0m[0m
17:48:25.889156 [92m                textDocument/hover 2: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:25.890772 [92m                textDocument/hover 2: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:23:18 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:30:18[0m
17:48:25.890796 [91mIDE     LS --> Clangd REQU textDocument/hover 3[0m
17:48:25.890796 OUT Elapsed: 0s
17:48:25.893481 IN Elapsed: 4.9113ms
17:48:25.893481 [31mIDE     LS <-- Clangd RESP textDocument/hover 3[0m
17:48:25.895068 [92m                textDocument/hover 2: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:30:15-30:27 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:23:15-23:27 (.ino)[0m
17:48:25.895102 [92m                textDocument/hover 2: Hover content: "### variable `temperatureC`  \n\n---\nType: `float`  \n\n---\n```cpp\n// In loop\nfloat temperatureC = sensors.getTempCByIndex(0)\n```"[0m
17:48:25.895102 [92m                textDocument/hover 2: [93mread-unlocked[0m[0m
17:48:25.895102 [32mIDE <-- LS RESP textDocument/hover 2[0m
17:48:25.895102 OUT Elapsed: 0s
17:48:25.895102 IN Elapsed: 0s
17:48:25.895102 IN Elapsed: 0s
17:48:25.895102 [92mIDE --> LS REQU textDocument/hover 3[0m
17:48:25.895625 [92m                textDocument/hover 3: [93mread-locked[0m[0m
17:48:25.896409 [92m                textDocument/hover 3: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:25.898751 [92m                textDocument/hover 3: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:23:29 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:30:29[0m
17:48:25.898751 [91mIDE     LS --> Clangd REQU textDocument/hover 4[0m
17:48:25.899259 OUT Elapsed: 507.8µs
17:48:25.901621 IN Elapsed: 8.1402ms
17:48:25.901621 [31mIDE     LS <-- Clangd RESP textDocument/hover 4[0m
17:48:25.901621 [92m                textDocument/hover 3: null response[0m
17:48:25.901621 [92m                textDocument/hover 3: [93mread-unlocked[0m[0m
17:48:25.901621 [32mIDE <-- LS RESP textDocument/hover 3[0m
17:48:25.901621 OUT Elapsed: 0s
17:48:25.901621 IN Elapsed: 0s
17:48:25.901621 IN Elapsed: 0s
17:48:25.901621 [92mIDE --> LS REQU textDocument/hover 4[0m
17:48:25.901621 [92m                textDocument/hover 4: [93mread-locked[0m[0m
17:48:25.902265 [92m                textDocument/hover 4: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:25.903432 [92m                textDocument/hover 4: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:23:27 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:30:27[0m
17:48:25.903432 [91mIDE     LS --> Clangd REQU textDocument/hover 5[0m
17:48:25.903432 OUT Elapsed: 0s
17:48:25.905565 IN Elapsed: 3.9432ms
17:48:25.906106 [31mIDE     LS <-- Clangd RESP textDocument/hover 5[0m
17:48:25.906106 [92m                textDocument/hover 4: null response[0m
17:48:25.906106 [92m                textDocument/hover 4: [93mread-unlocked[0m[0m
17:48:25.906106 [32mIDE <-- LS RESP textDocument/hover 4[0m
17:48:25.906106 OUT Elapsed: 0s
17:48:25.906106 IN Elapsed: 0s
17:48:25.906106 [32mIDE --> LS RESP window/workDoneProgress/create 1[0m
17:48:25.906106 [92mIDE <-- LS NOTIF $/progress[0m
17:48:25.906106 OUT Elapsed: 0s
17:48:25.906106 [92mIDE <-- LS NOTIF $/progress[0m
17:48:25.906106 OUT Elapsed: 0s
17:48:26.166429 IN Elapsed: 260.3544ms
17:48:26.166429 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:48:26.166429 [91m                            $/progress: backgroundIndexProgress END [0m
17:48:26.166429 [92mIDE <-- LS NOTIF $/progress[0m
17:48:26.166429 OUT Elapsed: 0s
17:48:26.301849 IN Elapsed: 395.743ms
17:48:26.301849 [92mIDE --> LS REQU textDocument/hover 5[0m
17:48:26.301849 [92m                textDocument/hover 5: [93mread-locked[0m[0m
17:48:26.301849 [92m                textDocument/hover 5: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:26.303444 [92m                textDocument/hover 5: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:23:23 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:30:23[0m
17:48:26.303444 [91mIDE     LS --> Clangd REQU textDocument/hover 6[0m
17:48:26.303444 OUT Elapsed: 0s
17:48:26.306124 IN Elapsed: 139.6945ms
17:48:26.306124 [31mIDE     LS <-- Clangd RESP textDocument/hover 6[0m
17:48:26.307202 [92m                textDocument/hover 5: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:30:15-30:27 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:23:15-23:27 (.ino)[0m
17:48:26.307202 [92m                textDocument/hover 5: Hover content: "### variable `temperatureC`  \n\n---\nType: `float`  \n\n---\n```cpp\n// In loop\nfloat temperatureC = sensors.getTempCByIndex(0)\n```"[0m
17:48:26.307202 [92m                textDocument/hover 5: [93mread-unlocked[0m[0m
17:48:26.307202 [32mIDE <-- LS RESP textDocument/hover 5[0m
17:48:26.307735 OUT Elapsed: 533.3µs
17:48:28.068911 IN Elapsed: 1.761176s
17:48:28.068911 [92mIDE --> LS REQU textDocument/hover 6[0m
17:48:28.068911 [92m                textDocument/hover 6: [93mread-locked[0m[0m
17:48:28.068911 [92m                textDocument/hover 6: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:28.070535 [92m                textDocument/hover 6: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:21 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:21[0m
17:48:28.070535 [91mIDE     LS --> Clangd REQU textDocument/hover 7[0m
17:48:28.070535 OUT Elapsed: 0s
17:48:28.072611 IN Elapsed: 1.7664873s
17:48:28.072611 [31mIDE     LS <-- Clangd RESP textDocument/hover 7[0m
17:48:28.072611 [92m                textDocument/hover 6: null response[0m
17:48:28.072611 [92m                textDocument/hover 6: [93mread-unlocked[0m[0m
17:48:28.072611 [32mIDE <-- LS RESP textDocument/hover 6[0m
17:48:28.072611 OUT Elapsed: 0s
17:48:28.432723 IN Elapsed: 360.1118ms
17:48:28.432853 [92mIDE --> LS REQU textDocument/hover 7[0m
17:48:28.432853 [92m                textDocument/hover 7: [93mread-locked[0m[0m
17:48:28.432853 [92m                textDocument/hover 7: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:28.434445 [92m                textDocument/hover 7: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:22 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:22[0m
17:48:28.434445 [91mIDE     LS --> Clangd REQU textDocument/hover 8[0m
17:48:28.434445 OUT Elapsed: 0s
17:48:28.436575 IN Elapsed: 363.9645ms
17:48:28.436575 [31mIDE     LS <-- Clangd RESP textDocument/hover 8[0m
17:48:28.436575 [92m                textDocument/hover 7: null response[0m
17:48:28.436575 [92m                textDocument/hover 7: [93mread-unlocked[0m[0m
17:48:28.436575 [32mIDE <-- LS RESP textDocument/hover 7[0m
17:48:28.436575 OUT Elapsed: 0s
17:48:30.417071 IN Elapsed: 1.9804956s
17:48:30.417380 [92mIDE --> LS REQU textDocument/hover 8[0m
17:48:30.417380 [92m                textDocument/hover 8: [93mread-locked[0m[0m
17:48:30.417484 [92m                textDocument/hover 8: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:30.418549 [92m                textDocument/hover 8: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:22 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:22[0m
17:48:30.418549 [91mIDE     LS --> Clangd REQU textDocument/hover 9[0m
17:48:30.419059 OUT Elapsed: 509.7µs
17:48:30.421167 IN Elapsed: 1.9845911s
17:48:30.421167 [31mIDE     LS <-- Clangd RESP textDocument/hover 9[0m
17:48:30.421167 [92m                textDocument/hover 8: null response[0m
17:48:30.421167 [92m                textDocument/hover 8: [93mread-unlocked[0m[0m
17:48:30.421167 [32mIDE <-- LS RESP textDocument/hover 8[0m
17:48:30.421167 OUT Elapsed: 0s
17:48:43.410317 IN Elapsed: 12.9891509s
17:48:43.410455 [92mIDE --> LS REQU textDocument/documentSymbol 9[0m
17:48:43.410455 [92m                textDocument/documentSymbol 9: [93mread-locked[0m[0m
17:48:43.410455 [92m                textDocument/documentSymbol 9: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:43.410455 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 10[0m
17:48:43.410996 OUT Elapsed: 540.4µs
17:48:43.417860 IN Elapsed: 12.9966931s
17:48:43.417860 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 10[0m
17:48:43.417860 [92m                textDocument/documentSymbol 9: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (6 document symbols)[0m
17:48:43.417860 [92m                textDocument/documentSymbol 9:   > convert SymbolKind:Variable 13:0-13:29[0m
17:48:43.419524 [92m                textDocument/documentSymbol 9: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:13:0-13:29 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:0-11:29 (.ino)[0m
17:48:43.420598 [92m                textDocument/documentSymbol 9: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:13:8-13:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:8-11:15 (.ino)[0m
17:48:43.420598 [92m                textDocument/documentSymbol 9: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:43.420598 [92m                textDocument/documentSymbol 9:   > convert SymbolKind:Variable 14:0-14:35[0m
17:48:43.421145 [92m                textDocument/documentSymbol 9: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:14:0-14:35 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:12:0-12:35 (.ino)[0m
17:48:43.422217 [92m                textDocument/documentSymbol 9: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:14:18-14:25 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:12:18-12:25 (.ino)[0m
17:48:43.422217 [92m                textDocument/documentSymbol 9: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:43.422217 [92m                textDocument/documentSymbol 9:   > convert SymbolKind:Function 17:0-17:12[0m
17:48:43.423318 [92m                textDocument/documentSymbol 9: Range is in PREPROCESSED section of the sketch[0m
17:48:43.423318 [92m                textDocument/documentSymbol 9: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:17:0-17:12 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:0-14:12 (.ino)[0m
17:48:43.423318 [92m                textDocument/documentSymbol 9:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:43.423318 [92m                textDocument/documentSymbol 9:   > convert SymbolKind:Function 19:0-19:11[0m
17:48:43.424402 [92m                textDocument/documentSymbol 9: Range is in PREPROCESSED section of the sketch[0m
17:48:43.424940 [92m                textDocument/documentSymbol 9: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:19:0-19:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:0-19:11 (.ino)[0m
17:48:43.424940 [92m                textDocument/documentSymbol 9:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:43.424940 [92m                textDocument/documentSymbol 9:   > convert SymbolKind:Function 21:0-24:1[0m
17:48:43.425474 [92m                textDocument/documentSymbol 9: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:21:0-24:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:0-17:1 (.ino)[0m
17:48:43.426543 [92m                textDocument/documentSymbol 9: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:21:5-21:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:5-14:10 (.ino)[0m
17:48:43.426543 [92m                textDocument/documentSymbol 9: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:43.426543 [92m                textDocument/documentSymbol 9:   > convert SymbolKind:Function 26:0-33:1[0m
17:48:43.427069 [92m                textDocument/documentSymbol 9: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:26:0-33:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:0-26:1 (.ino)[0m
17:48:43.428131 [92m                textDocument/documentSymbol 9: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:26:5-26:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:5-19:9 (.ino)[0m
17:48:43.428131 [92m                textDocument/documentSymbol 9: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:43.428131 [92m                textDocument/documentSymbol 9: [93mread-unlocked[0m[0m
17:48:43.428131 [32mIDE <-- LS RESP textDocument/documentSymbol 9[0m
17:48:43.428131 OUT Elapsed: 0s
17:48:43.428131 IN Elapsed: 0s
17:48:43.428131 [92mIDE --> LS REQU textDocument/documentSymbol 10[0m
17:48:43.428131 [92m                textDocument/documentSymbol 10: [93mread-locked[0m[0m
17:48:43.428720 [92m                textDocument/documentSymbol 10: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:43.428720 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 11[0m
17:48:43.428720 OUT Elapsed: 0s
17:48:43.429265 IN Elapsed: 11.4053ms
17:48:43.429265 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 11[0m
17:48:43.429799 [92m                textDocument/documentSymbol 10: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (6 document symbols)[0m
17:48:43.429799 [92m                textDocument/documentSymbol 10:   > convert SymbolKind:Variable 13:0-13:29[0m
17:48:43.431221 [92m                textDocument/documentSymbol 10: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:13:0-13:29 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:0-11:29 (.ino)[0m
17:48:43.432337 [92m                textDocument/documentSymbol 10: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:13:8-13:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:8-11:15 (.ino)[0m
17:48:43.432337 [92m                textDocument/documentSymbol 10: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:43.432337 [92m                textDocument/documentSymbol 10:   > convert SymbolKind:Variable 14:0-14:35[0m
17:48:43.433437 [92m                textDocument/documentSymbol 10: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:14:0-14:35 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:12:0-12:35 (.ino)[0m
17:48:43.434624 [92m                textDocument/documentSymbol 10: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:14:18-14:25 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:12:18-12:25 (.ino)[0m
17:48:43.435169 [92m                textDocument/documentSymbol 10: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:43.435169 [92m                textDocument/documentSymbol 10:   > convert SymbolKind:Function 17:0-17:12[0m
17:48:43.436253 [92m                textDocument/documentSymbol 10: Range is in PREPROCESSED section of the sketch[0m
17:48:43.436253 [92m                textDocument/documentSymbol 10: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:17:0-17:12 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:0-14:12 (.ino)[0m
17:48:43.436253 [92m                textDocument/documentSymbol 10:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:43.436253 [92m                textDocument/documentSymbol 10:   > convert SymbolKind:Function 19:0-19:11[0m
17:48:43.437320 [92m                textDocument/documentSymbol 10: Range is in PREPROCESSED section of the sketch[0m
17:48:43.437849 [92m                textDocument/documentSymbol 10: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:19:0-19:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:0-19:11 (.ino)[0m
17:48:43.437849 [92m                textDocument/documentSymbol 10:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:43.437849 [92m                textDocument/documentSymbol 10:   > convert SymbolKind:Function 21:0-24:1[0m
17:48:43.438918 [92m                textDocument/documentSymbol 10: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:21:0-24:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:0-17:1 (.ino)[0m
17:48:43.439990 [92m                textDocument/documentSymbol 10: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:21:5-21:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:5-14:10 (.ino)[0m
17:48:43.439990 [92m                textDocument/documentSymbol 10: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:43.439990 [92m                textDocument/documentSymbol 10:   > convert SymbolKind:Function 26:0-33:1[0m
17:48:43.440525 [92m                textDocument/documentSymbol 10: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:26:0-33:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:0-26:1 (.ino)[0m
17:48:43.441586 [92m                textDocument/documentSymbol 10: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:26:5-26:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:5-19:9 (.ino)[0m
17:48:43.441586 [92m                textDocument/documentSymbol 10: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:43.441586 [92m                textDocument/documentSymbol 10: [93mread-unlocked[0m[0m
17:48:43.441586 [32mIDE <-- LS RESP textDocument/documentSymbol 10[0m
17:48:43.441586 OUT Elapsed: 0s
17:48:43.441586 IN Elapsed: 0s
17:48:43.559386 IN Elapsed: 117.8001ms
17:48:43.559898 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:48:43.559930 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:48:43.559930 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@2)[0m
17:48:43.559930 [92m                 textDocument/didChange:   > 9:0-27:0 (len=373) -> "#include \"OneWire.h\"\r\n \r\n// OneWire DS18S20, DS18B20, DS1822 Temperature Example\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// The DallasTemperature library can do all this work for you!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\nТеги:\r\n\r\n    Arduino Термометр"[0m
17:48:43.560475 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

#include "OneWire.h"
 
// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
Теги:

    Arduino Термометр

-----------------------------[0m
17:48:43.560475 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:43.562083 Ino Range: 9:0-27:0 -> Cpp Range:11:0-34:0
17:48:43.562083   > Current sketchmapper content:
17:48:43.562083   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:48:43.562083   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:48:43.562083   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:48:43.562083   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:48:43.562083   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:48:43.562083   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:48:43.562083   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:48:43.562083   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:48:43.562083   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:48:43.562083   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:48:43.562083  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:48:43.562083  11: #include "OneWire.h"                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:48:43.562083  12:                                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:48:43.562083  13: // OneWire DS18S20, DS18B20, DS1822 Temperature Example     | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:48:43.562083  14: //                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:48:43.562083  15: // http://www.pjrc.com/teensy/td_libs_OneWire.html          | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:48:43.562083  16: //                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:48:43.562083  17: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:14 D:\Arduino_GitHub\Termometer\Termometer.ino:9
17:48:43.562083  18: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:48:43.562083  19:                                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:14 D:\Arduino_GitHub\Termometer\Termometer.ino:14
17:48:43.562083  20: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:48:43.562083  21:                                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:48:43.562083  22: void setup(void) {                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:48:43.562083  23:   Serial.begin(9600);                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:48:43.562083  24: }                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:48:43.562083  25:                                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:48:43.562083  26: void loop(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:48:43.562083  27:   byte i;                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:48:43.562083  28:   byte present = 0;                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:48:43.562083  29:   byte type_s;                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:48:43.562083  30:   byte data[12];                                            | :0                                                 
17:48:43.562083  31:   byte addr[8];                                             | :0                                                 
17:48:43.562593  32:   float celsius, fahrenheit;                                | :0                                                 
17:48:43.562593  33:                                                             | :0                                                 
17:48:43.562622  34:   if ( !ds.search(addr)) {                                  | :0                                                 
17:48:43.562622  35:     Serial.println("No more addresses.");                   | :0                                                 
17:48:43.562622  36:     Serial.println();                                       | :0                                                 
17:48:43.562622  37:     ds.reset_search();                                      | :0                                                 
17:48:43.562622  38:     delay(250);                                             | :0                                                 
17:48:43.562622  39:     return;                                                 | :0                                                 
17:48:43.562622  40:   }                                                         | :0                                                 
17:48:43.562622  41:                                                             | :0                                                 
17:48:43.562622  42:   Serial.print("ROM =");                                    | :0                                                 
17:48:43.562622  43:   for( i = 0; i < 8; i++) {                                 | :0                                                 
17:48:43.562622  44:     Serial.write(' ');                                      | :0                                                 
17:48:43.562622  45:     Serial.print(addr[i], HEX);                             | :0                                                 
17:48:43.562622  46:   }                                                         | :0                                                 
17:48:43.562622  47:                                                             | :0                                                 
17:48:43.562622  48:   if (OneWire::crc8(addr, 7) != addr[7]) {                  | :0                                                 
17:48:43.562622  49:       Serial.println("CRC is not valid!");                  | :0                                                 
17:48:43.562622  50:       return;                                               | :0                                                 
17:48:43.562622  51:   }                                                         | :0                                                 
17:48:43.562622  52:   Serial.println();                                         | :0                                                 
17:48:43.562622  53:                                                             | :0                                                 
17:48:43.562622  54:   // the first ROM byte indicates which chip                | :0                                                 
17:48:43.562622  55:   switch (addr[0]) {                                        | :0                                                 
17:48:43.562622  56:     case 0x10:                                              | :0                                                 
17:48:43.562622  57:       Serial.println("  Chip = DS18S20");  // or old DS1820 | :0                                                 
17:48:43.562622  58:       type_s = 1;                                           | :0                                                 
17:48:43.562622  59:       break;                                                | :0                                                 
17:48:43.563208  60:     case 0x28:                                              | :0                                                 
17:48:43.563208  61:       Serial.println("  Chip = DS18B20");                   | :0                                                 
17:48:43.563208  62:       type_s = 0;                                           | :0                                                 
17:48:43.563208  63:       break;                                                | :0                                                 
17:48:43.563208  64:     case 0x22:                                              | :0                                                 
17:48:43.563208  65:       Serial.println("  Chip = DS1822");                    | :0                                                 
17:48:43.563208  66:       type_s = 0;                                           | :0                                                 
17:48:43.563208  67:       break;                                                | :0                                                 
17:48:43.563208  68:     default:                                                | :0                                                 
17:48:43.563208  69:       Serial.println("Device is not a DS18x20 family device. | :0                                                 
17:48:43.563208  70:       return;                                               | :0                                                 
17:48:43.563208  71:   }                                                         | :0                                                 
17:48:43.563208  72:                                                             | :0                                                 
17:48:43.563208  73:   ds.reset();                                               | :0                                                 
17:48:43.563208  74:   ds.select(addr);                                          | :0                                                 
17:48:43.563208  75:   ds.write(0x44, 1);        // start conversion, with parasi | :0                                                 
17:48:43.563208  76:                                                             | :0                                                 
17:48:43.563208  77:   delay(1000);     // maybe 750ms is enough, maybe not      | :0                                                 
17:48:43.563208  78:   // we might do a ds.depower() here, but the reset will tak | :0                                                 
17:48:43.563208  79:                                                             | :0                                                 
17:48:43.563747  80:   present = ds.reset();                                     | :0                                                 
17:48:43.563747  81:   ds.select(addr);                                          | :0                                                 
17:48:43.563747  82:   ds.write(0xBE);         // Read Scratchpad                | :0                                                 
17:48:43.563747  83:                                                             | :0                                                 
17:48:43.563747  84:   Serial.print("  Data = ");                                | :0                                                 
17:48:43.563747  85:   Serial.print(present, HEX);                               | :0                                                 
17:48:43.563747  86:   Serial.print(" ");                                        | :0                                                 
17:48:43.563747  87:   for ( i = 0; i < 9; i++) {           // we need 9 bytes   | :0                                                 
17:48:43.563747  88:     data[i] = ds.read();                                    | :0                                                 
17:48:43.563747  89:     Serial.print(data[i], HEX);                             | :0                                                 
17:48:43.563747  90:     Serial.print(" ");                                      | :0                                                 
17:48:43.563747  91:   }                                                         | :0                                                 
17:48:43.563747  92:   Serial.print(" CRC=");                                    | :0                                                 
17:48:43.563747  93:   Serial.print(OneWire::crc8(data, 8), HEX);                | :0                                                 
17:48:43.563747  94:   Serial.println();                                         | :0                                                 
17:48:43.563747  95:                                                             | :0                                                 
17:48:43.563747  96:   // Convert the data to actual temperature                 | :0                                                 
17:48:43.563747  97:   // because the result is a 16 bit signed integer, it shoul | :0                                                 
17:48:43.563747  98:   // be stored to an "int16_t" type, which is always 16 bits | :0                                                 
17:48:43.563747  99:   // even when compiled on a 32 bit processor.              | :0                                                 
17:48:43.564262 100:   int16_t raw = (data[1] << 8) | data[0];                   | :0                                                 
17:48:43.564300 101:   if (type_s) {                                             | :0                                                 
17:48:43.564328 102:     raw = raw << 3; // 9 bit resolution default             | :0                                                 
17:48:43.564328 103:     if (data[7] == 0x10) {                                  | :0                                                 
17:48:43.564328 104:       // "count remain" gives full 12 bit resolution        | :0                                                 
17:48:43.564328 105:       raw = (raw & 0xFFF0) + 12 - data[6];                  | :0                                                 
17:48:43.564328 106:     }                                                       | :0                                                 
17:48:43.564328 107:   } else {                                                  | :0                                                 
17:48:43.564328 108:     byte cfg = (data[4] & 0x60);                            | :0                                                 
17:48:43.564328 109:     // at lower res, the low bits are undefined, so let's ze | :0                                                 
17:48:43.564328 110:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | :0                                                 
17:48:43.564328 111:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | :0                                                 
17:48:43.564328 112:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | :0                                                 
17:48:43.564328 113:     //// default is 12 bit resolution, 750 ms conversion tim | :0                                                 
17:48:43.564328 114:   }                                                         | :0                                                 
17:48:43.564328 115:   celsius = (float)raw / 16.0;                              | :0                                                 
17:48:43.564328 116:   fahrenheit = celsius * 1.8 + 32.0;                        | :0                                                 
17:48:43.564328 117:   Serial.print("  Temperature = ");                         | :0                                                 
17:48:43.564328 118:   Serial.print(celsius);                                    | :0                                                 
17:48:43.564328 119:   Serial.print(" Celsius, ");                               | :0                                                 
17:48:43.564328 120:   Serial.print(fahrenheit);                                 | :0                                                 
17:48:43.564328 121:   Serial.println(" Fahrenheit");                            | :0                                                 
17:48:43.564328 122: }                                                           | :0                                                 
17:48:43.564328 123: Теги:                                                       | :0                                                 
17:48:43.564328 124:                                                             | :0                                                 
17:48:43.564328 125:     Arduino Термометр                                        | :0                                                 
17:48:43.564328 126:                                                              | :0                                                 
17:48:43.564328 127:                                                              | :0                                                 
17:48:43.564328 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@2)[0m
17:48:43.564328 [92m                 textDocument/didChange:             > 11:0-34:0 -> "#include \"OneWire.h\"\r\n \r\n// OneWire DS18S20, DS18B20, DS1822 Temperature Example\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// The DallasTemperature library can do all this work for you!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\nТеги:\r\n\r\n    Arduino Термометр"[0m
17:48:43.564874 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:48:43.564874 OUT Elapsed: 0s
17:48:43.564874 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:48:43.740525 IN Elapsed: 175.6514ms
17:48:43.740525 [92mIDE --> LS REQU textDocument/codeAction 11[0m
17:48:43.740525 [92m                textDocument/codeAction 11: [93mread-locked[0m[0m
17:48:43.740525 [92m                textDocument/codeAction 11: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:21)[0m
17:48:43.741065 [92m                textDocument/codeAction 11: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:43.742146 [92m                textDocument/codeAction 11: Error: invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:21-123:21: could not be mapped to Arduino-preprocessed sketck.ino.cpp[0m
17:48:43.742146 [92m                textDocument/codeAction 11: [93mread-unlocked[0m[0m
17:48:43.742146 [32mIDE <-- LS RESP textDocument/codeAction 11[105;97;5m ERROR: -32603 invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:21-123:21: could not be mapped to Arduino-preprocessed sketck.ino.cpp[0;0;25m[0m
17:48:43.742146 OUT Elapsed: 0s
17:48:43.925746 IN Elapsed: 496.4813ms
17:48:43.925746 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:43.926276 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:44.428453 IN Elapsed: 686.3071ms
17:48:44.428453 [92mIDE --> LS NOTIF textDocument/didSave[0m
17:48:44.429059 [92m                 textDocument/didSave: [93mwrite-locked[0m[0m
17:48:44.429059 [92m                 textDocument/didSave: notification is not forwarded to clang[0m
17:48:44.429059 [92m                 textDocument/didSave: [93mwrite-unlocked[0m[0m
17:48:45.440098 [92mIDE <-- LS REQU window/workDoneProgress/create 2[0m
17:48:45.440098 [95mSKETCH REBUILD: : Sketch rebuild started[0m
17:48:45.440098 OUT Elapsed: 0s
17:48:45.440098 [95mSKETCH REBUILD: : [93mread-locked[0m[0m
17:48:45.440098 [95mSKETCH REBUILD: : [93mread-unlocked[0m[0m
17:48:45.440098 IN Elapsed: 1.0110391s
17:48:45.440629 [32mIDE --> LS RESP window/workDoneProgress/create 2[0m
17:48:45.440629 [92mIDE <-- LS NOTIF $/progress[0m
17:48:45.440629 OUT Elapsed: 0s
17:48:45.446533 [95mSKETCH REBUILD: : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server2510331829\\build",
  "verbose": true,
  "create_compilation_database_only": true,
  "source_override": {
    "Termometer.ino": "/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include \u003cOneWire.h\u003e\r\n#include \u003cDallasTemperature.h\u003e\r\n\r\n#include \"OneWire.h\"\r\n \r\n// OneWire DS18S20, DS18B20, DS1822 Temperature Example\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// The DallasTemperature library can do all this work for you!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i \u003c 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i \u003c 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] \u003c\u003c 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw \u003c\u003c 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw \u0026 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] \u0026 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw \u0026 ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw \u0026 ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw \u0026 ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\nТеги:\r\n\r\n    Arduino Термометр\r\n"
  },
  "skip_libraries_discovery": true
}[0m
17:48:46.377472 IN Elapsed: 936.8431ms
17:48:46.377472 [92mIDE --> LS REQU textDocument/documentHighlight 12[0m
17:48:46.377472 [92m                textDocument/documentHighlight 12: [93mread-locked[0m[0m
17:48:46.378032 [92m                textDocument/documentHighlight 12: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:46.381096 [92m                textDocument/documentHighlight 12: Error converting position file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:20: invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:20-123:20: could not be mapped to Arduino-preprocessed sketck.ino.cpp[0m
17:48:46.381096 [92m                textDocument/documentHighlight 12: ERROR: invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:20-123:20: could not be mapped to Arduino-preprocessed sketck.ino.cpp[0m
17:48:46.381096 [92m                textDocument/documentHighlight 12: [93mread-unlocked[0m[0m
17:48:46.381096 [32mIDE <-- LS RESP textDocument/documentHighlight 12[105;97;5m ERROR: -32603 invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:20-123:20: could not be mapped to Arduino-preprocessed sketck.ino.cpp[0;0;25m[0m
17:48:46.381096 OUT Elapsed: 0s
17:48:46.963032 IN Elapsed: 581.9357ms
17:48:46.963032 [92mIDE --> LS REQU textDocument/codeAction 13[0m
17:48:46.963571 [92m                textDocument/codeAction 13: [93mread-locked[0m[0m
17:48:46.963571 [92m                textDocument/codeAction 13: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:3)[0m
17:48:46.963571 [92m                textDocument/codeAction 13: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:46.965997 [92m                textDocument/codeAction 13: Error: invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:3-123:21: could not be mapped to Arduino-preprocessed sketck.ino.cpp[0m
17:48:46.965997 [92m                textDocument/codeAction 13: [93mread-unlocked[0m[0m
17:48:46.965997 [32mIDE <-- LS RESP textDocument/codeAction 13[105;97;5m ERROR: -32603 invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:3-123:21: could not be mapped to Arduino-preprocessed sketck.ino.cpp[0;0;25m[0m
17:48:46.965997 OUT Elapsed: 0s
17:48:47.266861 [95mSKETCH REBUILD: : Compile successful![0m
17:48:47.277006 IN Elapsed: 311.0089ms
17:48:47.277006 [92mIDE --> LS REQU textDocument/hover 14[0m
17:48:47.277006 [92m                textDocument/hover 14: [93mread-locked[0m[0m
17:48:47.277559 [92m                textDocument/hover 14: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:47.279383 [92m                textDocument/hover 14: Error converting position file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:2: invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:2-123:2: could not be mapped to Arduino-preprocessed sketck.ino.cpp[0m
17:48:47.280143 [92m                textDocument/hover 14: Error: invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:2-123:2: could not be mapped to Arduino-preprocessed sketck.ino.cpp[0m
17:48:47.280143 [92m                textDocument/hover 14: [93mread-unlocked[0m[0m
17:48:47.280143 [32mIDE <-- LS RESP textDocument/hover 14[105;97;5m ERROR: -32603 invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:2-123:2: could not be mapped to Arduino-preprocessed sketck.ino.cpp[0;0;25m[0m
17:48:47.280143 OUT Elapsed: 0s
17:48:47.286170 [95mSKETCH REBUILD: : [93mwrite-locked[0m[0m
17:48:47.287825   > Current sketchmapper content:
17:48:47.287825   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:48:47.287825   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:48:47.287825   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:48:47.287825   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:48:47.287825   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:48:47.287825   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:48:47.287825   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:48:47.287825   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:48:47.287825   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:48:47.287825   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:48:47.287825  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:48:47.287825  11: #include "OneWire.h"                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:48:47.287825  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:48:47.287825  13: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:48:47.287825  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:48:47.287825  15: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:48:47.287825  16: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:48:47.287825  17: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:48:47.287825  18: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:48:47.287825  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:48:47.287825  20: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:48:47.287825  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:48:47.287825  22: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:47.288335  23: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20 D:\Arduino_GitHub\Termometer\Termometer.ino:20
17:48:47.288351  24: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:47.288367  25: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24 D:\Arduino_GitHub\Termometer\Termometer.ino:24
17:48:47.288367  26: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:47.288367  27: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:48:47.288367  28:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:48:47.288367  29: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:48:47.288367  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:48:47.288367  31: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:48:47.288367  32:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:48:47.288367  33:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:48:47.288367  34:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:48:47.288367  35:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:48:47.288367  36:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:48:47.288367  37:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:48:47.288367  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:48:47.288367  39:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:48:47.288875  40:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:48:47.288889  41:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:48:47.288889  42:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:48:47.288918  43:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:48:47.288918  44:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:48:47.288918  45:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:48:47.288918  46:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:48:47.288918  47:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:48:47.288918  48:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:48:47.288918  49:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:48:47.288918  50:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:48:47.288918  51:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:48:47.288918  52:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:48:47.288918  53:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:48:47.288918  54:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:48:47.288918  55:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:48:47.288918  56:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:48:47.288918  57:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:48:47.288918  58:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:48:47.288918  59:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:48:47.288918  60:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:48:47.288918  61:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:48:47.288918  62:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:48:47.288918  63:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:48:47.288918  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:48:47.288918  65:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:48:47.288918  66:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:48:47.288918  67:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:48:47.288918  68:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:48:47.288918  69:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:48:47.288918  70:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:48:47.288918  71:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:48:47.288918  72:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:48:47.288918  73:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:48:47.288918  74:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:48:47.288918  75:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:48:47.288918  76:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:48:47.288918  77:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:48:47.288918  78:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:48:47.288918  79:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:48:47.288918  80:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:48:47.288918  81:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:48:47.288918  82:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:48:47.288918  83:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:48:47.288918  84:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:48:47.288918  85:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:48:47.288918  86:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:48:47.288918  87:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:48:47.288918  88:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:48:47.288918  89:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:48:47.288918  90:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:48:47.288918  91:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:48:47.288918  92:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:48:47.288918  93:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:48:47.288918  94:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:48:47.288918  95:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:48:47.288918  96:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:48:47.288918  97:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:48:47.288918  98:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:48:47.288918  99:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:48:47.288918 100:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:48:47.288918 101:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:48:47.288918 102:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:48:47.288918 103:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:48:47.288918 104:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:48:47.288918 105:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:48:47.288918 106:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:48:47.288918 107:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:48:47.288918 108:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:48:47.288918 109:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:48:47.289423 110:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:48:47.289433 111:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:48:47.289443 112:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:48:47.289443 113:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:48:47.289443 114:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:48:47.289443 115:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:48:47.289443 116:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:48:47.289443 117:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:48:47.289443 118:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:48:47.289443 119:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:48:47.289443 120:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:48:47.289443 121:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:48:47.289443 122:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:48:47.289443 123:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:48:47.289443 124:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:48:47.289443 125:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:48:47.289443 126:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:48:47.289443 127: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:48:47.289443 128: Теги:                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:121                          
17:48:47.289443 129:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:122                          
17:48:47.289443 130:     Arduino Термометр                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:123                          
17:48:47.289443 131:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:124                          
17:48:47.289443 132:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:125                          
17:48:47.289443 [95mSKETCH REBUILD: : Sending 'didSave' notification to Clangd[0m
17:48:47.289443 [91mIDE     LS --> Clangd NOTIF textDocument/didSave[0m
17:48:47.289443 OUT Elapsed: 0s
17:48:47.289443 [95mSKETCH REBUILD: : Sending full-text 'didChange' notification to Clangd[0m
17:48:47.289443 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:48:47.289967 OUT Elapsed: 523.2µs
17:48:47.289980 [95mSKETCH REBUILD: : [93mwrite-unlocked[0m[0m
17:48:47.289980 [92mIDE <-- LS NOTIF $/progress[0m
17:48:47.289980 OUT Elapsed: 0s
17:48:47.563733 IN Elapsed: 283.5905ms
17:48:47.563733 [92mIDE --> LS REQU textDocument/documentSymbol 15[0m
17:48:47.563733 [92m                textDocument/documentSymbol 15: [93mread-locked[0m[0m
17:48:47.564321 [92m                textDocument/documentSymbol 15: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:47.564321 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 12[0m
17:48:47.564850 OUT Elapsed: 0s
17:48:47.600701 IN Elapsed: 3.6744255s
17:48:47.600701 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:47.600701 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:47.601232 IN Elapsed: 530.6µs
17:48:47.601232 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 12[0m
17:48:47.601232 [92m                textDocument/documentSymbol 15: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:47.601232 [92m                textDocument/documentSymbol 15:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:47.602922 [92m                textDocument/documentSymbol 15: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:47.603439 [92m                textDocument/documentSymbol 15: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:47.603439 [92m                textDocument/documentSymbol 15: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:47.603439 [92m                textDocument/documentSymbol 15:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:47.604502 [92m                textDocument/documentSymbol 15: Range is in PREPROCESSED section of the sketch[0m
17:48:47.604502 [92m                textDocument/documentSymbol 15: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:47.604502 [92m                textDocument/documentSymbol 15:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:47.604502 [92m                textDocument/documentSymbol 15:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:47.605030 [92m                textDocument/documentSymbol 15: Range is in PREPROCESSED section of the sketch[0m
17:48:47.605030 [92m                textDocument/documentSymbol 15: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:47.605538 [92m                textDocument/documentSymbol 15:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:47.605549 [92m                textDocument/documentSymbol 15:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:47.606096 [92m                textDocument/documentSymbol 15: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:47.606619 [92m                textDocument/documentSymbol 15: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:47.606619 [92m                textDocument/documentSymbol 15: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:47.607126 [92m                textDocument/documentSymbol 15:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:47.607687 [92m                textDocument/documentSymbol 15: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:47.608214 [92m                textDocument/documentSymbol 15: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:47.608214 [92m                textDocument/documentSymbol 15: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:47.608214 [92m                textDocument/documentSymbol 15: [93mread-unlocked[0m[0m
17:48:47.608736 [32mIDE <-- LS RESP textDocument/documentSymbol 15[0m
17:48:47.608736 OUT Elapsed: 0s
17:48:47.608736 IN Elapsed: 0s
17:48:47.608736 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:48:47.608736 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:48:47.608736 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@3)[0m
17:48:47.608736 [92m                 textDocument/didChange:   > 123:3-123:21 (len=18) -> ""[0m
17:48:47.608736 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

#include "OneWire.h"
 
// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
Теги:

   
-----------------------------[0m
17:48:47.609266 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:47.610329 Ino Range: 123:3-123:21 -> Cpp Range:130:3-130:21
17:48:47.610329   > Current sketchmapper content:
17:48:47.610329   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:48:47.610329   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:48:47.610329   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:48:47.610329   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:48:47.610329   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:48:47.610329   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:48:47.610329   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:48:47.610329   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:48:47.610329   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:48:47.610329   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:48:47.610329  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:48:47.610329  11: #include "OneWire.h"                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:48:47.610329  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:48:47.610329  13: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:48:47.610329  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:48:47.610329  15: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:48:47.610329  16: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:48:47.610329  17: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:48:47.610329  18: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:48:47.610329  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:48:47.610329  20: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:48:47.610329  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:48:47.610838  22: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:47.610838  23: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20 D:\Arduino_GitHub\Termometer\Termometer.ino:20
17:48:47.610858  24: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:47.610858  25: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24 D:\Arduino_GitHub\Termometer\Termometer.ino:24
17:48:47.610880  26: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:47.610880  27: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:48:47.610880  28:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:48:47.610880  29: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:48:47.610880  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:48:47.610880  31: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:48:47.610880  32:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:48:47.610880  33:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:48:47.610880  34:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:48:47.610880  35:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:48:47.610880  36:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:48:47.610880  37:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:48:47.610880  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:48:47.610880  39:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:48:47.610880  40:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:48:47.610880  41:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:48:47.610880  42:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:48:47.610880  43:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:48:47.610880  44:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:48:47.610880  45:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:48:47.610880  46:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:48:47.610880  47:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:48:47.610880  48:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:48:47.610880  49:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:48:47.610880  50:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:48:47.610880  51:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:48:47.610880  52:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:48:47.610880  53:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:48:47.610880  54:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:48:47.610880  55:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:48:47.610880  56:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:48:47.610880  57:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:48:47.610880  58:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:48:47.610880  59:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:48:47.610880  60:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:48:47.610880  61:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:48:47.610880  62:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:48:47.610880  63:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:48:47.610880  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:48:47.610880  65:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:48:47.610880  66:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:48:47.610880  67:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:48:47.610880  68:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:48:47.610880  69:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:48:47.610880  70:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:48:47.610880  71:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:48:47.610880  72:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:48:47.611391  73:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:48:47.611391  74:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:48:47.611419  75:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:48:47.611419  76:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:48:47.611419  77:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:48:47.611419  78:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:48:47.611419  79:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:48:47.611419  80:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:48:47.611419  81:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:48:47.611419  82:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:48:47.611419  83:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:48:47.611510  84:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:48:47.611510  85:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:48:47.611510  86:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:48:47.611510  87:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:48:47.611510  88:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:48:47.611510  89:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:48:47.611510  90:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:48:47.611510  91:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:48:47.611510  92:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:48:47.611510  93:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:48:47.611510  94:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:48:47.611510  95:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:48:47.611510  96:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:48:47.611510  97:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:48:47.611510  98:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:48:47.611510  99:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:48:47.611510 100:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:48:47.611510 101:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:48:47.611510 102:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:48:47.611510 103:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:48:47.611510 104:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:48:47.611510 105:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:48:47.611510 106:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:48:47.611510 107:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:48:47.611510 108:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:48:47.611510 109:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:48:47.611510 110:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:48:47.611510 111:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:48:47.611510 112:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:48:47.611510 113:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:48:47.611510 114:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:48:47.611510 115:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:48:47.611510 116:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:48:47.611510 117:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:48:47.611510 118:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:48:47.611510 119:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:48:47.611510 120:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:48:47.611510 121:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:48:47.611510 122:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:48:47.611510 123:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:48:47.611510 124:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:48:47.611510 125:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:48:47.611510 126:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:48:47.611510 127: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:48:47.611510 128: Теги:                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:121                          
17:48:47.611510 129:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:122                          
17:48:47.611510 130:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:123                          
17:48:47.611510 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@4)[0m
17:48:47.611510 [92m                 textDocument/didChange:             > 130:3-130:21 -> ""[0m
17:48:47.611510 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:48:47.611510 OUT Elapsed: 0s
17:48:47.611510 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:48:47.611510 IN Elapsed: 0s
17:48:47.612132 [92mIDE --> LS REQU textDocument/documentSymbol 16[0m
17:48:47.612132 [92m                textDocument/documentSymbol 16: [93mread-locked[0m[0m
17:48:47.612132 [92m                textDocument/documentSymbol 16: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:47.612132 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 13[0m
17:48:47.612132 OUT Elapsed: 0s
17:48:47.680051 IN Elapsed: 78.8191ms
17:48:47.680862 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 13[0m
17:48:47.680862 [92m                textDocument/documentSymbol 16: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:47.680862 [92m                textDocument/documentSymbol 16:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:47.682071 [92m                textDocument/documentSymbol 16: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:47.682610 IN Elapsed: 1.9204ms
17:48:47.683168 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:47.683168 [92m                textDocument/documentSymbol 16: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:47.683168 [92m                textDocument/documentSymbol 16: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:47.683168 [92m                textDocument/documentSymbol 16:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:47.683168 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:47.683692 [92m                textDocument/documentSymbol 16: Range is in PREPROCESSED section of the sketch[0m
17:48:47.683692 [92m                textDocument/documentSymbol 16: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:47.683692 [92m                textDocument/documentSymbol 16:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:47.683692 [92m                textDocument/documentSymbol 16:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:47.684765 [92m                textDocument/documentSymbol 16: Range is in PREPROCESSED section of the sketch[0m
17:48:47.684765 [92m                textDocument/documentSymbol 16: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:47.684765 [92m                textDocument/documentSymbol 16:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:47.684765 [92m                textDocument/documentSymbol 16:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:47.685295 [92m                textDocument/documentSymbol 16: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:47.686358 [92m                textDocument/documentSymbol 16: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:47.686358 [92m                textDocument/documentSymbol 16: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:47.686358 [92m                textDocument/documentSymbol 16:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:47.686884 [92m                textDocument/documentSymbol 16: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:47.687945 [92m                textDocument/documentSymbol 16: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:47.687945 [92m                textDocument/documentSymbol 16: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:47.687945 [92m                textDocument/documentSymbol 16: [93mread-unlocked[0m[0m
17:48:47.687945 [32mIDE <-- LS RESP textDocument/documentSymbol 16[0m
17:48:47.687945 OUT Elapsed: 0s
17:48:47.687945 IN Elapsed: 0s
17:48:48.138460 IN Elapsed: 450.5159ms
17:48:48.138460 [92mIDE --> LS REQU textDocument/documentSymbol 17[0m
17:48:48.138460 [92m                textDocument/documentSymbol 17: [93mread-locked[0m[0m
17:48:48.139008 [92m                textDocument/documentSymbol 17: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:48.139008 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 14[0m
17:48:48.139008 OUT Elapsed: 0s
17:48:48.139555 IN Elapsed: 456.3877ms
17:48:48.139555 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 14[0m
17:48:48.140069 [92m                textDocument/documentSymbol 17: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:48.140103 [92m                textDocument/documentSymbol 17:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:48.140649 [92m                textDocument/documentSymbol 17: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:48.141735 [92m                textDocument/documentSymbol 17: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:48.141735 [92m                textDocument/documentSymbol 17: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:48.141735 [92m                textDocument/documentSymbol 17:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:48.142268 [92m                textDocument/documentSymbol 17: Range is in PREPROCESSED section of the sketch[0m
17:48:48.142268 [92m                textDocument/documentSymbol 17: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:48.142783 [92m                textDocument/documentSymbol 17:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:48.142783 [92m                textDocument/documentSymbol 17:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:48.143329 [92m                textDocument/documentSymbol 17: Range is in PREPROCESSED section of the sketch[0m
17:48:48.143329 [92m                textDocument/documentSymbol 17: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:48.143329 [92m                textDocument/documentSymbol 17:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:48.143329 [92m                textDocument/documentSymbol 17:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:48.144384 [92m                textDocument/documentSymbol 17: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:48.144921 [92m                textDocument/documentSymbol 17: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:48.144921 [92m                textDocument/documentSymbol 17: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:48.144921 [92m                textDocument/documentSymbol 17:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:48.146021 [92m                textDocument/documentSymbol 17: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:48.147173 [92m                textDocument/documentSymbol 17: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:48.147173 [92m                textDocument/documentSymbol 17: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:48.147173 [92m                textDocument/documentSymbol 17: [93mread-unlocked[0m[0m
17:48:48.147173 [32mIDE <-- LS RESP textDocument/documentSymbol 17[0m
17:48:48.147173 OUT Elapsed: 0s
17:48:48.147173 IN Elapsed: 0s
17:48:48.147173 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:48:48.147173 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:48:48.147173 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@4)[0m
17:48:48.147173 [92m                 textDocument/didChange:   > 123:2-123:3 (len=1) -> ""[0m
17:48:48.147711 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

#include "OneWire.h"
 
// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
Теги:

  
-----------------------------[0m
17:48:48.147711 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:48.149403 Ino Range: 123:2-123:3 -> Cpp Range:130:2-130:3
17:48:48.149403   > Current sketchmapper content:
17:48:48.149403   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:48:48.149403   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:48:48.149403   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:48:48.149403   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:48:48.149403   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:48:48.149403   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:48:48.149403   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:48:48.149403   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:48:48.149403   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:48:48.149403   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:48:48.149403  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:48:48.149403  11: #include "OneWire.h"                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:48:48.149403  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:48:48.149403  13: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:48:48.149403  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:48:48.149403  15: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:48:48.149403  16: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:48:48.149403  17: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:48:48.149403  18: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:48:48.149403  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:48:48.149403  20: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:48:48.149403  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:48:48.149403  22: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:48.149403  23: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20 D:\Arduino_GitHub\Termometer\Termometer.ino:20
17:48:48.149403  24: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:48.149403  25: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24 D:\Arduino_GitHub\Termometer\Termometer.ino:24
17:48:48.149403  26: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:48.149403  27: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:48:48.149403  28:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:48:48.149403  29: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:48:48.149926  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:48:48.149926  31: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:48:48.149926  32:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:48:48.149958  33:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:48:48.149958  34:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:48:48.149958  35:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:48:48.149958  36:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:48:48.149958  37:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:48:48.149958  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:48:48.149958  39:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:48:48.149958  40:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:48:48.149958  41:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:48:48.149958  42:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:48:48.149958  43:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:48:48.149958  44:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:48:48.149958  45:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:48:48.149958  46:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:48:48.149958  47:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:48:48.149958  48:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:48:48.149958  49:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:48:48.149958  50:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:48:48.149958  51:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:48:48.149958  52:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:48:48.149958  53:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:48:48.149958  54:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:48:48.149958  55:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:48:48.149958  56:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:48:48.149958  57:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:48:48.149958  58:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:48:48.149958  59:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:48:48.149958  60:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:48:48.149958  61:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:48:48.149958  62:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:48:48.149958  63:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:48:48.149958  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:48:48.149958  65:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:48:48.149958  66:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:48:48.149958  67:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:48:48.149958  68:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:48:48.149958  69:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:48:48.149958  70:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:48:48.149958  71:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:48:48.149958  72:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:48:48.149958  73:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:48:48.150466  74:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:48:48.150478  75:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:48:48.150478  76:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:48:48.150506  77:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:48:48.150506  78:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:48:48.150506  79:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:48:48.150506  80:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:48:48.150506  81:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:48:48.150506  82:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:48:48.150506  83:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:48:48.150506  84:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:48:48.150506  85:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:48:48.150506  86:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:48:48.150506  87:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:48:48.150506  88:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:48:48.150506  89:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:48:48.150506  90:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:48:48.150506  91:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:48:48.150506  92:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:48:48.150506  93:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:48:48.150506  94:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:48:48.150506  95:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:48:48.150506  96:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:48:48.150506  97:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:48:48.150506  98:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:48:48.150506  99:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:48:48.150506 100:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:48:48.150506 101:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:48:48.150506 102:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:48:48.150506 103:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:48:48.150506 104:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:48:48.150506 105:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:48:48.150506 106:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:48:48.150506 107:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:48:48.150506 108:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:48:48.150506 109:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:48:48.150506 110:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:48:48.150506 111:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:48:48.150506 112:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:48:48.150506 113:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:48:48.150506 114:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:48:48.150506 115:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:48:48.150506 116:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:48:48.150506 117:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:48:48.151014 118:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:48:48.151054 119:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:48:48.151054 120:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:48:48.151054 121:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:48:48.151054 122:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:48:48.151054 123:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:48:48.151054 124:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:48:48.151054 125:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:48:48.151054 126:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:48:48.151054 127: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:48:48.151054 128: Теги:                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:121                          
17:48:48.151054 129:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:122                          
17:48:48.151054 130:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:123                          
17:48:48.151054 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@5)[0m
17:48:48.151054 [92m                 textDocument/didChange:             > 130:2-130:3 -> ""[0m
17:48:48.151054 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:48:48.151054 OUT Elapsed: 0s
17:48:48.151054 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:48:48.151054 IN Elapsed: 0s
17:48:48.151054 [92mIDE --> LS REQU textDocument/documentSymbol 18[0m
17:48:48.151054 [92m                textDocument/documentSymbol 18: [93mread-locked[0m[0m
17:48:48.151650 [92m                textDocument/documentSymbol 18: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:48.151650 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 15[0m
17:48:48.151650 OUT Elapsed: 0s
17:48:48.226125 IN Elapsed: 86.5696ms
17:48:48.226809 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 15[0m
17:48:48.226809 [92m                textDocument/documentSymbol 18: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:48.226809 [92m                textDocument/documentSymbol 18:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:48.229682 IN Elapsed: 3.0133ms
17:48:48.229682 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:48.229682 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:48.230237 [92m                textDocument/documentSymbol 18: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:48.231905 [92m                textDocument/documentSymbol 18: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:48.231905 [92m                textDocument/documentSymbol 18: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:48.231905 [92m                textDocument/documentSymbol 18:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:48.233538 [92m                textDocument/documentSymbol 18: Range is in PREPROCESSED section of the sketch[0m
17:48:48.233538 [92m                textDocument/documentSymbol 18: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:48.233538 [92m                textDocument/documentSymbol 18:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:48.233538 [92m                textDocument/documentSymbol 18:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:48.234614 [92m                textDocument/documentSymbol 18: Range is in PREPROCESSED section of the sketch[0m
17:48:48.234614 [92m                textDocument/documentSymbol 18: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:48.234614 [92m                textDocument/documentSymbol 18:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:48.234614 [92m                textDocument/documentSymbol 18:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:48.235721 [92m                textDocument/documentSymbol 18: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:48.236813 [92m                textDocument/documentSymbol 18: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:48.236813 [92m                textDocument/documentSymbol 18: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:48.236813 [92m                textDocument/documentSymbol 18:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:48.237905 [92m                textDocument/documentSymbol 18: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:48.239605 [92m                textDocument/documentSymbol 18: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:48.239605 [92m                textDocument/documentSymbol 18: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:48.239605 [92m                textDocument/documentSymbol 18: [93mread-unlocked[0m[0m
17:48:48.239605 [32mIDE <-- LS RESP textDocument/documentSymbol 18[0m
17:48:48.239605 OUT Elapsed: 0s
17:48:48.239605 IN Elapsed: 0s
17:48:48.618770 IN Elapsed: 379.1649ms
17:48:48.618770 [92mIDE --> LS REQU textDocument/documentSymbol 19[0m
17:48:48.618770 [92m                textDocument/documentSymbol 19: [93mread-locked[0m[0m
17:48:48.619326 [92m                textDocument/documentSymbol 19: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:48.619326 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 16[0m
17:48:48.619852 OUT Elapsed: 525.7µs
17:48:48.623073 IN Elapsed: 393.3908ms
17:48:48.623073 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 16[0m
17:48:48.623595 [92m                textDocument/documentSymbol 19: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:48.623595 [92m                textDocument/documentSymbol 19:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:48.624716 [92m                textDocument/documentSymbol 19: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:48.625779 [92m                textDocument/documentSymbol 19: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:48.625779 [92m                textDocument/documentSymbol 19: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:48.625779 [92m                textDocument/documentSymbol 19:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:48.627367 [92m                textDocument/documentSymbol 19: Range is in PREPROCESSED section of the sketch[0m
17:48:48.627367 [92m                textDocument/documentSymbol 19: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:48.627367 [92m                textDocument/documentSymbol 19:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:48.627367 [92m                textDocument/documentSymbol 19:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:48.628429 [92m                textDocument/documentSymbol 19: Range is in PREPROCESSED section of the sketch[0m
17:48:48.628429 [92m                textDocument/documentSymbol 19: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:48.628429 [92m                textDocument/documentSymbol 19:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:48.628429 [92m                textDocument/documentSymbol 19:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:48.629572 [92m                textDocument/documentSymbol 19: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:48.631891 [92m                textDocument/documentSymbol 19: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:48.631917 [92m                textDocument/documentSymbol 19: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:48.631917 [92m                textDocument/documentSymbol 19:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:48.633037 [92m                textDocument/documentSymbol 19: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:48.634117 [92m                textDocument/documentSymbol 19: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:48.634117 [92m                textDocument/documentSymbol 19: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:48.634117 [92m                textDocument/documentSymbol 19: [93mread-unlocked[0m[0m
17:48:48.634117 [32mIDE <-- LS RESP textDocument/documentSymbol 19[0m
17:48:48.634117 OUT Elapsed: 0s
17:48:48.634117 IN Elapsed: 0s
17:48:48.634117 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:48:48.634117 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:48:48.634117 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@5)[0m
17:48:48.634117 [92m                 textDocument/didChange:   > 123:0-123:2 (len=2) -> ""[0m
17:48:48.634666 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

#include "OneWire.h"
 
// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
Теги:


-----------------------------[0m
17:48:48.634666 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:48.636299 Ino Range: 123:0-123:2 -> Cpp Range:130:0-130:2
17:48:48.636879   > Current sketchmapper content:
17:48:48.636879   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:48:48.636879   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:48:48.636879   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:48:48.636879   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:48:48.636879   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:48:48.636879   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:48:48.636879   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:48:48.636879   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:48:48.636879   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:48:48.636879   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:48:48.636879  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:48:48.636879  11: #include "OneWire.h"                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:48:48.636879  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:48:48.636879  13: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:48:48.636879  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:48:48.636879  15: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:48:48.636879  16: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:48:48.636879  17: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:48:48.636879  18: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:48:48.636879  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:48:48.636879  20: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:48:48.636879  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:48:48.636879  22: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:48.636879  23: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20 D:\Arduino_GitHub\Termometer\Termometer.ino:20
17:48:48.636879  24: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:48.636879  25: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24 D:\Arduino_GitHub\Termometer\Termometer.ino:24
17:48:48.636879  26: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:48.636879  27: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:48:48.636879  28:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:48:48.636879  29: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:48:48.636879  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:48:48.636879  31: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:48:48.636879  32:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:48:48.636879  33:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:48:48.636879  34:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:48:48.636879  35:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:48:48.636879  36:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:48:48.636879  37:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:48:48.636879  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:48:48.636879  39:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:48:48.636879  40:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:48:48.636879  41:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:48:48.636879  42:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:48:48.636879  43:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:48:48.636879  44:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:48:48.636879  45:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:48:48.636879  46:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:48:48.636879  47:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:48:48.636879  48:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:48:48.636879  49:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:48:48.636879  50:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:48:48.636879  51:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:48:48.636879  52:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:48:48.636879  53:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:48:48.636879  54:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:48:48.636879  55:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:48:48.636879  56:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:48:48.636879  57:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:48:48.636879  58:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:48:48.636879  59:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:48:48.636879  60:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:48:48.636879  61:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:48:48.636879  62:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:48:48.636879  63:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:48:48.636879  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:48:48.637386  65:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:48:48.637397  66:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:48:48.637397  67:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:48:48.637414  68:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:48:48.637414  69:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:48:48.637414  70:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:48:48.637414  71:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:48:48.637414  72:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:48:48.637414  73:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:48:48.637414  74:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:48:48.637414  75:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:48:48.637414  76:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:48:48.637414  77:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:48:48.637414  78:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:48:48.637414  79:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:48:48.637414  80:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:48:48.637414  81:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:48:48.637414  82:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:48:48.637414  83:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:48:48.637414  84:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:48:48.637414  85:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:48:48.637414  86:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:48:48.637414  87:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:48:48.637414  88:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:48:48.637414  89:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:48:48.637414  90:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:48:48.637414  91:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:48:48.637414  92:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:48:48.637414  93:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:48:48.637414  94:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:48:48.637414  95:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:48:48.637414  96:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:48:48.637414  97:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:48:48.637414  98:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:48:48.637414  99:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:48:48.637414 100:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:48:48.637414 101:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:48:48.637414 102:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:48:48.637414 103:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:48:48.637414 104:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:48:48.637414 105:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:48:48.637414 106:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:48:48.637414 107:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:48:48.637414 108:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:48:48.637414 109:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:48:48.637414 110:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:48:48.637414 111:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:48:48.637414 112:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:48:48.637414 113:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:48:48.637414 114:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:48:48.637414 115:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:48:48.637414 116:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:48:48.637414 117:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:48:48.637414 118:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:48:48.637414 119:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:48:48.637414 120:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:48:48.637414 121:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:48:48.637414 122:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:48:48.637414 123:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:48:48.637414 124:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:48:48.637414 125:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:48:48.637414 126:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:48:48.637414 127: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:48:48.637414 128: Теги:                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:121                          
17:48:48.637414 129:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:122                          
17:48:48.637414 130:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:123                          
17:48:48.637414 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@6)[0m
17:48:48.637414 [92m                 textDocument/didChange:             > 130:0-130:2 -> ""[0m
17:48:48.637414 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:48:48.637943 OUT Elapsed: 528.5µs
17:48:48.637943 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:48:48.637943 IN Elapsed: 0s
17:48:48.637943 [92mIDE --> LS REQU textDocument/documentSymbol 20[0m
17:48:48.637943 [92m                textDocument/documentSymbol 20: [93mread-locked[0m[0m
17:48:48.637943 [92m                textDocument/documentSymbol 20: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:48.637943 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 17[0m
17:48:48.637943 OUT Elapsed: 0s
17:48:48.648812 IN Elapsed: 25.7388ms
17:48:48.648812 [91mIDE     LS <-- Clangd REQU window/workDoneProgress/create 1[0m
17:48:48.648812 [31mIDE     LS --> Clangd RESP window/workDoneProgress/create 1[0m
17:48:48.648812 [92mIDE <-- LS REQU window/workDoneProgress/create 3[0m
17:48:48.648812 OUT Elapsed: 0s
17:48:48.648812 OUT Elapsed: 0s
17:48:48.648812 IN Elapsed: 0s
17:48:48.648812 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:48:48.648812 [91m                            $/progress: backgroundIndexProgress BEGIN indexing, 0.0%[0m
17:48:48.648812 IN Elapsed: 0s
17:48:48.648812 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:48:48.648812 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
17:48:48.698564 IN Elapsed: 49.7521ms
17:48:48.698564 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:48:48.698564 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
17:48:48.698564 IN Elapsed: 0s
17:48:48.698564 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:48:48.698564 [91m                            $/progress: backgroundIndexProgress END [0m
17:48:48.717279 IN Elapsed: 18.7152ms
17:48:48.717794 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 17[0m
17:48:48.717827 [92m                textDocument/documentSymbol 20: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:48.717827 [92m                textDocument/documentSymbol 20:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:48.718892 [92m                textDocument/documentSymbol 20: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:48.719438 IN Elapsed: 2.1584ms
17:48:48.719438 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:48.719438 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:48.719438 [92m                textDocument/documentSymbol 20: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:48.719438 [92m                textDocument/documentSymbol 20: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:48.719438 [92m                textDocument/documentSymbol 20:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:48.720491 [92m                textDocument/documentSymbol 20: Range is in PREPROCESSED section of the sketch[0m
17:48:48.720491 [92m                textDocument/documentSymbol 20: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:48.720491 [92m                textDocument/documentSymbol 20:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:48.720491 [92m                textDocument/documentSymbol 20:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:48.721615 [92m                textDocument/documentSymbol 20: Range is in PREPROCESSED section of the sketch[0m
17:48:48.721615 [92m                textDocument/documentSymbol 20: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:48.721615 [92m                textDocument/documentSymbol 20:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:48.721615 [92m                textDocument/documentSymbol 20:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:48.722683 [92m                textDocument/documentSymbol 20: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:48.723223 [92m                textDocument/documentSymbol 20: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:48.723223 [92m                textDocument/documentSymbol 20: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:48.723223 [92m                textDocument/documentSymbol 20:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:48.724279 [92m                textDocument/documentSymbol 20: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:48.724819 [92m                textDocument/documentSymbol 20: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:48.724819 [92m                textDocument/documentSymbol 20: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:48.724819 [92m                textDocument/documentSymbol 20: [93mread-unlocked[0m[0m
17:48:48.724819 [32mIDE <-- LS RESP textDocument/documentSymbol 20[0m
17:48:48.724819 OUT Elapsed: 0s
17:48:48.724819 IN Elapsed: 0s
17:48:48.724819 IN Elapsed: 0s
17:48:48.724819 [32mIDE --> LS RESP window/workDoneProgress/create 3[0m
17:48:48.725340 [92mIDE <-- LS NOTIF $/progress[0m
17:48:48.725368 OUT Elapsed: 0s
17:48:48.725368 [92mIDE <-- LS NOTIF $/progress[0m
17:48:48.725368 OUT Elapsed: 0s
17:48:48.996839 IN Elapsed: 272.0205ms
17:48:48.997070 [92mIDE --> LS REQU textDocument/documentSymbol 21[0m
17:48:48.997153 [92m                textDocument/documentSymbol 21: [93mread-locked[0m[0m
17:48:48.997704 [92m                textDocument/documentSymbol 21: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:48.997704 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 18[0m
17:48:48.997704 OUT Elapsed: 0s
17:48:48.998344 IN Elapsed: 278.9062ms
17:48:48.998344 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 18[0m
17:48:48.998344 [92m                textDocument/documentSymbol 21: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:48.998344 [92m                textDocument/documentSymbol 21:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:48.999447 [92m                textDocument/documentSymbol 21: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:49.000543 [92m                textDocument/documentSymbol 21: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:49.000543 [92m                textDocument/documentSymbol 21: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.000543 [92m                textDocument/documentSymbol 21:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:49.002267 [92m                textDocument/documentSymbol 21: Range is in PREPROCESSED section of the sketch[0m
17:48:49.002267 [92m                textDocument/documentSymbol 21: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:49.002267 [92m                textDocument/documentSymbol 21:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.002267 [92m                textDocument/documentSymbol 21:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:49.002796 [92m                textDocument/documentSymbol 21: Range is in PREPROCESSED section of the sketch[0m
17:48:49.002796 [92m                textDocument/documentSymbol 21: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:49.002796 [92m                textDocument/documentSymbol 21:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.002796 [92m                textDocument/documentSymbol 21:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:49.003845 [92m                textDocument/documentSymbol 21: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:49.004943 [92m                textDocument/documentSymbol 21: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:49.004943 [92m                textDocument/documentSymbol 21: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.004943 [92m                textDocument/documentSymbol 21:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:49.006018 [92m                textDocument/documentSymbol 21: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:49.006550 [92m                textDocument/documentSymbol 21: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:49.007197 [92m                textDocument/documentSymbol 21: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.007197 [92m                textDocument/documentSymbol 21: [93mread-unlocked[0m[0m
17:48:49.007197 [32mIDE <-- LS RESP textDocument/documentSymbol 21[0m
17:48:49.007197 OUT Elapsed: 0s
17:48:49.007197 IN Elapsed: 0s
17:48:49.007197 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:48:49.007197 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:48:49.007197 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@6)[0m
17:48:49.007197 [92m                 textDocument/didChange:   > 122:0-123:0 (len=2) -> ""[0m
17:48:49.007734 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

#include "OneWire.h"
 
// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
Теги:

-----------------------------[0m
17:48:49.007734 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:49.009388 Ino Range: 122:0-123:0 -> Cpp Range:129:0-130:0
17:48:49.009388   > Current sketchmapper content:
17:48:49.009388   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:48:49.009388   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:48:49.009898   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:48:49.009918   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:48:49.010000   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:48:49.010000   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:48:49.010000   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:48:49.010000   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:48:49.010000   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:48:49.010000   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:48:49.010000  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:48:49.010000  11: #include "OneWire.h"                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:48:49.010000  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:48:49.010000  13: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:48:49.010000  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:48:49.010000  15: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:48:49.010000  16: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:48:49.010000  17: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:48:49.010000  18: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:48:49.010000  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:48:49.010000  20: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:48:49.010000  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:48:49.010000  22: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:49.010000  23: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20 D:\Arduino_GitHub\Termometer\Termometer.ino:20
17:48:49.010000  24: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:49.010000  25: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24 D:\Arduino_GitHub\Termometer\Termometer.ino:24
17:48:49.010000  26: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:49.010000  27: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:48:49.010000  28:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:48:49.010000  29: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:48:49.010000  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:48:49.010000  31: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:48:49.010000  32:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:48:49.010000  33:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:48:49.010000  34:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:48:49.010000  35:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:48:49.010000  36:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:48:49.010000  37:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:48:49.010000  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:48:49.010000  39:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:48:49.010000  40:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:48:49.010000  41:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:48:49.010000  42:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:48:49.010000  43:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:48:49.010000  44:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:48:49.010000  45:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:48:49.010508  46:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:48:49.010522  47:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:48:49.010522  48:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:48:49.010541  49:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:48:49.010541  50:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:48:49.010541  51:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:48:49.010541  52:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:48:49.010541  53:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:48:49.010541  54:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:48:49.010541  55:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:48:49.010541  56:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:48:49.010541  57:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:48:49.010541  58:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:48:49.010541  59:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:48:49.010541  60:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:48:49.010541  61:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:48:49.010541  62:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:48:49.010541  63:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:48:49.010541  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:48:49.010541  65:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:48:49.010541  66:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:48:49.010541  67:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:48:49.010541  68:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:48:49.010541  69:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:48:49.010541  70:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:48:49.010541  71:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:48:49.010541  72:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:48:49.010541  73:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:48:49.010541  74:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:48:49.010541  75:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:48:49.010541  76:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:48:49.010541  77:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:48:49.010541  78:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:48:49.010541  79:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:48:49.010541  80:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:48:49.010541  81:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:48:49.010541  82:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:48:49.010541  83:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:48:49.010541  84:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:48:49.010541  85:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:48:49.010541  86:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:48:49.010541  87:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:48:49.010541  88:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:48:49.010541  89:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:48:49.010541  90:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:48:49.010541  91:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:48:49.010541  92:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:48:49.010541  93:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:48:49.010541  94:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:48:49.010541  95:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:48:49.010541  96:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:48:49.010541  97:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:48:49.010541  98:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:48:49.010541  99:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:48:49.010541 100:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:48:49.010541 101:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:48:49.010541 102:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:48:49.010541 103:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:48:49.010541 104:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:48:49.010541 105:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:48:49.010541 106:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:48:49.010541 107:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:48:49.010541 108:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:48:49.010541 109:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:48:49.010541 110:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:48:49.010541 111:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:48:49.011049 112:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:48:49.011060 113:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:48:49.011071 114:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:48:49.011071 115:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:48:49.011071 116:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:48:49.011071 117:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:48:49.011071 118:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:48:49.011071 119:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:48:49.011071 120:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:48:49.011071 121:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:48:49.011071 122:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:48:49.011071 123:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:48:49.011071 124:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:48:49.011071 125:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:48:49.011071 126:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:48:49.011071 127: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:48:49.011071 128: Теги:                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:121                          
17:48:49.011071 129:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:122                          
17:48:49.011071 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@7)[0m
17:48:49.011071 [92m                 textDocument/didChange:             > 129:0-130:0 -> ""[0m
17:48:49.011071 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:48:49.011071 OUT Elapsed: 0s
17:48:49.011071 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:48:49.011071 IN Elapsed: 0s
17:48:49.011071 [92mIDE --> LS REQU textDocument/documentSymbol 22[0m
17:48:49.011071 [92m                textDocument/documentSymbol 22: [93mread-locked[0m[0m
17:48:49.011608 [92m                textDocument/documentSymbol 22: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:49.011608 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 19[0m
17:48:49.011608 OUT Elapsed: 0s
17:48:49.092003 IN Elapsed: 93.6587ms
17:48:49.092003 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 19[0m
17:48:49.092546 [92m                textDocument/documentSymbol 22: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:49.092546 [92m                textDocument/documentSymbol 22:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:49.093605 [92m                textDocument/documentSymbol 22: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:49.094203 IN Elapsed: 2.2003ms
17:48:49.094203 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:49.094203 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:49.094740 [92m                textDocument/documentSymbol 22: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:49.094740 [92m                textDocument/documentSymbol 22: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.094740 [92m                textDocument/documentSymbol 22:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:49.095921 [92m                textDocument/documentSymbol 22: Range is in PREPROCESSED section of the sketch[0m
17:48:49.095921 [92m                textDocument/documentSymbol 22: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:49.095921 [92m                textDocument/documentSymbol 22:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.095921 [92m                textDocument/documentSymbol 22:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:49.097585 [92m                textDocument/documentSymbol 22: Range is in PREPROCESSED section of the sketch[0m
17:48:49.097585 [92m                textDocument/documentSymbol 22: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:49.097585 [92m                textDocument/documentSymbol 22:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.097585 [92m                textDocument/documentSymbol 22:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:49.098715 [92m                textDocument/documentSymbol 22: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:49.100304 [92m                textDocument/documentSymbol 22: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:49.100304 [92m                textDocument/documentSymbol 22: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.100356 [92m                textDocument/documentSymbol 22:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:49.101433 [92m                textDocument/documentSymbol 22: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:49.102491 [92m                textDocument/documentSymbol 22: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:49.102491 [92m                textDocument/documentSymbol 22: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.102491 [92m                textDocument/documentSymbol 22: [93mread-unlocked[0m[0m
17:48:49.102491 [32mIDE <-- LS RESP textDocument/documentSymbol 22[0m
17:48:49.102491 OUT Elapsed: 0s
17:48:49.102491 IN Elapsed: 0s
17:48:49.162390 IN Elapsed: 59.8994ms
17:48:49.162436 [92mIDE --> LS REQU textDocument/documentSymbol 23[0m
17:48:49.162436 [92m                textDocument/documentSymbol 23: [93mread-locked[0m[0m
17:48:49.163090 [92m                textDocument/documentSymbol 23: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:49.163090 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 20[0m
17:48:49.163090 OUT Elapsed: 0s
17:48:49.163622 IN Elapsed: 69.4193ms
17:48:49.164229 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 20[0m
17:48:49.164229 [92m                textDocument/documentSymbol 23: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:49.164229 [92m                textDocument/documentSymbol 23:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:49.165869 [92m                textDocument/documentSymbol 23: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:49.166941 [92m                textDocument/documentSymbol 23: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:49.166941 [92m                textDocument/documentSymbol 23: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.166941 [92m                textDocument/documentSymbol 23:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:49.168045 [92m                textDocument/documentSymbol 23: Range is in PREPROCESSED section of the sketch[0m
17:48:49.168045 [92m                textDocument/documentSymbol 23: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:49.168045 [92m                textDocument/documentSymbol 23:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.168045 [92m                textDocument/documentSymbol 23:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:49.169133 [92m                textDocument/documentSymbol 23: Range is in PREPROCESSED section of the sketch[0m
17:48:49.169133 [92m                textDocument/documentSymbol 23: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:49.169133 [92m                textDocument/documentSymbol 23:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.169133 [92m                textDocument/documentSymbol 23:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:49.170762 [92m                textDocument/documentSymbol 23: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:49.171876 [92m                textDocument/documentSymbol 23: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:49.171876 [92m                textDocument/documentSymbol 23: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.171876 [92m                textDocument/documentSymbol 23:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:49.173054 [92m                textDocument/documentSymbol 23: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:49.174242 [92m                textDocument/documentSymbol 23: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:49.174242 [92m                textDocument/documentSymbol 23: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.174242 [92m                textDocument/documentSymbol 23: [93mread-unlocked[0m[0m
17:48:49.174242 [32mIDE <-- LS RESP textDocument/documentSymbol 23[0m
17:48:49.174242 OUT Elapsed: 0s
17:48:49.174242 IN Elapsed: 0s
17:48:49.174242 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:48:49.174242 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:48:49.174774 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@7)[0m
17:48:49.174815 [92m                 textDocument/didChange:   > 121:5-122:0 (len=2) -> ""[0m
17:48:49.174815 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

#include "OneWire.h"
 
// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
Теги:

-----------------------------[0m
17:48:49.175411 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:49.177692 Ino Range: 121:5-122:0 -> Cpp Range:128:5-129:0
17:48:49.178237   > Current sketchmapper content:
17:48:49.178237   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:48:49.178237   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:48:49.178237   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:48:49.178237   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:48:49.178237   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:48:49.178237   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:48:49.178237   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:48:49.178237   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:48:49.178237   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:48:49.178237   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:48:49.178237  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:48:49.178237  11: #include "OneWire.h"                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:48:49.178237  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:48:49.178237  13: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:48:49.178237  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:48:49.178237  15: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:48:49.178237  16: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:48:49.178237  17: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:48:49.178237  18: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:48:49.178237  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:48:49.178237  20: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:48:49.178237  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:48:49.178237  22: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:49.178237  23: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20 D:\Arduino_GitHub\Termometer\Termometer.ino:20
17:48:49.178237  24: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:49.178237  25: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24 D:\Arduino_GitHub\Termometer\Termometer.ino:24
17:48:49.178237  26: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:49.178237  27: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:48:49.178237  28:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:48:49.178237  29: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:48:49.178237  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:48:49.178237  31: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:48:49.178237  32:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:48:49.178237  33:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:48:49.178237  34:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:48:49.178237  35:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:48:49.178237  36:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:48:49.178237  37:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:48:49.178237  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:48:49.178237  39:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:48:49.178750  40:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:48:49.178766  41:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:48:49.178766  42:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:48:49.178786  43:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:48:49.178786  44:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:48:49.178786  45:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:48:49.178786  46:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:48:49.178786  47:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:48:49.178786  48:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:48:49.178786  49:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:48:49.178786  50:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:48:49.178786  51:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:48:49.178786  52:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:48:49.178786  53:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:48:49.178786  54:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:48:49.178786  55:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:48:49.178786  56:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:48:49.178786  57:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:48:49.178786  58:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:48:49.178786  59:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:48:49.178786  60:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:48:49.178786  61:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:48:49.178786  62:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:48:49.178786  63:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:48:49.178786  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:48:49.178786  65:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:48:49.178786  66:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:48:49.178786  67:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:48:49.178786  68:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:48:49.178786  69:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:48:49.178786  70:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:48:49.178786  71:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:48:49.178786  72:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:48:49.178786  73:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:48:49.178786  74:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:48:49.178786  75:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:48:49.178786  76:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:48:49.178786  77:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:48:49.178786  78:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:48:49.178786  79:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:48:49.178786  80:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:48:49.178786  81:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:48:49.178786  82:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:48:49.178786  83:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:48:49.178786  84:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:48:49.178786  85:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:48:49.179296  86:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:48:49.179313  87:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:48:49.179313  88:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:48:49.179313  89:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:48:49.179313  90:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:48:49.179313  91:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:48:49.179313  92:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:48:49.179313  93:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:48:49.179313  94:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:48:49.179313  95:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:48:49.179313  96:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:48:49.179313  97:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:48:49.179313  98:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:48:49.179457  99:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:48:49.179457 100:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:48:49.179457 101:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:48:49.179457 102:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:48:49.179457 103:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:48:49.179457 104:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:48:49.179457 105:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:48:49.179457 106:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:48:49.179457 107:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:48:49.179457 108:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:48:49.179457 109:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:48:49.179457 110:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:48:49.179457 111:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:48:49.179457 112:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:48:49.179457 113:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:48:49.179457 114:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:48:49.179457 115:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:48:49.179457 116:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:48:49.179457 117:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:48:49.179457 118:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:48:49.179457 119:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:48:49.179457 120:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:48:49.179457 121:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:48:49.179457 122:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:48:49.179967 123:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:48:49.179984 124:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:48:49.179984 125:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:48:49.180014 126:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:48:49.180014 127: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:48:49.180014 128: Теги:                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:121                          
17:48:49.180014 129:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:122                          
17:48:49.180014 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@8)[0m
17:48:49.180014 [92m                 textDocument/didChange:             > 128:5-129:0 -> ""[0m
17:48:49.180014 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:48:49.180014 OUT Elapsed: 0s
17:48:49.180014 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:48:49.180014 IN Elapsed: 0s
17:48:49.180014 [92mIDE --> LS REQU textDocument/documentSymbol 24[0m
17:48:49.180014 [92m                textDocument/documentSymbol 24: [93mread-locked[0m[0m
17:48:49.180569 [92m                textDocument/documentSymbol 24: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:49.180569 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 21[0m
17:48:49.180569 OUT Elapsed: 0s
17:48:49.249944 IN Elapsed: 85.715ms
17:48:49.249944 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 21[0m
17:48:49.250474 [92m                textDocument/documentSymbol 24: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:49.250474 [92m                textDocument/documentSymbol 24:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:49.251640 [92m                textDocument/documentSymbol 24: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:49.252196 IN Elapsed: 2.2518ms
17:48:49.252816 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:49.252816 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:49.253348 [92m                textDocument/documentSymbol 24: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:49.253348 [92m                textDocument/documentSymbol 24: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.253348 [92m                textDocument/documentSymbol 24:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:49.253867 [92m                textDocument/documentSymbol 24: Range is in PREPROCESSED section of the sketch[0m
17:48:49.253867 [92m                textDocument/documentSymbol 24: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:49.253867 [92m                textDocument/documentSymbol 24:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.253867 [92m                textDocument/documentSymbol 24:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:49.254964 [92m                textDocument/documentSymbol 24: Range is in PREPROCESSED section of the sketch[0m
17:48:49.254964 [92m                textDocument/documentSymbol 24: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:49.254964 [92m                textDocument/documentSymbol 24:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.254964 [92m                textDocument/documentSymbol 24:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:49.255498 [92m                textDocument/documentSymbol 24: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:49.256569 [92m                textDocument/documentSymbol 24: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:49.256569 [92m                textDocument/documentSymbol 24: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.256569 [92m                textDocument/documentSymbol 24:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:49.257635 [92m                textDocument/documentSymbol 24: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:49.258166 [92m                textDocument/documentSymbol 24: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:49.258166 [92m                textDocument/documentSymbol 24: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.258166 [92m                textDocument/documentSymbol 24: [93mread-unlocked[0m[0m
17:48:49.258166 [32mIDE <-- LS RESP textDocument/documentSymbol 24[0m
17:48:49.258166 OUT Elapsed: 0s
17:48:49.258166 IN Elapsed: 0s
17:48:49.412187 IN Elapsed: 154.0209ms
17:48:49.412187 [92mIDE --> LS REQU textDocument/codeAction 25[0m
17:48:49.412187 [92m                textDocument/codeAction 25: [93mread-locked[0m[0m
17:48:49.412187 [92m                textDocument/codeAction 25: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:121:5)[0m
17:48:49.412753 [92m                textDocument/codeAction 25: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:49.414399 [92m                textDocument/codeAction 25:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:121:5)[0m
17:48:49.414399 [91mIDE     LS --> Clangd REQU textDocument/codeAction 22[0m
17:48:49.414399 OUT Elapsed: 0s
17:48:49.414919 IN Elapsed: 162.1034ms
17:48:49.415011 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 22[0m
17:48:49.415011 [92m                textDocument/codeAction 25: [93mread-unlocked[0m[0m
17:48:49.415011 [32mIDE <-- LS RESP textDocument/codeAction 25[0m
17:48:49.415011 OUT Elapsed: 0s
17:48:49.579613 IN Elapsed: 164.6015ms
17:48:49.579613 [92mIDE --> LS REQU textDocument/documentSymbol 26[0m
17:48:49.579613 [92m                textDocument/documentSymbol 26: [93mread-locked[0m[0m
17:48:49.580614 [92m                textDocument/documentSymbol 26: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:49.580614 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 23[0m
17:48:49.580614 OUT Elapsed: 0s
17:48:49.581603 IN Elapsed: 166.5916ms
17:48:49.581603 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 23[0m
17:48:49.581603 [92m                textDocument/documentSymbol 26: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:49.581603 [92m                textDocument/documentSymbol 26:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:49.582722 [92m                textDocument/documentSymbol 26: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:49.583775 [92m                textDocument/documentSymbol 26: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:49.583775 [92m                textDocument/documentSymbol 26: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.583775 [92m                textDocument/documentSymbol 26:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:49.584305 [92m                textDocument/documentSymbol 26: Range is in PREPROCESSED section of the sketch[0m
17:48:49.584305 [92m                textDocument/documentSymbol 26: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:49.584305 [92m                textDocument/documentSymbol 26:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.584305 [92m                textDocument/documentSymbol 26:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:49.585382 [92m                textDocument/documentSymbol 26: Range is in PREPROCESSED section of the sketch[0m
17:48:49.585382 [92m                textDocument/documentSymbol 26: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:49.585382 [92m                textDocument/documentSymbol 26:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.585382 [92m                textDocument/documentSymbol 26:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:49.585924 [92m                textDocument/documentSymbol 26: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:49.586999 [92m                textDocument/documentSymbol 26: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:49.586999 [92m                textDocument/documentSymbol 26: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.586999 [92m                textDocument/documentSymbol 26:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:49.588070 [92m                textDocument/documentSymbol 26: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:49.588613 [92m                textDocument/documentSymbol 26: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:49.588613 [92m                textDocument/documentSymbol 26: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.588613 [92m                textDocument/documentSymbol 26: [93mread-unlocked[0m[0m
17:48:49.588613 [32mIDE <-- LS RESP textDocument/documentSymbol 26[0m
17:48:49.588613 OUT Elapsed: 0s
17:48:49.588613 IN Elapsed: 0s
17:48:49.588613 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:48:49.589126 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:48:49.589156 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@8)[0m
17:48:49.589156 [92m                 textDocument/didChange:   > 121:4-121:5 (len=1) -> ""[0m
17:48:49.589156 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

#include "OneWire.h"
 
// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
Те
-----------------------------[0m
17:48:49.589156 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:49.590821 Ino Range: 121:4-121:5 -> Cpp Range:128:4-128:5
17:48:49.590821   > Current sketchmapper content:
17:48:49.590821   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:48:49.590821   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:48:49.590821   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:48:49.591336   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:48:49.591354   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:48:49.591376   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:48:49.591376   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:48:49.591376   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:48:49.591376   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:48:49.591376   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:48:49.591376  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:48:49.591376  11: #include "OneWire.h"                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:48:49.591376  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:48:49.591376  13: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:48:49.591376  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:48:49.591376  15: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:48:49.591376  16: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:48:49.591376  17: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:48:49.591376  18: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:48:49.591376  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:48:49.591376  20: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:48:49.591376  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:48:49.591376  22: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:49.591376  23: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20 D:\Arduino_GitHub\Termometer\Termometer.ino:20
17:48:49.591376  24: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:49.591376  25: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24 D:\Arduino_GitHub\Termometer\Termometer.ino:24
17:48:49.591376  26: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:49.591376  27: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:48:49.591376  28:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:48:49.591376  29: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:48:49.591376  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:48:49.591376  31: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:48:49.591376  32:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:48:49.591376  33:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:48:49.591376  34:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:48:49.591376  35:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:48:49.591376  36:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:48:49.591376  37:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:48:49.591376  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:48:49.591376  39:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:48:49.591376  40:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:48:49.591376  41:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:48:49.591376  42:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:48:49.591376  43:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:48:49.591376  44:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:48:49.591376  45:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:48:49.591886  46:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:48:49.591886  47:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:48:49.591886  48:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:48:49.591952  49:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:48:49.591952  50:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:48:49.591952  51:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:48:49.591952  52:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:48:49.591952  53:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:48:49.592094  54:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:48:49.592094  55:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:48:49.592094  56:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:48:49.592094  57:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:48:49.592094  58:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:48:49.592094  59:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:48:49.592094  60:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:48:49.592094  61:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:48:49.592094  62:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:48:49.592094  63:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:48:49.592094  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:48:49.592094  65:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:48:49.592094  66:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:48:49.592094  67:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:48:49.592094  68:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:48:49.592094  69:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:48:49.592094  70:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:48:49.592094  71:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:48:49.592094  72:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:48:49.592094  73:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:48:49.592094  74:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:48:49.592094  75:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:48:49.592094  76:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:48:49.592094  77:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:48:49.592094  78:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:48:49.592094  79:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:48:49.592094  80:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:48:49.592094  81:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:48:49.592094  82:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:48:49.592094  83:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:48:49.592094  84:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:48:49.592094  85:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:48:49.592094  86:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:48:49.592094  87:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:48:49.592094  88:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:48:49.592094  89:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:48:49.592094  90:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:48:49.592094  91:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:48:49.592094  92:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:48:49.592094  93:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:48:49.592094  94:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:48:49.592094  95:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:48:49.592094  96:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:48:49.592094  97:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:48:49.592094  98:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:48:49.592094  99:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:48:49.592094 100:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:48:49.592094 101:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:48:49.592094 102:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:48:49.592094 103:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:48:49.592094 104:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:48:49.592094 105:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:48:49.592094 106:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:48:49.592094 107:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:48:49.592094 108:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:48:49.592094 109:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:48:49.592094 110:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:48:49.592094 111:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:48:49.592094 112:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:48:49.592094 113:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:48:49.592675 114:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:48:49.592675 115:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:48:49.592675 116:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:48:49.592675 117:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:48:49.592675 118:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:48:49.592675 119:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:48:49.592675 120:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:48:49.592675 121:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:48:49.592675 122:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:48:49.592675 123:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:48:49.592675 124:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:48:49.592675 125:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:48:49.592675 126:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:48:49.592675 127: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:48:49.592675 128: Те                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:121                          
17:48:49.592675 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@9)[0m
17:48:49.593183 [92m                 textDocument/didChange:             > 128:4-128:5 -> ""[0m
17:48:49.593225 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:48:49.593225 OUT Elapsed: 0s
17:48:49.593225 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:48:49.593225 IN Elapsed: 0s
17:48:49.593225 [92mIDE --> LS REQU textDocument/documentSymbol 27[0m
17:48:49.593753 [92m                textDocument/documentSymbol 27: [93mread-locked[0m[0m
17:48:49.593753 [92m                textDocument/documentSymbol 27: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:49.593753 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 24[0m
17:48:49.593753 OUT Elapsed: 0s
17:48:49.665095 IN Elapsed: 83.4924ms
17:48:49.665095 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 24[0m
17:48:49.666100 [92m                textDocument/documentSymbol 27: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:49.666100 [92m                textDocument/documentSymbol 27:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:49.667099 [92m                textDocument/documentSymbol 27: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:49.667099 IN Elapsed: 2.004ms
17:48:49.667099 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:49.668096 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:49.668096 [92m                textDocument/documentSymbol 27: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:49.668096 [92m                textDocument/documentSymbol 27: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.668096 [92m                textDocument/documentSymbol 27:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:49.668096 [92m                textDocument/documentSymbol 27: Range is in PREPROCESSED section of the sketch[0m
17:48:49.669117 [92m                textDocument/documentSymbol 27: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:49.669137 [92m                textDocument/documentSymbol 27:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.669137 [92m                textDocument/documentSymbol 27:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:49.669971 [92m                textDocument/documentSymbol 27: Range is in PREPROCESSED section of the sketch[0m
17:48:49.669971 [92m                textDocument/documentSymbol 27: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:49.669971 [92m                textDocument/documentSymbol 27:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.669971 [92m                textDocument/documentSymbol 27:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:49.671082 [92m                textDocument/documentSymbol 27: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:49.671617 [92m                textDocument/documentSymbol 27: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:49.671617 [92m                textDocument/documentSymbol 27: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.671617 [92m                textDocument/documentSymbol 27:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:49.672697 [92m                textDocument/documentSymbol 27: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:49.673232 [92m                textDocument/documentSymbol 27: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:49.673232 [92m                textDocument/documentSymbol 27: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.673745 [92m                textDocument/documentSymbol 27: [93mread-unlocked[0m[0m
17:48:49.673760 [32mIDE <-- LS RESP textDocument/documentSymbol 27[0m
17:48:49.673760 OUT Elapsed: 0s
17:48:49.673760 IN Elapsed: 0s
17:48:49.753047 IN Elapsed: 79.2875ms
17:48:49.753047 [92mIDE --> LS REQU textDocument/documentSymbol 28[0m
17:48:49.754387 [92m                textDocument/documentSymbol 28: [93mread-locked[0m[0m
17:48:49.754387 [92m                textDocument/documentSymbol 28: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:49.754387 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 25[0m
17:48:49.754913 OUT Elapsed: 526µs
17:48:49.755481 IN Elapsed: 88.3815ms
17:48:49.755481 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 25[0m
17:48:49.755481 [92m                textDocument/documentSymbol 28: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:49.755481 [92m                textDocument/documentSymbol 28:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:49.756536 [92m                textDocument/documentSymbol 28: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:49.757593 [92m                textDocument/documentSymbol 28: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:49.757593 [92m                textDocument/documentSymbol 28: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.757593 [92m                textDocument/documentSymbol 28:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:49.758744 [92m                textDocument/documentSymbol 28: Range is in PREPROCESSED section of the sketch[0m
17:48:49.758744 [92m                textDocument/documentSymbol 28: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:49.758744 [92m                textDocument/documentSymbol 28:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.758744 [92m                textDocument/documentSymbol 28:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:49.759305 [92m                textDocument/documentSymbol 28: Range is in PREPROCESSED section of the sketch[0m
17:48:49.759830 [92m                textDocument/documentSymbol 28: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:49.759830 [92m                textDocument/documentSymbol 28:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.759830 [92m                textDocument/documentSymbol 28:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:49.760351 [92m                textDocument/documentSymbol 28: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:49.761418 [92m                textDocument/documentSymbol 28: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:49.761418 [92m                textDocument/documentSymbol 28: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.761418 [92m                textDocument/documentSymbol 28:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:49.761959 [92m                textDocument/documentSymbol 28: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:49.764209 [92m                textDocument/documentSymbol 28: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:49.764270 [92m                textDocument/documentSymbol 28: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.764270 [92m                textDocument/documentSymbol 28: [93mread-unlocked[0m[0m
17:48:49.764270 [32mIDE <-- LS RESP textDocument/documentSymbol 28[0m
17:48:49.764270 OUT Elapsed: 0s
17:48:49.764270 IN Elapsed: 0s
17:48:49.764270 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:48:49.764270 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:48:49.764270 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@9)[0m
17:48:49.764270 [92m                 textDocument/didChange:   > 121:3-121:4 (len=1) -> ""[0m
17:48:49.764846 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

#include "OneWire.h"
 
// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
Те
-----------------------------[0m
17:48:49.764846 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:49.767154 Ino Range: 121:3-121:4 -> Cpp Range:128:3-128:4
17:48:49.767691   > Current sketchmapper content:
17:48:49.767691   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:48:49.767691   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:48:49.767691   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:48:49.767691   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:48:49.767691   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:48:49.767691   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:48:49.767691   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:48:49.767691   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:48:49.767691   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:48:49.767691   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:48:49.767691  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:48:49.767691  11: #include "OneWire.h"                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:48:49.767691  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:48:49.767691  13: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:48:49.767691  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:48:49.767691  15: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:48:49.767691  16: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:48:49.767691  17: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:48:49.767691  18: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:48:49.767691  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:48:49.767691  20: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:48:49.767691  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:48:49.767691  22: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:49.767691  23: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20 D:\Arduino_GitHub\Termometer\Termometer.ino:20
17:48:49.767691  24: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:49.767691  25: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24 D:\Arduino_GitHub\Termometer\Termometer.ino:24
17:48:49.767691  26: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:49.767691  27: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:48:49.767691  28:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:48:49.767691  29: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:48:49.767691  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:48:49.767691  31: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:48:49.767691  32:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:48:49.767691  33:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:48:49.767691  34:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:48:49.767691  35:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:48:49.767691  36:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:48:49.767691  37:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:48:49.767691  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:48:49.767691  39:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:48:49.767691  40:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:48:49.767691  41:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:48:49.767691  42:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:48:49.767691  43:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:48:49.767691  44:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:48:49.767691  45:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:48:49.767691  46:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:48:49.767691  47:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:48:49.767691  48:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:48:49.767691  49:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:48:49.767691  50:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:48:49.767691  51:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:48:49.767691  52:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:48:49.767691  53:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:48:49.767691  54:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:48:49.767691  55:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:48:49.767691  56:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:48:49.768211  57:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:48:49.768232  58:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:48:49.768232  59:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:48:49.768232  60:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:48:49.768232  61:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:48:49.768232  62:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:48:49.768232  63:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:48:49.768232  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:48:49.768232  65:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:48:49.768232  66:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:48:49.768232  67:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:48:49.768232  68:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:48:49.768232  69:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:48:49.768232  70:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:48:49.768232  71:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:48:49.768232  72:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:48:49.768232  73:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:48:49.768232  74:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:48:49.768232  75:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:48:49.768232  76:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:48:49.768232  77:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:48:49.768232  78:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:48:49.768232  79:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:48:49.768232  80:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:48:49.768232  81:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:48:49.768232  82:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:48:49.768232  83:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:48:49.768232  84:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:48:49.768232  85:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:48:49.768232  86:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:48:49.768232  87:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:48:49.768232  88:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:48:49.768232  89:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:48:49.768232  90:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:48:49.768232  91:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:48:49.768232  92:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:48:49.768232  93:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:48:49.768232  94:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:48:49.768232  95:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:48:49.768232  96:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:48:49.768232  97:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:48:49.768232  98:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:48:49.768232  99:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:48:49.768232 100:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:48:49.768232 101:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:48:49.768232 102:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:48:49.768232 103:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:48:49.768232 104:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:48:49.768232 105:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:48:49.768232 106:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:48:49.768232 107:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:48:49.768232 108:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:48:49.768232 109:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:48:49.768232 110:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:48:49.768232 111:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:48:49.768232 112:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:48:49.768232 113:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:48:49.768232 114:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:48:49.768232 115:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:48:49.768232 116:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:48:49.768232 117:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:48:49.768232 118:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:48:49.768232 119:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:48:49.768232 120:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:48:49.768232 121:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:48:49.768232 122:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:48:49.768760 123:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:48:49.768760 124:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:48:49.768760 125:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:48:49.768760 126:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:48:49.768760 127: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:48:49.768760 128: Те                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:121                          
17:48:49.768760 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@10)[0m
17:48:49.768760 [92m                 textDocument/didChange:             > 128:3-128:4 -> ""[0m
17:48:49.768760 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:48:49.768760 OUT Elapsed: 0s
17:48:49.768760 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:48:49.768760 IN Elapsed: 0s
17:48:49.768760 [92mIDE --> LS REQU textDocument/documentSymbol 29[0m
17:48:49.768760 [92m                textDocument/documentSymbol 29: [93mread-locked[0m[0m
17:48:49.768760 [92m                textDocument/documentSymbol 29: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:49.768760 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 26[0m
17:48:49.768760 OUT Elapsed: 0s
17:48:49.837656 IN Elapsed: 82.1752ms
17:48:49.837656 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 26[0m
17:48:49.838208 [92m                textDocument/documentSymbol 29: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:49.838208 [92m                textDocument/documentSymbol 29:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:49.839292 [92m                textDocument/documentSymbol 29: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:49.839839 IN Elapsed: 2.1831ms
17:48:49.839839 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:49.839839 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:49.839839 [92m                textDocument/documentSymbol 29: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:49.839839 [92m                textDocument/documentSymbol 29: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.839839 [92m                textDocument/documentSymbol 29:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:49.840970 [92m                textDocument/documentSymbol 29: Range is in PREPROCESSED section of the sketch[0m
17:48:49.840970 [92m                textDocument/documentSymbol 29: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:49.840970 [92m                textDocument/documentSymbol 29:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.840970 [92m                textDocument/documentSymbol 29:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:49.841504 [92m                textDocument/documentSymbol 29: Range is in PREPROCESSED section of the sketch[0m
17:48:49.842042 [92m                textDocument/documentSymbol 29: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:49.842042 [92m                textDocument/documentSymbol 29:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.842042 [92m                textDocument/documentSymbol 29:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:49.842571 [92m                textDocument/documentSymbol 29: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:49.843613 [92m                textDocument/documentSymbol 29: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:49.843613 [92m                textDocument/documentSymbol 29: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.843613 [92m                textDocument/documentSymbol 29:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:49.844142 [92m                textDocument/documentSymbol 29: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:49.845192 [92m                textDocument/documentSymbol 29: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:49.845192 [92m                textDocument/documentSymbol 29: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.845192 [92m                textDocument/documentSymbol 29: [93mread-unlocked[0m[0m
17:48:49.845192 [32mIDE <-- LS RESP textDocument/documentSymbol 29[0m
17:48:49.845192 OUT Elapsed: 0s
17:48:49.845192 IN Elapsed: 0s
17:48:49.930372 IN Elapsed: 85.1799ms
17:48:49.930372 [92mIDE --> LS REQU textDocument/documentSymbol 30[0m
17:48:49.930372 [92m                textDocument/documentSymbol 30: [93mread-locked[0m[0m
17:48:49.930924 [92m                textDocument/documentSymbol 30: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:49.930924 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 27[0m
17:48:49.930924 OUT Elapsed: 0s
17:48:49.931494 IN Elapsed: 91.6545ms
17:48:49.932054 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 27[0m
17:48:49.932054 [92m                textDocument/documentSymbol 30: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:49.932054 [92m                textDocument/documentSymbol 30:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:49.933669 [92m                textDocument/documentSymbol 30: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:49.934795 [92m                textDocument/documentSymbol 30: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:49.934795 [92m                textDocument/documentSymbol 30: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.934795 [92m                textDocument/documentSymbol 30:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:49.935859 [92m                textDocument/documentSymbol 30: Range is in PREPROCESSED section of the sketch[0m
17:48:49.935859 [92m                textDocument/documentSymbol 30: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:49.935859 [92m                textDocument/documentSymbol 30:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.935859 [92m                textDocument/documentSymbol 30:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:49.936390 [92m                textDocument/documentSymbol 30: Range is in PREPROCESSED section of the sketch[0m
17:48:49.936390 [92m                textDocument/documentSymbol 30: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:49.936390 [92m                textDocument/documentSymbol 30:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:49.936390 [92m                textDocument/documentSymbol 30:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:49.937436 [92m                textDocument/documentSymbol 30: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:49.937965 [92m                textDocument/documentSymbol 30: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:49.937965 [92m                textDocument/documentSymbol 30: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.937965 [92m                textDocument/documentSymbol 30:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:49.939011 [92m                textDocument/documentSymbol 30: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:49.940066 [92m                textDocument/documentSymbol 30: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:49.940066 [92m                textDocument/documentSymbol 30: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:49.940066 [92m                textDocument/documentSymbol 30: [93mread-unlocked[0m[0m
17:48:49.940066 [32mIDE <-- LS RESP textDocument/documentSymbol 30[0m
17:48:49.940066 OUT Elapsed: 0s
17:48:49.940066 IN Elapsed: 0s
17:48:49.940066 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:48:49.940066 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:48:49.940066 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@10)[0m
17:48:49.940066 [92m                 textDocument/didChange:   > 121:2-121:3 (len=1) -> ""[0m
17:48:49.940066 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

#include "OneWire.h"
 
// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
Т
-----------------------------[0m
17:48:49.940594 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:49.941691 Ino Range: 121:2-121:3 -> Cpp Range:128:2-128:3
17:48:49.941691   > Current sketchmapper content:
17:48:49.941691   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:48:49.941691   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:48:49.941691   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:48:49.941691   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:48:49.941691   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:48:49.941691   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:48:49.941691   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:48:49.941691   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:48:49.941691   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:48:49.941691   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:48:49.941691  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:48:49.941691  11: #include "OneWire.h"                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:48:49.941691  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:48:49.941691  13: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:48:49.941691  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:48:49.941691  15: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:48:49.942198  16: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:48:49.942208  17: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:48:49.942225  18: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:48:49.942225  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:48:49.942225  20: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:48:49.942225  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:48:49.942225  22: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:49.942225  23: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20 D:\Arduino_GitHub\Termometer\Termometer.ino:20
17:48:49.942225  24: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:49.942225  25: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24 D:\Arduino_GitHub\Termometer\Termometer.ino:24
17:48:49.942225  26: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:49.942225  27: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:48:49.942225  28:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:48:49.942225  29: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:48:49.942225  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:48:49.942225  31: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:48:49.942225  32:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:48:49.942225  33:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:48:49.942225  34:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:48:49.942225  35:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:48:49.942225  36:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:48:49.942225  37:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:48:49.942225  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:48:49.942225  39:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:48:49.942225  40:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:48:49.942225  41:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:48:49.942225  42:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:48:49.942225  43:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:48:49.942225  44:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:48:49.942225  45:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:48:49.942225  46:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:48:49.942225  47:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:48:49.942225  48:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:48:49.942225  49:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:48:49.942225  50:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:48:49.942225  51:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:48:49.942225  52:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:48:49.942225  53:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:48:49.942225  54:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:48:49.942225  55:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:48:49.942225  56:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:48:49.942225  57:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:48:49.942225  58:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:48:49.942225  59:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:48:49.942225  60:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:48:49.942225  61:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:48:49.942225  62:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:48:49.942225  63:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:48:49.942225  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:48:49.942225  65:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:48:49.942225  66:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:48:49.942225  67:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:48:49.942225  68:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:48:49.942225  69:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:48:49.942225  70:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:48:49.942225  71:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:48:49.942225  72:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:48:49.942225  73:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:48:49.942225  74:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:48:49.942225  75:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:48:49.942225  76:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:48:49.942225  77:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:48:49.942225  78:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:48:49.942225  79:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:48:49.942225  80:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:48:49.942225  81:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:48:49.942225  82:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:48:49.942225  83:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:48:49.942225  84:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:48:49.942225  85:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:48:49.942225  86:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:48:49.942225  87:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:48:49.942731  88:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:48:49.942739  89:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:48:49.942754  90:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:48:49.942754  91:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:48:49.942754  92:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:48:49.942754  93:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:48:49.942754  94:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:48:49.942754  95:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:48:49.942754  96:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:48:49.942754  97:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:48:49.942754  98:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:48:49.942754  99:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:48:49.942754 100:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:48:49.942754 101:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:48:49.942754 102:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:48:49.942754 103:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:48:49.942754 104:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:48:49.942754 105:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:48:49.942754 106:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:48:49.942754 107:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:48:49.942754 108:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:48:49.942754 109:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:48:49.942754 110:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:48:49.942754 111:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:48:49.942754 112:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:48:49.942754 113:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:48:49.942754 114:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:48:49.942754 115:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:48:49.942754 116:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:48:49.942754 117:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:48:49.942754 118:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:48:49.942754 119:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:48:49.942754 120:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:48:49.942754 121:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:48:49.942754 122:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:48:49.942754 123:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:48:49.942754 124:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:48:49.942754 125:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:48:49.942754 126:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:48:49.942754 127: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:48:49.942754 128: Т                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:121                          
17:48:49.942754 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@11)[0m
17:48:49.942754 [92m                 textDocument/didChange:             > 128:2-128:3 -> ""[0m
17:48:49.942754 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:48:49.942754 OUT Elapsed: 0s
17:48:49.942754 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:48:49.942754 IN Elapsed: 0s
17:48:49.942754 [92mIDE --> LS REQU textDocument/documentSymbol 31[0m
17:48:49.942754 [92m                textDocument/documentSymbol 31: [93mread-locked[0m[0m
17:48:49.943294 [92m                textDocument/documentSymbol 31: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:49.943294 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 28[0m
17:48:49.943294 OUT Elapsed: 0s
17:48:50.010728 IN Elapsed: 78.6737ms
17:48:50.010728 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 28[0m
17:48:50.010728 [92m                textDocument/documentSymbol 31: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:50.010728 [92m                textDocument/documentSymbol 31:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:50.011836 [92m                textDocument/documentSymbol 31: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:50.013482 IN Elapsed: 2.7544ms
17:48:50.013482 [92m                textDocument/documentSymbol 31: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:50.013482 [92m                textDocument/documentSymbol 31: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.013482 [92m                textDocument/documentSymbol 31:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:50.013482 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:50.014060 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:50.014665 [92m                textDocument/documentSymbol 31: Range is in PREPROCESSED section of the sketch[0m
17:48:50.014665 [92m                textDocument/documentSymbol 31: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:50.014665 [92m                textDocument/documentSymbol 31:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:50.014665 [92m                textDocument/documentSymbol 31:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:50.015766 [92m                textDocument/documentSymbol 31: Range is in PREPROCESSED section of the sketch[0m
17:48:50.015766 [92m                textDocument/documentSymbol 31: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:50.015766 [92m                textDocument/documentSymbol 31:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:50.015766 [92m                textDocument/documentSymbol 31:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:50.016843 [92m                textDocument/documentSymbol 31: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:50.017384 [92m                textDocument/documentSymbol 31: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:50.017384 [92m                textDocument/documentSymbol 31: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.017384 [92m                textDocument/documentSymbol 31:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:50.018455 [92m                textDocument/documentSymbol 31: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:50.018978 [92m                textDocument/documentSymbol 31: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:50.018978 [92m                textDocument/documentSymbol 31: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.019500 [92m                textDocument/documentSymbol 31: [93mread-unlocked[0m[0m
17:48:50.019500 [32mIDE <-- LS RESP textDocument/documentSymbol 31[0m
17:48:50.019500 OUT Elapsed: 0s
17:48:50.019500 IN Elapsed: 0s
17:48:50.088427 IN Elapsed: 68.9266ms
17:48:50.088937 [92mIDE --> LS REQU textDocument/documentSymbol 32[0m
17:48:50.088990 [92m                textDocument/documentSymbol 32: [93mread-locked[0m[0m
17:48:50.089327 [92m                textDocument/documentSymbol 32: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:50.089327 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 29[0m
17:48:50.089327 OUT Elapsed: 0s
17:48:50.090634 IN Elapsed: 76.5741ms
17:48:50.090634 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 29[0m
17:48:50.091218 [92m                textDocument/documentSymbol 32: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:50.091218 [92m                textDocument/documentSymbol 32:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:50.092277 [92m                textDocument/documentSymbol 32: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:50.092816 [92m                textDocument/documentSymbol 32: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:50.092816 [92m                textDocument/documentSymbol 32: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.092816 [92m                textDocument/documentSymbol 32:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:50.093878 [92m                textDocument/documentSymbol 32: Range is in PREPROCESSED section of the sketch[0m
17:48:50.093878 [92m                textDocument/documentSymbol 32: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:50.093878 [92m                textDocument/documentSymbol 32:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:50.093878 [92m                textDocument/documentSymbol 32:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:50.094958 [92m                textDocument/documentSymbol 32: Range is in PREPROCESSED section of the sketch[0m
17:48:50.094958 [92m                textDocument/documentSymbol 32: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:50.094958 [92m                textDocument/documentSymbol 32:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:50.094958 [92m                textDocument/documentSymbol 32:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:50.096709 [92m                textDocument/documentSymbol 32: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:50.097806 [92m                textDocument/documentSymbol 32: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:50.097806 [92m                textDocument/documentSymbol 32: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.098315 [92m                textDocument/documentSymbol 32:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:50.098889 [92m                textDocument/documentSymbol 32: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:50.099968 [92m                textDocument/documentSymbol 32: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:50.099968 [92m                textDocument/documentSymbol 32: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.099968 [92m                textDocument/documentSymbol 32: [93mread-unlocked[0m[0m
17:48:50.099968 [32mIDE <-- LS RESP textDocument/documentSymbol 32[0m
17:48:50.100497 OUT Elapsed: 528.7µs
17:48:50.100497 IN Elapsed: 0s
17:48:50.100525 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:48:50.100525 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:48:50.100525 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@11)[0m
17:48:50.100525 [92m                 textDocument/didChange:   > 121:1-121:2 (len=1) -> ""[0m
17:48:50.100525 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

#include "OneWire.h"
 
// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
Т
-----------------------------[0m
17:48:50.101046 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:50.102205 Ino Range: 121:1-121:2 -> Cpp Range:128:1-128:2
17:48:50.102205   > Current sketchmapper content:
17:48:50.102205   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:48:50.102205   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:48:50.102205   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:48:50.102205   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:48:50.102205   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:48:50.102205   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:48:50.102205   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:48:50.102205   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:48:50.102205   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:48:50.102719   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:48:50.102737  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:48:50.102737  11: #include "OneWire.h"                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:48:50.102771  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:48:50.102771  13: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:48:50.102771  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:48:50.102771  15: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:48:50.102771  16: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:48:50.102771  17: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:48:50.102771  18: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:48:50.102771  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:48:50.102771  20: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:48:50.102771  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:48:50.102771  22: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:50.102771  23: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20 D:\Arduino_GitHub\Termometer\Termometer.ino:20
17:48:50.102771  24: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:50.102771  25: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24 D:\Arduino_GitHub\Termometer\Termometer.ino:24
17:48:50.102771  26: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:50.102771  27: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:48:50.102771  28:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:48:50.102771  29: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:48:50.102771  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:48:50.102771  31: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:48:50.102771  32:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:48:50.102771  33:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:48:50.102771  34:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:48:50.102771  35:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:48:50.102771  36:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:48:50.102771  37:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:48:50.102771  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:48:50.102771  39:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:48:50.102771  40:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:48:50.102771  41:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:48:50.102771  42:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:48:50.102771  43:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:48:50.102771  44:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:48:50.102771  45:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:48:50.102771  46:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:48:50.102771  47:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:48:50.102771  48:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:48:50.102771  49:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:48:50.102771  50:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:48:50.102771  51:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:48:50.102771  52:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:48:50.102771  53:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:48:50.102771  54:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:48:50.102771  55:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:48:50.103305  56:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:48:50.103305  57:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:48:50.103305  58:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:48:50.103305  59:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:48:50.103305  60:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:48:50.103305  61:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:48:50.103305  62:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:48:50.103305  63:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:48:50.103305  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:48:50.103305  65:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:48:50.103305  66:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:48:50.103305  67:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:48:50.103305  68:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:48:50.103305  69:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:48:50.103305  70:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:48:50.103305  71:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:48:50.103305  72:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:48:50.103305  73:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:48:50.103305  74:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:48:50.103305  75:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:48:50.103305  76:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:48:50.103305  77:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:48:50.103305  78:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:48:50.103305  79:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:48:50.103305  80:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:48:50.103305  81:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:48:50.103305  82:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:48:50.103305  83:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:48:50.103305  84:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:48:50.103305  85:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:48:50.103305  86:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:48:50.103305  87:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:48:50.103305  88:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:48:50.103305  89:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:48:50.103305  90:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:48:50.103305  91:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:48:50.103305  92:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:48:50.103305  93:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:48:50.103305  94:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:48:50.103305  95:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:48:50.103305  96:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:48:50.103305  97:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:48:50.103305  98:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:48:50.103305  99:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:48:50.103305 100:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:48:50.103305 101:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:48:50.103305 102:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:48:50.103305 103:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:48:50.103305 104:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:48:50.103305 105:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:48:50.103305 106:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:48:50.103305 107:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:48:50.103305 108:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:48:50.103305 109:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:48:50.103813 110:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:48:50.103825 111:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:48:50.103825 112:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:48:50.103825 113:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:48:50.103825 114:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:48:50.103825 115:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:48:50.103825 116:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:48:50.103825 117:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:48:50.103825 118:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:48:50.103825 119:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:48:50.103825 120:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:48:50.103825 121:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:48:50.103825 122:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:48:50.103825 123:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:48:50.103825 124:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:48:50.103825 125:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:48:50.103825 126:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:48:50.103825 127: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:48:50.103825 128: Т                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:121                          
17:48:50.103825 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@12)[0m
17:48:50.103825 [92m                 textDocument/didChange:             > 128:1-128:2 -> ""[0m
17:48:50.103825 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:48:50.103825 OUT Elapsed: 0s
17:48:50.103825 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:48:50.103825 IN Elapsed: 0s
17:48:50.103825 [92mIDE --> LS REQU textDocument/documentSymbol 33[0m
17:48:50.103825 [92m                textDocument/documentSymbol 33: [93mread-locked[0m[0m
17:48:50.104412 [92m                textDocument/documentSymbol 33: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:50.104519 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 30[0m
17:48:50.104519 OUT Elapsed: 0s
17:48:50.172533 IN Elapsed: 81.8983ms
17:48:50.172533 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 30[0m
17:48:50.173062 [92m                textDocument/documentSymbol 33: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:50.173062 [92m                textDocument/documentSymbol 33:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:50.174125 [92m                textDocument/documentSymbol 33: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:50.174665 IN Elapsed: 2.1323ms
17:48:50.174665 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:50.174665 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:50.174665 [92m                textDocument/documentSymbol 33: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:50.175209 [92m                textDocument/documentSymbol 33: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.175209 [92m                textDocument/documentSymbol 33:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:50.175745 [92m                textDocument/documentSymbol 33: Range is in PREPROCESSED section of the sketch[0m
17:48:50.175745 [92m                textDocument/documentSymbol 33: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:50.175745 [92m                textDocument/documentSymbol 33:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:50.175745 [92m                textDocument/documentSymbol 33:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:50.176802 [92m                textDocument/documentSymbol 33: Range is in PREPROCESSED section of the sketch[0m
17:48:50.176802 [92m                textDocument/documentSymbol 33: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:50.176802 [92m                textDocument/documentSymbol 33:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:50.176802 [92m                textDocument/documentSymbol 33:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:50.177333 [92m                textDocument/documentSymbol 33: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:50.178397 [92m                textDocument/documentSymbol 33: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:50.178397 [92m                textDocument/documentSymbol 33: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.178397 [92m                textDocument/documentSymbol 33:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:50.180493 [92m                textDocument/documentSymbol 33: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:50.181620 [92m                textDocument/documentSymbol 33: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:50.181620 [92m                textDocument/documentSymbol 33: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.181620 [92m                textDocument/documentSymbol 33: [93mread-unlocked[0m[0m
17:48:50.181620 [32mIDE <-- LS RESP textDocument/documentSymbol 33[0m
17:48:50.181620 OUT Elapsed: 0s
17:48:50.182133 IN Elapsed: 512.4µs
17:48:50.339705 IN Elapsed: 157.5376ms
17:48:50.339705 [92mIDE --> LS REQU textDocument/codeAction 34[0m
17:48:50.339705 [92m                textDocument/codeAction 34: [93mread-locked[0m[0m
17:48:50.339705 [92m                textDocument/codeAction 34: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:121:1)[0m
17:48:50.339705 [92m                textDocument/codeAction 34: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:50.341327 [92m                textDocument/codeAction 34:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:121:1)[0m
17:48:50.341327 [91mIDE     LS --> Clangd REQU textDocument/codeAction 31[0m
17:48:50.341327 OUT Elapsed: 0s
17:48:50.341327 IN Elapsed: 166.6618ms
17:48:50.341857 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 31[0m
17:48:50.341857 [92m                textDocument/codeAction 34: [93mread-unlocked[0m[0m
17:48:50.341857 [32mIDE <-- LS RESP textDocument/codeAction 34[0m
17:48:50.341962 OUT Elapsed: 0s
17:48:50.472554 IN Elapsed: 130.5922ms
17:48:50.472554 [92mIDE --> LS REQU textDocument/documentSymbol 35[0m
17:48:50.472554 [92m                textDocument/documentSymbol 35: [93mread-locked[0m[0m
17:48:50.473106 [92m                textDocument/documentSymbol 35: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:50.473106 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 32[0m
17:48:50.473106 OUT Elapsed: 0s
17:48:50.473634 IN Elapsed: 131.7768ms
17:48:50.473634 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 32[0m
17:48:50.474173 [92m                textDocument/documentSymbol 35: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:50.474211 [92m                textDocument/documentSymbol 35:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:50.474752 [92m                textDocument/documentSymbol 35: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:50.475819 [92m                textDocument/documentSymbol 35: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:50.475819 [92m                textDocument/documentSymbol 35: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.475819 [92m                textDocument/documentSymbol 35:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:50.476869 [92m                textDocument/documentSymbol 35: Range is in PREPROCESSED section of the sketch[0m
17:48:50.476869 [92m                textDocument/documentSymbol 35: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:50.476869 [92m                textDocument/documentSymbol 35:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:50.476869 [92m                textDocument/documentSymbol 35:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:50.477462 [92m                textDocument/documentSymbol 35: Range is in PREPROCESSED section of the sketch[0m
17:48:50.477462 [92m                textDocument/documentSymbol 35: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:50.477462 [92m                textDocument/documentSymbol 35:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:50.477462 [92m                textDocument/documentSymbol 35:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:50.478534 [92m                textDocument/documentSymbol 35: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:50.479635 [92m                textDocument/documentSymbol 35: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:50.479635 [92m                textDocument/documentSymbol 35: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.480173 [92m                textDocument/documentSymbol 35:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:50.482589 [92m                textDocument/documentSymbol 35: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:50.483655 [92m                textDocument/documentSymbol 35: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:50.483655 [92m                textDocument/documentSymbol 35: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.483655 [92m                textDocument/documentSymbol 35: [93mread-unlocked[0m[0m
17:48:50.483655 [32mIDE <-- LS RESP textDocument/documentSymbol 35[0m
17:48:50.483655 OUT Elapsed: 0s
17:48:50.483655 IN Elapsed: 0s
17:48:50.483655 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:48:50.483655 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:48:50.483655 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@12)[0m
17:48:50.483655 [92m                 textDocument/didChange:   > 121:0-121:1 (len=1) -> ""[0m
17:48:50.484197 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

#include "OneWire.h"
 
// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}

-----------------------------[0m
17:48:50.484197 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:50.485845 Ino Range: 121:0-121:1 -> Cpp Range:128:0-128:1
17:48:50.485845   > Current sketchmapper content:
17:48:50.485845   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:48:50.485845   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:48:50.485845   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:48:50.485845   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:48:50.486386   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:48:50.486386   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:48:50.486386   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:48:50.486386   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:48:50.486386   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:48:50.486386   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:48:50.486386  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:48:50.486386  11: #include "OneWire.h"                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:48:50.486386  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:48:50.486386  13: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:48:50.486386  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:48:50.486386  15: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:48:50.486386  16: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:48:50.486386  17: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:48:50.486386  18: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:48:50.486386  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:48:50.486386  20: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:48:50.486386  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:48:50.486386  22: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:50.486386  23: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20 D:\Arduino_GitHub\Termometer\Termometer.ino:20
17:48:50.486386  24: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:50.486386  25: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24 D:\Arduino_GitHub\Termometer\Termometer.ino:24
17:48:50.486386  26: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:50.486386  27: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:48:50.486386  28:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:48:50.486386  29: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:48:50.486386  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:48:50.486386  31: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:48:50.486386  32:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:48:50.486386  33:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:48:50.486386  34:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:48:50.486386  35:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:48:50.486386  36:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:48:50.486386  37:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:48:50.486386  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:48:50.486386  39:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:48:50.486386  40:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:48:50.486386  41:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:48:50.486386  42:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:48:50.486386  43:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:48:50.486386  44:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:48:50.486386  45:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:48:50.486386  46:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:48:50.486386  47:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:48:50.486386  48:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:48:50.486386  49:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:48:50.486386  50:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:48:50.486386  51:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:48:50.486386  52:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:48:50.486386  53:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:48:50.486386  54:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:48:50.486386  55:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:48:50.486386  56:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:48:50.486386  57:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:48:50.486386  58:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:48:50.486386  59:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:48:50.486386  60:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:48:50.486386  61:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:48:50.486386  62:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:48:50.486386  63:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:48:50.486914  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:48:50.486914  65:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:48:50.486914  66:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:48:50.486914  67:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:48:50.486914  68:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:48:50.486914  69:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:48:50.486914  70:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:48:50.486914  71:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:48:50.486914  72:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:48:50.486914  73:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:48:50.486914  74:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:48:50.486914  75:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:48:50.486914  76:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:48:50.486914  77:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:48:50.486914  78:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:48:50.486914  79:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:48:50.486914  80:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:48:50.486914  81:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:48:50.486914  82:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:48:50.486914  83:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:48:50.486914  84:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:48:50.486914  85:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:48:50.486914  86:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:48:50.486914  87:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:48:50.486914  88:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:48:50.486914  89:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:48:50.486914  90:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:48:50.486914  91:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:48:50.486914  92:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:48:50.486914  93:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:48:50.486914  94:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:48:50.486914  95:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:48:50.486914  96:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:48:50.486914  97:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:48:50.486914  98:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:48:50.486914  99:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:48:50.486914 100:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:48:50.486914 101:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:48:50.486914 102:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:48:50.486914 103:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:48:50.486914 104:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:48:50.486914 105:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:48:50.486914 106:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:48:50.486914 107:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:48:50.486914 108:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:48:50.486914 109:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:48:50.486914 110:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:48:50.486914 111:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:48:50.486914 112:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:48:50.486914 113:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:48:50.486914 114:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:48:50.486914 115:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:48:50.486914 116:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:48:50.486914 117:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:48:50.486914 118:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:48:50.486914 119:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:48:50.486914 120:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:48:50.486914 121:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:48:50.486914 122:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:48:50.486914 123:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:48:50.486914 124:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:48:50.486914 125:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:48:50.486914 126:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:48:50.486914 127: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:48:50.486914 128:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:121                          
17:48:50.487443 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@13)[0m
17:48:50.487443 [92m                 textDocument/didChange:             > 128:0-128:1 -> ""[0m
17:48:50.487443 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:48:50.487443 OUT Elapsed: 0s
17:48:50.487443 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:48:50.487443 IN Elapsed: 0s
17:48:50.487443 [92mIDE --> LS REQU textDocument/documentSymbol 36[0m
17:48:50.487443 [92m                textDocument/documentSymbol 36: [93mread-locked[0m[0m
17:48:50.487443 [92m                textDocument/documentSymbol 36: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:50.487443 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 33[0m
17:48:50.487443 OUT Elapsed: 0s
17:48:50.569117 IN Elapsed: 95.4831ms
17:48:50.569653 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 33[0m
17:48:50.569779 [92m                textDocument/documentSymbol 36: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:50.569779 [92m                textDocument/documentSymbol 36:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:50.570896 [92m                textDocument/documentSymbol 36: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:50.571998 [92m                textDocument/documentSymbol 36: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:50.571998 [92m                textDocument/documentSymbol 36: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.571998 [92m                textDocument/documentSymbol 36:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:50.571998 IN Elapsed: 2.3456ms
17:48:50.572512 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:50.572551 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:50.573108 [92m                textDocument/documentSymbol 36: Range is in PREPROCESSED section of the sketch[0m
17:48:50.573108 [92m                textDocument/documentSymbol 36: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:50.573108 [92m                textDocument/documentSymbol 36:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:50.573108 [92m                textDocument/documentSymbol 36:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:50.574217 [92m                textDocument/documentSymbol 36: Range is in PREPROCESSED section of the sketch[0m
17:48:50.574217 [92m                textDocument/documentSymbol 36: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:50.574217 [92m                textDocument/documentSymbol 36:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:50.574217 [92m                textDocument/documentSymbol 36:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:50.575324 [92m                textDocument/documentSymbol 36: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:50.576418 [92m                textDocument/documentSymbol 36: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:50.576418 [92m                textDocument/documentSymbol 36: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.576418 [92m                textDocument/documentSymbol 36:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:50.576968 [92m                textDocument/documentSymbol 36: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:50.578066 [92m                textDocument/documentSymbol 36: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:50.578594 [92m                textDocument/documentSymbol 36: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.578623 [92m                textDocument/documentSymbol 36: [93mread-unlocked[0m[0m
17:48:50.578623 [32mIDE <-- LS RESP textDocument/documentSymbol 36[0m
17:48:50.578623 OUT Elapsed: 0s
17:48:50.578623 IN Elapsed: 0s
17:48:50.856024 IN Elapsed: 277.4011ms
17:48:50.856104 [92mIDE --> LS REQU textDocument/documentSymbol 37[0m
17:48:50.856104 [92m                textDocument/documentSymbol 37: [93mread-locked[0m[0m
17:48:50.856104 [92m                textDocument/documentSymbol 37: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:50.856104 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 34[0m
17:48:50.856648 OUT Elapsed: 522.8µs
17:48:50.857185 IN Elapsed: 284.6348ms
17:48:50.857185 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 34[0m
17:48:50.857185 [92m                textDocument/documentSymbol 37: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:50.857185 [92m                textDocument/documentSymbol 37:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:50.858254 [92m                textDocument/documentSymbol 37: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:50.859312 [92m                textDocument/documentSymbol 37: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:50.859312 [92m                textDocument/documentSymbol 37: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.859312 [92m                textDocument/documentSymbol 37:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:50.859841 [92m                textDocument/documentSymbol 37: Range is in PREPROCESSED section of the sketch[0m
17:48:50.859841 [92m                textDocument/documentSymbol 37: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:50.859841 [92m                textDocument/documentSymbol 37:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:50.859841 [92m                textDocument/documentSymbol 37:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:50.860903 [92m                textDocument/documentSymbol 37: Range is in PREPROCESSED section of the sketch[0m
17:48:50.860903 [92m                textDocument/documentSymbol 37: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:50.860903 [92m                textDocument/documentSymbol 37:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:50.860903 [92m                textDocument/documentSymbol 37:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:50.861437 [92m                textDocument/documentSymbol 37: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:50.863101 [92m                textDocument/documentSymbol 37: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:50.863101 [92m                textDocument/documentSymbol 37: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.863101 [92m                textDocument/documentSymbol 37:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:50.864265 [92m                textDocument/documentSymbol 37: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:50.865369 [92m                textDocument/documentSymbol 37: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:50.865369 [92m                textDocument/documentSymbol 37: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.865369 [92m                textDocument/documentSymbol 37: [93mread-unlocked[0m[0m
17:48:50.865369 [32mIDE <-- LS RESP textDocument/documentSymbol 37[0m
17:48:50.865369 OUT Elapsed: 0s
17:48:50.865369 IN Elapsed: 0s
17:48:50.865369 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:48:50.865924 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:48:50.865924 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@13)[0m
17:48:50.865924 [92m                 textDocument/didChange:   > 120:1-121:0 (len=2) -> ""[0m
17:48:50.865924 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

#include "OneWire.h"
 
// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
-----------------------------[0m
17:48:50.866454 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:50.868122 Ino Range: 120:1-121:0 -> Cpp Range:127:1-128:0
17:48:50.868122   > Current sketchmapper content:
17:48:50.868122   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:48:50.868122   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:48:50.868122   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:48:50.868122   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:48:50.868122   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:48:50.868122   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:48:50.868122   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:48:50.868122   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:48:50.868122   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:48:50.868122   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:48:50.868122  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:48:50.868122  11: #include "OneWire.h"                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:48:50.868122  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:48:50.868122  13: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:48:50.868122  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:48:50.868122  15: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:48:50.868122  16: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:48:50.868122  17: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:48:50.868122  18: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:48:50.868122  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:48:50.868122  20: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:48:50.868122  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:48:50.868122  22: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:50.868122  23: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20 D:\Arduino_GitHub\Termometer\Termometer.ino:20
17:48:50.868122  24: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:50.868122  25: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24 D:\Arduino_GitHub\Termometer\Termometer.ino:24
17:48:50.868122  26: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:50.868122  27: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:48:50.868122  28:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:48:50.868122  29: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:48:50.868122  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:48:50.868122  31: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:48:50.868122  32:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:48:50.868122  33:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:48:50.868122  34:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:48:50.868122  35:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:48:50.868122  36:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:48:50.868122  37:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:48:50.868122  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:48:50.868122  39:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:48:50.868122  40:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:48:50.868122  41:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:48:50.868122  42:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:48:50.868122  43:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:48:50.868122  44:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:48:50.868122  45:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:48:50.868122  46:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:48:50.868122  47:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:48:50.868629  48:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:48:50.868644  49:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:48:50.868644  50:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:48:50.868644  51:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:48:50.868644  52:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:48:50.868644  53:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:48:50.868644  54:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:48:50.868644  55:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:48:50.868644  56:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:48:50.868644  57:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:48:50.868644  58:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:48:50.868644  59:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:48:50.868644  60:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:48:50.868644  61:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:48:50.868644  62:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:48:50.868644  63:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:48:50.868644  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:48:50.868644  65:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:48:50.868644  66:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:48:50.868644  67:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:48:50.868644  68:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:48:50.868644  69:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:48:50.868644  70:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:48:50.868644  71:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:48:50.868644  72:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:48:50.868644  73:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:48:50.868644  74:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:48:50.868644  75:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:48:50.868644  76:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:48:50.868644  77:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:48:50.868644  78:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:48:50.868644  79:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:48:50.868644  80:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:48:50.868644  81:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:48:50.868644  82:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:48:50.868644  83:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:48:50.868644  84:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:48:50.868644  85:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:48:50.868644  86:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:48:50.868644  87:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:48:50.868644  88:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:48:50.868644  89:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:48:50.868644  90:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:48:50.868644  91:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:48:50.868644  92:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:48:50.868644  93:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:48:50.868644  94:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:48:50.868644  95:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:48:50.868644  96:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:48:50.868644  97:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:48:50.868644  98:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:48:50.868644  99:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:48:50.868644 100:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:48:50.868644 101:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:48:50.868644 102:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:48:50.868644 103:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:48:50.868644 104:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:48:50.868644 105:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:48:50.868644 106:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:48:50.868644 107:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:48:50.868644 108:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:48:50.868644 109:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:48:50.868644 110:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:48:50.868644 111:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:48:50.868644 112:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:48:50.868644 113:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:48:50.868644 114:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:48:50.868644 115:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:48:50.869157 116:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:48:50.869203 117:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:48:50.869203 118:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:48:50.869203 119:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:48:50.869203 120:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:48:50.869203 121:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:48:50.869203 122:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:48:50.869203 123:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:48:50.869203 124:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:48:50.869203 125:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:48:50.869203 126:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:48:50.869203 127: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:48:50.869203 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@14)[0m
17:48:50.869203 [92m                 textDocument/didChange:             > 127:1-128:0 -> ""[0m
17:48:50.869203 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:48:50.869203 OUT Elapsed: 0s
17:48:50.869203 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:48:50.869203 IN Elapsed: 0s
17:48:50.869203 [92mIDE --> LS REQU textDocument/documentSymbol 38[0m
17:48:50.869203 [92m                textDocument/documentSymbol 38: [93mread-locked[0m[0m
17:48:50.869203 [92m                textDocument/documentSymbol 38: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:50.869203 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 35[0m
17:48:50.869725 OUT Elapsed: 522.4µs
17:48:50.943918 IN Elapsed: 86.7324ms
17:48:50.943918 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 35[0m
17:48:50.943918 [92m                textDocument/documentSymbol 38: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:48:50.943918 [92m                textDocument/documentSymbol 38:   > convert SymbolKind:Variable 20:0-20:15[0m
17:48:50.945910 [92m                textDocument/documentSymbol 38: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:48:50.946912 IN Elapsed: 2.9942ms
17:48:50.946912 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:50.946912 [92m                textDocument/documentSymbol 38: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:48:50.946912 [92m                textDocument/documentSymbol 38: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.946912 [92m                textDocument/documentSymbol 38:   > convert SymbolKind:Function 23:0-23:16[0m
17:48:50.946912 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:50.947908 [92m                textDocument/documentSymbol 38: Range is in PREPROCESSED section of the sketch[0m
17:48:50.947908 [92m                textDocument/documentSymbol 38: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:48:50.947908 [92m                textDocument/documentSymbol 38:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:50.947908 [92m                textDocument/documentSymbol 38:   > convert SymbolKind:Function 25:0-25:15[0m
17:48:50.948907 [92m                textDocument/documentSymbol 38: Range is in PREPROCESSED section of the sketch[0m
17:48:50.948907 [92m                textDocument/documentSymbol 38: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:48:50.948907 [92m                textDocument/documentSymbol 38:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:48:50.948907 [92m                textDocument/documentSymbol 38:   > convert SymbolKind:Function 27:0-29:1[0m
17:48:50.949906 [92m                textDocument/documentSymbol 38: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:48:50.950906 [92m                textDocument/documentSymbol 38: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:48:50.950906 [92m                textDocument/documentSymbol 38: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.950906 [92m                textDocument/documentSymbol 38:   > convert SymbolKind:Function 31:0-127:1[0m
17:48:50.951906 [92m                textDocument/documentSymbol 38: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:48:50.951906 [92m                textDocument/documentSymbol 38: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:48:50.951906 [92m                textDocument/documentSymbol 38: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:48:50.951906 [92m                textDocument/documentSymbol 38: [93mread-unlocked[0m[0m
17:48:50.951906 [32mIDE <-- LS RESP textDocument/documentSymbol 38[0m
17:48:50.952906 OUT Elapsed: 999.5µs
17:48:50.952906 IN Elapsed: 0s
17:48:51.101242 IN Elapsed: 148.3365ms
17:48:51.101242 [92mIDE --> LS REQU textDocument/codeAction 39[0m
17:48:51.101242 [92m                textDocument/codeAction 39: [93mread-locked[0m[0m
17:48:51.101242 [92m                textDocument/codeAction 39: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:120:1)[0m
17:48:51.101242 [92m                textDocument/codeAction 39: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:51.102832 [92m                textDocument/codeAction 39:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:120:1)[0m
17:48:51.102832 [91mIDE     LS --> Clangd REQU textDocument/codeAction 36[0m
17:48:51.102832 OUT Elapsed: 0s
17:48:51.103349 IN Elapsed: 156.4367ms
17:48:51.103349 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 36[0m
17:48:51.103349 [92m                textDocument/codeAction 39: [93mread-unlocked[0m[0m
17:48:51.103349 [32mIDE <-- LS RESP textDocument/codeAction 39[0m
17:48:51.103349 OUT Elapsed: 0s
17:48:51.872880 [95mSKETCH REBUILD: : Sketch rebuild started[0m
17:48:51.872880 [92mIDE <-- LS REQU window/workDoneProgress/create 4[0m
17:48:51.872880 [95mSKETCH REBUILD: : [93mread-locked[0m[0m
17:48:51.872880 [95mSKETCH REBUILD: : [93mread-unlocked[0m[0m
17:48:51.872880 OUT Elapsed: 0s
17:48:51.873411 IN Elapsed: 770.062ms
17:48:51.873411 [32mIDE --> LS RESP window/workDoneProgress/create 4[0m
17:48:51.873411 [92mIDE <-- LS NOTIF $/progress[0m
17:48:51.873411 OUT Elapsed: 0s
17:48:51.879933 [95mSKETCH REBUILD: : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server2510331829\\build",
  "verbose": true,
  "create_compilation_database_only": true,
  "source_override": {
    "Termometer.ino": "/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include \u003cOneWire.h\u003e\r\n#include \u003cDallasTemperature.h\u003e\r\n\r\n#include \"OneWire.h\"\r\n \r\n// OneWire DS18S20, DS18B20, DS1822 Temperature Example\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// The DallasTemperature library can do all this work for you!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i \u003c 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i \u003c 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] \u003c\u003c 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw \u003c\u003c 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw \u0026 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] \u0026 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw \u0026 ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw \u0026 ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw \u0026 ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}"
  },
  "skip_libraries_discovery": true
}[0m
17:48:51.918752 IN Elapsed: 45.3411ms
17:48:51.919284 [92mIDE --> LS NOTIF textDocument/didSave[0m
17:48:51.919690 [92m                 textDocument/didSave: [93mwrite-locked[0m[0m
17:48:51.919719 [92m                 textDocument/didSave: notification is not forwarded to clang[0m
17:48:51.919719 [92m                 textDocument/didSave: [93mwrite-unlocked[0m[0m
17:48:52.952377 IN Elapsed: 1.032658s
17:48:52.952924 [92mIDE --> LS REQU textDocument/hover 40[0m
17:48:52.952924 [92m                textDocument/hover 40: [93mread-locked[0m[0m
17:48:52.952924 [92m                textDocument/hover 40: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:52.955374 [92m                textDocument/hover 40: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:103:34 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:110:34[0m
17:48:52.955374 [91mIDE     LS --> Clangd REQU textDocument/hover 37[0m
17:48:52.955885 OUT Elapsed: 511.2µs
17:48:52.970988 IN Elapsed: 1.8676396s
17:48:52.970988 [31mIDE     LS <-- Clangd RESP textDocument/hover 37[0m
17:48:52.972067 [92m                textDocument/hover 40: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:110:34-110:38 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:103:34-103:38 (.ino)[0m
17:48:52.972607 [92m                textDocument/hover 40: Hover content: "### variable `data`  \n\n---\nType: `byte[12]`  \n\n---\n```cpp\n// In loop\nbyte data[12]\n```"[0m
17:48:52.972607 [92m                textDocument/hover 40: [93mread-unlocked[0m[0m
17:48:52.972607 [32mIDE <-- LS RESP textDocument/hover 40[0m
17:48:52.972607 OUT Elapsed: 0s
17:48:53.515287 [95mSKETCH REBUILD: : Compile successful![0m
17:48:53.532939 [95mSKETCH REBUILD: : [93mwrite-locked[0m[0m
17:48:53.532939 [95mSKETCH REBUILD: : [93mwrite-unlocked[0m[0m
17:48:53.532939 [95mSKETCH REBUILD: : Error: context canceled[0m
17:48:53.532939 [92mIDE <-- LS NOTIF $/progress[0m
17:48:53.532939 OUT Elapsed: 0s
17:48:54.543343 [95mSKETCH REBUILD: : Sketch rebuild started[0m
17:48:54.543343 [95mSKETCH REBUILD: : [93mread-locked[0m[0m
17:48:54.543343 [92mIDE <-- LS REQU window/workDoneProgress/create 5[0m
17:48:54.543343 [95mSKETCH REBUILD: : [93mread-unlocked[0m[0m
17:48:54.543343 OUT Elapsed: 0s
17:48:54.544061 IN Elapsed: 1.5714539s
17:48:54.544061 [32mIDE --> LS RESP window/workDoneProgress/create 5[0m
17:48:54.544061 [92mIDE <-- LS NOTIF $/progress[0m
17:48:54.544061 OUT Elapsed: 0s
17:48:54.547112 [95mSKETCH REBUILD: : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server2510331829\\build",
  "verbose": true,
  "create_compilation_database_only": true,
  "source_override": {
    "Termometer.ino": "/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include \u003cOneWire.h\u003e\r\n#include \u003cDallasTemperature.h\u003e\r\n\r\n#include \"OneWire.h\"\r\n \r\n// OneWire DS18S20, DS18B20, DS1822 Temperature Example\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// The DallasTemperature library can do all this work for you!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i \u003c 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i \u003c 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] \u003c\u003c 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw \u003c\u003c 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw \u0026 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] \u0026 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw \u0026 ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw \u0026 ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw \u0026 ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}"
  },
  "skip_libraries_discovery": true
}[0m
17:48:56.154294 [95mSKETCH REBUILD: : Compile successful![0m
17:48:56.172375 [95mSKETCH REBUILD: : [93mwrite-locked[0m[0m
17:48:56.173989   > Current sketchmapper content:
17:48:56.173989   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:48:56.173989   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:48:56.173989   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:48:56.173989   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:48:56.173989   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:48:56.173989   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:48:56.173989   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:48:56.173989   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:48:56.173989   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:48:56.173989   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:48:56.173989  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:48:56.173989  11: #include "OneWire.h"                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:48:56.173989  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:48:56.173989  13: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:48:56.173989  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:48:56.173989  15: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:48:56.173989  16: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:48:56.173989  17: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:48:56.173989  18: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:48:56.173989  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:48:56.174501  20: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:48:56.174518  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:48:56.174537  22: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:56.174537  23: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20 D:\Arduino_GitHub\Termometer\Termometer.ino:20
17:48:56.174537  24: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:56.174537  25: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24 D:\Arduino_GitHub\Termometer\Termometer.ino:24
17:48:56.174537  26: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:48:56.174537  27: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:48:56.174537  28:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:48:56.174537  29: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:48:56.174537  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:48:56.174537  31: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:48:56.174537  32:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:48:56.174537  33:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:48:56.174537  34:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:48:56.174537  35:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:48:56.174537  36:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:48:56.174537  37:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:48:56.174537  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:48:56.174537  39:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:48:56.174537  40:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:48:56.174537  41:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:48:56.174537  42:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:48:56.174537  43:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:48:56.174537  44:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:48:56.174537  45:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:48:56.174537  46:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:48:56.174537  47:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:48:56.174537  48:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:48:56.174537  49:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:48:56.174537  50:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:48:56.174537  51:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:48:56.174537  52:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:48:56.174537  53:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:48:56.174537  54:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:48:56.174537  55:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:48:56.174537  56:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:48:56.174537  57:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:48:56.174537  58:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:48:56.174537  59:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:48:56.174537  60:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:48:56.174537  61:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:48:56.174537  62:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:48:56.174537  63:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:48:56.174537  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:48:56.174537  65:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:48:56.174537  66:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:48:56.174537  67:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:48:56.174537  68:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:48:56.174537  69:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:48:56.174537  70:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:48:56.174537  71:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:48:56.174537  72:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:48:56.174537  73:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:48:56.174537  74:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:48:56.174537  75:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:48:56.174537  76:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:48:56.174537  77:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:48:56.174537  78:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:48:56.174537  79:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:48:56.174537  80:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:48:56.174537  81:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:48:56.174537  82:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:48:56.174537  83:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:48:56.174537  84:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:48:56.174537  85:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:48:56.174537  86:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:48:56.174537  87:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:48:56.174537  88:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:48:56.175046  89:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:48:56.175060  90:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:48:56.175079  91:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:48:56.175079  92:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:48:56.175079  93:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:48:56.175079  94:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:48:56.175079  95:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:48:56.175079  96:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:48:56.175079  97:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:48:56.175079  98:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:48:56.175079  99:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:48:56.175079 100:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:48:56.175079 101:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:48:56.175079 102:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:48:56.175079 103:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:48:56.175079 104:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:48:56.175079 105:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:48:56.175079 106:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:48:56.175079 107:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:48:56.175079 108:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:48:56.175079 109:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:48:56.175079 110:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:48:56.175079 111:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:48:56.175079 112:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:48:56.175079 113:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:48:56.175079 114:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:48:56.175079 115:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:48:56.175079 116:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:48:56.175079 117:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:48:56.175079 118:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:48:56.175079 119:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:48:56.175079 120:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:48:56.175079 121:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:48:56.175079 122:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:48:56.175079 123:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:48:56.175079 124:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:48:56.175079 125:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:48:56.175079 126:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:48:56.175079 127: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:48:56.175079 128:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:121                          
17:48:56.175079 [95mSKETCH REBUILD: : Sending 'didSave' notification to Clangd[0m
17:48:56.175079 [91mIDE     LS --> Clangd NOTIF textDocument/didSave[0m
17:48:56.175079 OUT Elapsed: 0s
17:48:56.175079 [95mSKETCH REBUILD: : Sending full-text 'didChange' notification to Clangd[0m
17:48:56.175079 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:48:56.175620 OUT Elapsed: 32.5µs
17:48:56.175620 [95mSKETCH REBUILD: : [93mwrite-unlocked[0m[0m
17:48:56.175620 [92mIDE <-- LS NOTIF $/progress[0m
17:48:56.175620 OUT Elapsed: 0s
17:48:56.255112 IN Elapsed: 3.2841239s
17:48:56.255112 [91mIDE     LS <-- Clangd REQU window/workDoneProgress/create 2[0m
17:48:56.255112 [31mIDE     LS --> Clangd RESP window/workDoneProgress/create 2[0m
17:48:56.255112 [92mIDE <-- LS REQU window/workDoneProgress/create 6[0m
17:48:56.255112 OUT Elapsed: 0s
17:48:56.255112 IN Elapsed: 0s
17:48:56.255112 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:48:56.255112 OUT Elapsed: 0s
17:48:56.255112 [91m                            $/progress: backgroundIndexProgress BEGIN indexing, 0.0%[0m
17:48:56.255112 IN Elapsed: 0s
17:48:56.255112 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:48:56.255112 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
17:48:56.255668 IN Elapsed: 1.7116069s
17:48:56.255668 [32mIDE --> LS RESP window/workDoneProgress/create 6[0m
17:48:56.255668 [92mIDE <-- LS NOTIF $/progress[0m
17:48:56.255668 OUT Elapsed: 0s
17:48:56.255668 [92mIDE <-- LS NOTIF $/progress[0m
17:48:56.255668 OUT Elapsed: 0s
17:48:56.304048 IN Elapsed: 48.9358ms
17:48:56.304048 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:48:56.304048 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
17:48:56.304048 IN Elapsed: 0s
17:48:56.304048 [92mIDE <-- LS NOTIF $/progress[0m
17:48:56.304048 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:48:56.304048 OUT Elapsed: 0s
17:48:56.304048 [91m                            $/progress: backgroundIndexProgress END [0m
17:48:56.304048 [92mIDE <-- LS NOTIF $/progress[0m
17:48:56.304048 OUT Elapsed: 0s
17:48:56.316413 IN Elapsed: 12.3649ms
17:48:56.316496 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:48:56.316496 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:48:59.787286 IN Elapsed: 3.531618s
17:48:59.787286 [92mIDE --> LS REQU textDocument/hover 41[0m
17:48:59.787286 [92m                textDocument/hover 41: [93mread-locked[0m[0m
17:48:59.787286 [92m                textDocument/hover 41: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:48:59.788355 [92m                textDocument/hover 41: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:15:53 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:17:53[0m
17:48:59.788355 [91mIDE     LS --> Clangd REQU textDocument/hover 38[0m
17:48:59.788872 OUT Elapsed: 517µs
17:48:59.790539 IN Elapsed: 3.4740424s
17:48:59.790539 [31mIDE     LS <-- Clangd RESP textDocument/hover 38[0m
17:48:59.790539 [92m                textDocument/hover 41: null response[0m
17:48:59.790539 [92m                textDocument/hover 41: [93mread-unlocked[0m[0m
17:48:59.790539 [32mIDE <-- LS RESP textDocument/hover 41[0m
17:48:59.790539 OUT Elapsed: 0s
17:49:02.299067 IN Elapsed: 2.5085288s
17:49:02.299067 [92mIDE --> LS REQU textDocument/hover 42[0m
17:49:02.299067 [92m                textDocument/hover 42: [93mread-locked[0m[0m
17:49:02.299067 [92m                textDocument/hover 42: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:02.300751 [92m                textDocument/hover 42: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:9 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:11:9[0m
17:49:02.300751 [91mIDE     LS --> Clangd REQU textDocument/hover 39[0m
17:49:02.300751 OUT Elapsed: 0s
17:49:02.304907 IN Elapsed: 2.5143689s
17:49:02.304907 [31mIDE     LS <-- Clangd RESP textDocument/hover 39[0m
17:49:02.304907 [92m                textDocument/hover 42: Hover content: "### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"[0m
17:49:02.304907 [92m                textDocument/hover 42: [93mread-unlocked[0m[0m
17:49:02.304907 [32mIDE <-- LS RESP textDocument/hover 42[0m
17:49:02.304907 OUT Elapsed: 0s
17:49:02.304907 IN Elapsed: 0s
17:49:03.632838 IN Elapsed: 1.3279301s
17:49:03.632838 [92mIDE --> LS REQU textDocument/hover 43[0m
17:49:03.632838 [92m                textDocument/hover 43: [93mread-locked[0m[0m
17:49:03.632838 [92m                textDocument/hover 43: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:03.634462 [92m                textDocument/hover 43: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:0 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:11:0[0m
17:49:03.634462 [91mIDE     LS --> Clangd REQU textDocument/hover 40[0m
17:49:03.634462 OUT Elapsed: 0s
17:49:03.636623 IN Elapsed: 1.3317155s
17:49:03.636623 [31mIDE     LS <-- Clangd RESP textDocument/hover 40[0m
17:49:03.636623 [92m                textDocument/hover 43: Hover content: "### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"[0m
17:49:03.636623 [92m                textDocument/hover 43: [93mread-unlocked[0m[0m
17:49:03.636623 [32mIDE <-- LS RESP textDocument/hover 43[0m
17:49:03.636623 OUT Elapsed: 0s
17:49:05.432042 IN Elapsed: 1.7954194s
17:49:05.432042 [92mIDE --> LS REQU textDocument/hover 44[0m
17:49:05.432042 [92m                textDocument/hover 44: [93mread-locked[0m[0m
17:49:05.432042 [92m                textDocument/hover 44: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:05.433107 [92m                textDocument/hover 44: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:19 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:11:19[0m
17:49:05.433107 [91mIDE     LS --> Clangd REQU textDocument/hover 41[0m
17:49:05.433622 OUT Elapsed: 515µs
17:49:05.435627 IN Elapsed: 1.7990037s
17:49:05.435627 [31mIDE     LS <-- Clangd RESP textDocument/hover 41[0m
17:49:05.435627 [92m                textDocument/hover 44: Hover content: "### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"[0m
17:49:05.435627 [92m                textDocument/hover 44: [93mread-unlocked[0m[0m
17:49:05.435627 [32mIDE <-- LS RESP textDocument/hover 44[0m
17:49:05.435627 OUT Elapsed: 0s
17:49:06.000832 IN Elapsed: 565.2052ms
17:49:06.000894 [92mIDE --> LS REQU textDocument/hover 45[0m
17:49:06.000894 [92m                textDocument/hover 45: [93mread-locked[0m[0m
17:49:06.000894 [92m                textDocument/hover 45: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:06.001987 [92m                textDocument/hover 45: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:2 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:11:2[0m
17:49:06.002497 [91mIDE     LS --> Clangd REQU textDocument/hover 42[0m
17:49:06.002529 OUT Elapsed: 0s
17:49:06.004188 IN Elapsed: 568.5611ms
17:49:06.004188 [31mIDE     LS <-- Clangd RESP textDocument/hover 42[0m
17:49:06.004717 [92m                textDocument/hover 45: Hover content: "### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"[0m
17:49:06.004729 [92m                textDocument/hover 45: [93mread-unlocked[0m[0m
17:49:06.004729 [32mIDE <-- LS RESP textDocument/hover 45[0m
17:49:06.004729 OUT Elapsed: 0s
17:49:06.359584 IN Elapsed: 354.8548ms
17:49:06.359584 [92mIDE --> LS REQU textDocument/hover 46[0m
17:49:06.359584 [92m                textDocument/hover 46: [93mread-locked[0m[0m
17:49:06.359584 [92m                textDocument/hover 46: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:06.361234 [92m                textDocument/hover 46: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:0 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:11:0[0m
17:49:06.361234 [91mIDE     LS --> Clangd REQU textDocument/hover 43[0m
17:49:06.361234 OUT Elapsed: 0s
17:49:06.363949 IN Elapsed: 359.7616ms
17:49:06.364518 [31mIDE     LS <-- Clangd RESP textDocument/hover 43[0m
17:49:06.364518 [92m                textDocument/hover 46: Hover content: "### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"[0m
17:49:06.364518 [92m                textDocument/hover 46: [93mread-unlocked[0m[0m
17:49:06.364518 [32mIDE <-- LS RESP textDocument/hover 46[0m
17:49:06.364518 OUT Elapsed: 0s
17:49:07.156317 IN Elapsed: 791.7996ms
17:49:07.156317 [92mIDE --> LS REQU textDocument/hover 47[0m
17:49:07.156317 [92m                textDocument/hover 47: [93mread-locked[0m[0m
17:49:07.156926 [92m                textDocument/hover 47: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:07.158025 [92m                textDocument/hover 47: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:0 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:11:0[0m
17:49:07.158025 [91mIDE     LS --> Clangd REQU textDocument/hover 44[0m
17:49:07.158025 OUT Elapsed: 0s
17:49:07.160288 IN Elapsed: 795.8079ms
17:49:07.160288 [31mIDE     LS <-- Clangd RESP textDocument/hover 44[0m
17:49:07.160288 [92m                textDocument/hover 47: Hover content: "### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"[0m
17:49:07.160288 [92m                textDocument/hover 47: [93mread-unlocked[0m[0m
17:49:07.160801 [32mIDE <-- LS RESP textDocument/hover 47[0m
17:49:07.160844 OUT Elapsed: 22.8µs
17:49:08.390747 IN Elapsed: 1.2299022s
17:49:08.390791 [92mIDE --> LS REQU textDocument/codeAction 48[0m
17:49:08.390791 [92m                textDocument/codeAction 48: [93mread-locked[0m[0m
17:49:08.390791 [92m                textDocument/codeAction 48: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:0)[0m
17:49:08.390791 [92m                textDocument/codeAction 48: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:08.391853 [92m                textDocument/codeAction 48:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:9:0)[0m
17:49:08.391853 [91mIDE     LS --> Clangd REQU textDocument/codeAction 45[0m
17:49:08.391853 OUT Elapsed: 0s
17:49:08.394730 IN Elapsed: 1.2344421s
17:49:08.394730 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 45[0m
17:49:08.394730 [92m                textDocument/codeAction 48: [93mread-unlocked[0m[0m
17:49:08.394730 [32mIDE <-- LS RESP textDocument/codeAction 48[0m
17:49:08.394730 OUT Elapsed: 0s
17:49:09.173297 IN Elapsed: 778.5673ms
17:49:09.173297 [92mIDE --> LS REQU textDocument/documentSymbol 49[0m
17:49:09.173297 [92m                textDocument/documentSymbol 49: [93mread-locked[0m[0m
17:49:09.173898 [92m                textDocument/documentSymbol 49: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:09.173898 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 46[0m
17:49:09.173898 OUT Elapsed: 0s
17:49:09.174452 IN Elapsed: 779.7219ms
17:49:09.174452 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 46[0m
17:49:09.175001 [92m                textDocument/documentSymbol 49: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:49:09.175001 [92m                textDocument/documentSymbol 49:   > convert SymbolKind:Variable 20:0-20:15[0m
17:49:09.176092 [92m                textDocument/documentSymbol 49: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:49:09.176665 [92m                textDocument/documentSymbol 49: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:49:09.176665 [92m                textDocument/documentSymbol 49: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:09.176665 [92m                textDocument/documentSymbol 49:   > convert SymbolKind:Function 23:0-23:16[0m
17:49:09.177752 [92m                textDocument/documentSymbol 49: Range is in PREPROCESSED section of the sketch[0m
17:49:09.177752 [92m                textDocument/documentSymbol 49: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:49:09.177752 [92m                textDocument/documentSymbol 49:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:49:09.177752 [92m                textDocument/documentSymbol 49:   > convert SymbolKind:Function 25:0-25:15[0m
17:49:09.179399 [92m                textDocument/documentSymbol 49: Range is in PREPROCESSED section of the sketch[0m
17:49:09.179438 [92m                textDocument/documentSymbol 49: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:49:09.179438 [92m                textDocument/documentSymbol 49:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:49:09.179438 [92m                textDocument/documentSymbol 49:   > convert SymbolKind:Function 27:0-29:1[0m
17:49:09.180563 [92m                textDocument/documentSymbol 49: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:49:09.181663 [92m                textDocument/documentSymbol 49: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:49:09.181663 [92m                textDocument/documentSymbol 49: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:09.181663 [92m                textDocument/documentSymbol 49:   > convert SymbolKind:Function 31:0-127:1[0m
17:49:09.182750 [92m                textDocument/documentSymbol 49: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:49:09.183271 [92m                textDocument/documentSymbol 49: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:49:09.183271 [92m                textDocument/documentSymbol 49: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:09.183271 [92m                textDocument/documentSymbol 49: [93mread-unlocked[0m[0m
17:49:09.183808 [32mIDE <-- LS RESP textDocument/documentSymbol 49[0m
17:49:09.183808 OUT Elapsed: 0s
17:49:09.183808 IN Elapsed: 0s
17:49:09.183808 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:49:09.183808 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:49:09.183808 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@14)[0m
17:49:09.183808 [92m                 textDocument/didChange:   > 9:0-9:20 (len=20) -> ""[0m
17:49:09.183808 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>


 
// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
-----------------------------[0m
17:49:09.184345 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:09.185456 Ino Range: 9:0-9:20 -> Cpp Range:11:0-11:20
17:49:09.185456   > Current sketchmapper content:
17:49:09.185456   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:49:09.185456   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:49:09.185456   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:49:09.185456   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:49:09.185456   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:49:09.185456   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:49:09.185456   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:49:09.185456   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:49:09.185456   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:49:09.185456   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:49:09.185456  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:49:09.185456  11:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:49:09.185456  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:49:09.185456  13: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:49:09.185456  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:49:09.185456  15: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:49:09.185456  16: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:49:09.185456  17: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:49:09.185456  18: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:49:09.185456  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:09.185456  20: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:49:09.185456  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:49:09.185456  22: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:09.185456  23: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20 D:\Arduino_GitHub\Termometer\Termometer.ino:20
17:49:09.185456  24: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:09.185456  25: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24 D:\Arduino_GitHub\Termometer\Termometer.ino:24
17:49:09.185456  26: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:09.185970  27: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:49:09.186014  28:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:49:09.186014  29: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:49:09.186014  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:49:09.186014  31: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:49:09.186014  32:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:49:09.186014  33:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:49:09.186014  34:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:49:09.186014  35:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:49:09.186014  36:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:49:09.186014  37:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:49:09.186014  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:49:09.186014  39:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:49:09.186014  40:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:49:09.186014  41:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:49:09.186014  42:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:49:09.186014  43:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:49:09.186014  44:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:49:09.186014  45:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:49:09.186014  46:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:49:09.186014  47:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:49:09.186014  48:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:49:09.186014  49:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:49:09.186014  50:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:49:09.186014  51:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:49:09.186014  52:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:49:09.186014  53:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:49:09.186014  54:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:49:09.186014  55:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:49:09.186014  56:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:49:09.186014  57:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:49:09.186014  58:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:49:09.186014  59:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:49:09.186014  60:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:49:09.186014  61:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:49:09.186014  62:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:49:09.186014  63:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:49:09.186014  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:49:09.186014  65:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:49:09.186524  66:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:49:09.186543  67:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:49:09.186543  68:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:49:09.186622  69:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:49:09.186622  70:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:49:09.186622  71:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:49:09.186622  72:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:49:09.186622  73:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:49:09.186622  74:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:49:09.186622  75:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:49:09.186622  76:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:49:09.186622  77:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:49:09.186622  78:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:49:09.186622  79:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:49:09.186622  80:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:49:09.186622  81:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:49:09.186622  82:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:49:09.186622  83:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:49:09.186622  84:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:49:09.186622  85:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:49:09.186622  86:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:49:09.186622  87:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:49:09.186622  88:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:49:09.186622  89:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:49:09.186622  90:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:49:09.186622  91:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:49:09.186622  92:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:49:09.186622  93:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:49:09.186622  94:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:49:09.186622  95:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:49:09.186622  96:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:49:09.186622  97:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:49:09.186622  98:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:49:09.186622  99:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:49:09.186622 100:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:49:09.186622 101:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:49:09.186622 102:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:49:09.186622 103:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:49:09.186622 104:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:49:09.186622 105:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:49:09.186622 106:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:49:09.186622 107:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:49:09.186622 108:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:49:09.186622 109:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:49:09.186622 110:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:49:09.186622 111:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:49:09.186622 112:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:49:09.186622 113:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:49:09.186622 114:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:49:09.186622 115:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:49:09.186622 116:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:49:09.186622 117:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:49:09.186622 118:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:49:09.186622 119:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:49:09.186622 120:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:49:09.186622 121:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:49:09.186622 122:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:49:09.186622 123:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:49:09.186622 124:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:49:09.187134 125:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:49:09.187134 126:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:49:09.187156 127: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:49:09.187172 128:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:121                          
17:49:09.187172 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@16)[0m
17:49:09.187172 [92m                 textDocument/didChange:             > 11:0-11:20 -> ""[0m
17:49:09.187172 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:49:09.187172 OUT Elapsed: 0s
17:49:09.187172 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:49:09.187172 IN Elapsed: 0s
17:49:09.187172 [92mIDE --> LS REQU textDocument/documentSymbol 50[0m
17:49:09.187172 [92m                textDocument/documentSymbol 50: [93mread-locked[0m[0m
17:49:09.187737 [92m                textDocument/documentSymbol 50: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:09.187737 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 47[0m
17:49:09.187737 OUT Elapsed: 0s
17:49:09.258749 IN Elapsed: 84.2975ms
17:49:09.259835 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 47[0m
17:49:09.259835 [92m                textDocument/documentSymbol 50: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:49:09.259835 [92m                textDocument/documentSymbol 50:   > convert SymbolKind:Variable 20:0-20:15[0m
17:49:09.260926 [92m                textDocument/documentSymbol 50: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:49:09.262746 [92m                textDocument/documentSymbol 50: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:49:09.262746 [92m                textDocument/documentSymbol 50: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:09.262746 [92m                textDocument/documentSymbol 50:   > convert SymbolKind:Function 23:0-23:16[0m
17:49:09.263829 [92m                textDocument/documentSymbol 50: Range is in PREPROCESSED section of the sketch[0m
17:49:09.263829 [92m                textDocument/documentSymbol 50: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:49:09.263829 [92m                textDocument/documentSymbol 50:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:49:09.263829 [92m                textDocument/documentSymbol 50:   > convert SymbolKind:Function 25:0-25:15[0m
17:49:09.264926 [92m                textDocument/documentSymbol 50: Range is in PREPROCESSED section of the sketch[0m
17:49:09.264926 [92m                textDocument/documentSymbol 50: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:49:09.264926 [92m                textDocument/documentSymbol 50:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:49:09.264926 [92m                textDocument/documentSymbol 50:   > convert SymbolKind:Function 27:0-29:1[0m
17:49:09.266020 [92m                textDocument/documentSymbol 50: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:49:09.266573 [92m                textDocument/documentSymbol 50: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:49:09.266573 [92m                textDocument/documentSymbol 50: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:09.266573 [92m                textDocument/documentSymbol 50:   > convert SymbolKind:Function 31:0-127:1[0m
17:49:09.267652 [92m                textDocument/documentSymbol 50: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:49:09.268725 [92m                textDocument/documentSymbol 50: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:49:09.268741 [92m                textDocument/documentSymbol 50: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:09.268741 [92m                textDocument/documentSymbol 50: [93mread-unlocked[0m[0m
17:49:09.268741 [32mIDE <-- LS RESP textDocument/documentSymbol 50[0m
17:49:09.268741 OUT Elapsed: 0s
17:49:09.268741 IN Elapsed: 0s
17:49:09.318391 IN Elapsed: 49.6503ms
17:49:09.318391 [92mIDE --> LS REQU textDocument/documentSymbol 51[0m
17:49:09.318391 [92m                textDocument/documentSymbol 51: [93mread-locked[0m[0m
17:49:09.318962 [92m                textDocument/documentSymbol 51: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:09.318962 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 48[0m
17:49:09.318962 OUT Elapsed: 0s
17:49:09.320072 IN Elapsed: 60.2834ms
17:49:09.320072 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 48[0m
17:49:09.320072 [92m                textDocument/documentSymbol 51: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:49:09.320072 [92m                textDocument/documentSymbol 51:   > convert SymbolKind:Variable 20:0-20:15[0m
17:49:09.321694 [92m                textDocument/documentSymbol 51: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-20:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:15 (.ino)[0m
17:49:09.322790 [92m                textDocument/documentSymbol 51: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:9-20:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:9-18:11 (.ino)[0m
17:49:09.322790 [92m                textDocument/documentSymbol 51: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:09.322790 [92m                textDocument/documentSymbol 51:   > convert SymbolKind:Function 23:0-23:16[0m
17:49:09.323884 [92m                textDocument/documentSymbol 51: Range is in PREPROCESSED section of the sketch[0m
17:49:09.323884 [92m                textDocument/documentSymbol 51: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:49:09.323884 [92m                textDocument/documentSymbol 51:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:49:09.323884 [92m                textDocument/documentSymbol 51:   > convert SymbolKind:Function 25:0-25:15[0m
17:49:09.324995 [92m                textDocument/documentSymbol 51: Range is in PREPROCESSED section of the sketch[0m
17:49:09.324995 [92m                textDocument/documentSymbol 51: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-25:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:49:09.324995 [92m                textDocument/documentSymbol 51:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:49:09.324995 [92m                textDocument/documentSymbol 51:   > convert SymbolKind:Function 27:0-29:1[0m
17:49:09.326100 [92m                textDocument/documentSymbol 51: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:0-29:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-22:1 (.ino)[0m
17:49:09.326651 [92m                textDocument/documentSymbol 51: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:27:5-27:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:49:09.326651 [92m                textDocument/documentSymbol 51: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:09.326651 [92m                textDocument/documentSymbol 51:   > convert SymbolKind:Function 31:0-127:1[0m
17:49:09.327746 [92m                textDocument/documentSymbol 51: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:0-127:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-120:1 (.ino)[0m
17:49:09.329522 [92m                textDocument/documentSymbol 51: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:31:5-31:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:49:09.329522 [92m                textDocument/documentSymbol 51: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:09.329522 [92m                textDocument/documentSymbol 51: [93mread-unlocked[0m[0m
17:49:09.329522 [32mIDE <-- LS RESP textDocument/documentSymbol 51[0m
17:49:09.329522 OUT Elapsed: 0s
17:49:09.329522 IN Elapsed: 0s
17:49:09.329522 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:49:09.329522 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:49:09.329522 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@15)[0m
17:49:09.329522 [92m                 textDocument/didChange:   > 9:0-10:0 (len=2) -> ""[0m
17:49:09.330077 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

 
// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
-----------------------------[0m
17:49:09.330077 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:09.332431 Ino Range: 9:0-10:0 -> Cpp Range:11:0-12:0
17:49:09.332431   > Current sketchmapper content:
17:49:09.332431   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:49:09.332431   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:49:09.332431   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:49:09.332431   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:49:09.332431   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:49:09.332431   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:49:09.332431   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:49:09.332431   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:49:09.332431   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:49:09.332431   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:49:09.332431  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:49:09.332431  11:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:49:09.332431  12: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:49:09.332431  13: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:49:09.332946  14: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:49:09.332964  15: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:49:09.332964  16: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:49:09.332988  17: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:49:09.332988  18:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:49:09.332988  19: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:09.332988  20:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:49:09.332988  21: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:09.332988  22: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:49:09.332988  23: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | D:\Arduino_GitHub\Termometer\Termometer.ino:19 D:\Arduino_GitHub\Termometer\Termometer.ino:19
17:49:09.332988  24: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:49:09.332988  25: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | D:\Arduino_GitHub\Termometer\Termometer.ino:23 D:\Arduino_GitHub\Termometer\Termometer.ino:23
17:49:09.332988  26: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:49:09.332988  27:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:49:09.332988  28: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:49:09.332988  29:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:49:09.332988  30: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:49:09.332988  31:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:49:09.332988  32:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:49:09.332988  33:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:49:09.332988  34:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:49:09.332988  35:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:49:09.332988  36:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:49:09.332988  37:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:49:09.332988  38:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:49:09.332988  39:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:49:09.332988  40:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:49:09.332988  41:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:49:09.332988  42:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:49:09.332988  43:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:49:09.332988  44:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:49:09.332988  45:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:49:09.332988  46:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:49:09.332988  47:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:49:09.332988  48:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:49:09.332988  49:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:49:09.332988  50:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:49:09.332988  51:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:49:09.332988  52:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:49:09.332988  53:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:49:09.332988  54:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:49:09.332988  55:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:49:09.332988  56:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:49:09.332988  57:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:49:09.333498  58:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:49:09.333509  59:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:49:09.333509  60:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:49:09.333509  61:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:49:09.333509  62:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:49:09.333509  63:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:49:09.333509  64:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:49:09.333509  65:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:49:09.333509  66:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:49:09.333509  67:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:49:09.333509  68:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:49:09.333509  69:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:49:09.333509  70:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:49:09.333509  71:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:49:09.333509  72:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:49:09.333509  73:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:49:09.333509  74:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:49:09.333509  75:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:49:09.333509  76:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:49:09.333509  77:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:49:09.333509  78:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:49:09.333509  79:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:49:09.333509  80:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:49:09.333509  81:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:49:09.333509  82:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:49:09.333509  83:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:49:09.333509  84:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:49:09.333509  85:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:49:09.333509  86:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:49:09.333509  87:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:49:09.333509  88:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:49:09.333509  89:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:49:09.333509  90:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:49:09.333509  91:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:49:09.333509  92:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:49:09.333509  93:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:49:09.333509  94:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:49:09.333509  95:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:49:09.333509  96:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:49:09.333509  97:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:49:09.333509  98:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:49:09.333509  99:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:49:09.333509 100:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:49:09.333509 101:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:49:09.334022 102:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:49:09.334022 103:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:49:09.334116 104:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:49:09.334116 105:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:49:09.334116 106:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:49:09.334116 107:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:49:09.334116 108:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:49:09.334116 109:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:49:09.334116 110:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:49:09.334116 111:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:49:09.334116 112:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:49:09.334116 113:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:49:09.334116 114:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:49:09.334116 115:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:49:09.334116 116:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:49:09.334116 117:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:49:09.334116 118:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:49:09.334116 119:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:49:09.334116 120:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:49:09.334116 121:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:49:09.334116 122:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:49:09.334116 123:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:49:09.334116 124:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:49:09.334116 125:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:49:09.334116 126: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:49:09.334116 127:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:49:09.334116 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@17)[0m
17:49:09.334116 [92m                 textDocument/didChange:             > 11:0-12:0 -> ""[0m
17:49:09.334116 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:49:09.334116 OUT Elapsed: 0s
17:49:09.334116 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:49:09.422020 IN Elapsed: 101.9474ms
17:49:09.422020 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:49:09.422020 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:49:09.510600 IN Elapsed: 176.4835ms
17:49:09.510669 [92mIDE --> LS REQU textDocument/hover 52[0m
17:49:09.510669 [92m                textDocument/hover 52: [93mread-locked[0m[0m
17:49:09.510669 [92m                textDocument/hover 52: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:09.512882 [92m                textDocument/hover 52: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:10:36 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:12:36[0m
17:49:09.512882 [91mIDE     LS --> Clangd REQU textDocument/hover 49[0m
17:49:09.512882 OUT Elapsed: 0s
17:49:09.571693 IN Elapsed: 149.6727ms
17:49:09.571693 [31mIDE     LS <-- Clangd RESP textDocument/hover 49[0m
17:49:09.571693 [92m                textDocument/hover 52: null response[0m
17:49:09.571693 [92m                textDocument/hover 52: [93mread-unlocked[0m[0m
17:49:09.571693 [32mIDE <-- LS RESP textDocument/hover 52[0m
17:49:09.571693 OUT Elapsed: 0s
17:49:09.647196 IN Elapsed: 75.5037ms
17:49:09.647196 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:49:09.647196 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:49:09.882828 IN Elapsed: 311.1355ms
17:49:09.882828 [92mIDE --> LS REQU textDocument/documentSymbol 53[0m
17:49:09.882828 [92m                textDocument/documentSymbol 53: [93mread-locked[0m[0m
17:49:09.883348 [92m                textDocument/documentSymbol 53: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:09.883348 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 50[0m
17:49:09.883348 OUT Elapsed: 0s
17:49:09.883879 IN Elapsed: 236.6823ms
17:49:09.883879 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 50[0m
17:49:09.884400 [92m                textDocument/documentSymbol 53: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:49:09.884412 [92m                textDocument/documentSymbol 53:   > convert SymbolKind:Variable 19:0-19:15[0m
17:49:09.885475 [92m                textDocument/documentSymbol 53: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:19:0-19:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:17:0-17:15 (.ino)[0m
17:49:09.886001 [92m                textDocument/documentSymbol 53: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:19:9-19:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:17:9-17:11 (.ino)[0m
17:49:09.886001 [92m                textDocument/documentSymbol 53: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:09.886001 [92m                textDocument/documentSymbol 53:   > convert SymbolKind:Function 22:0-22:16[0m
17:49:09.887049 [92m                textDocument/documentSymbol 53: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:22:0-22:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:49:09.887571 [92m                textDocument/documentSymbol 53: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:22:5-22:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:49:09.887571 [92m                textDocument/documentSymbol 53: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:09.887571 [92m                textDocument/documentSymbol 53:   > convert SymbolKind:Function 24:0-24:15[0m
17:49:09.888614 [92m                textDocument/documentSymbol 53: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:24:0-24:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:49:09.889143 [92m                textDocument/documentSymbol 53: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:24:5-24:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:49:09.889143 [92m                textDocument/documentSymbol 53: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:09.889143 [92m                textDocument/documentSymbol 53:   > convert SymbolKind:Function 26:0-28:1[0m
17:49:09.890193 [92m                textDocument/documentSymbol 53: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:26:0-28:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:0-21:1 (.ino)[0m
17:49:09.890716 [92m                textDocument/documentSymbol 53: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:26:5-26:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:5-19:10 (.ino)[0m
17:49:09.890716 [92m                textDocument/documentSymbol 53: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:09.890716 [92m                textDocument/documentSymbol 53:   > convert SymbolKind:Function 30:0-126:1[0m
17:49:09.891762 [92m                textDocument/documentSymbol 53: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:30:0-126:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:23:0-119:1 (.ino)[0m
17:49:09.892285 [92m                textDocument/documentSymbol 53: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:30:5-30:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:23:5-23:9 (.ino)[0m
17:49:09.892285 [92m                textDocument/documentSymbol 53: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:09.892285 [92m                textDocument/documentSymbol 53: [93mread-unlocked[0m[0m
17:49:09.892285 [32mIDE <-- LS RESP textDocument/documentSymbol 53[0m
17:49:09.892285 OUT Elapsed: 0s
17:49:09.892285 IN Elapsed: 0s
17:49:09.892285 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:49:09.892814 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:49:09.892814 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@16)[0m
17:49:09.892814 [92m                 textDocument/didChange:   > 9:0-9:1 (len=1) -> ""[0m
17:49:09.892814 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>


// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
-----------------------------[0m
17:49:09.892814 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:09.895056 Ino Range: 9:0-9:1 -> Cpp Range:11:0-11:1
17:49:09.895605   > Current sketchmapper content:
17:49:09.895605   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:49:09.895605   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:49:09.895605   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:49:09.895605   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:49:09.895605   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:49:09.895605   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:49:09.895605   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:49:09.895605   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:49:09.895605   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:49:09.895605   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:49:09.895605  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:49:09.895605  11:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:49:09.895605  12: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:49:09.895605  13: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:49:09.895605  14: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:49:09.895605  15: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:49:09.895605  16: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:49:09.895605  17: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:49:09.895605  18:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:49:09.895605  19: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:09.895605  20:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:49:09.895605  21: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:09.895605  22: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:49:09.895605  23: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | D:\Arduino_GitHub\Termometer\Termometer.ino:19 D:\Arduino_GitHub\Termometer\Termometer.ino:19
17:49:09.895605  24: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:49:09.895605  25: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | D:\Arduino_GitHub\Termometer\Termometer.ino:23 D:\Arduino_GitHub\Termometer\Termometer.ino:23
17:49:09.895605  26: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:49:09.895605  27:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:49:09.895605  28: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:49:09.895605  29:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:49:09.895605  30: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:49:09.895605  31:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:49:09.895605  32:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:49:09.895605  33:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:49:09.895605  34:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:49:09.895605  35:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:49:09.895605  36:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:49:09.895605  37:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:49:09.895605  38:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:49:09.895605  39:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:49:09.895605  40:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:49:09.895605  41:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:49:09.895605  42:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:49:09.895605  43:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:49:09.895605  44:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:49:09.895605  45:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:49:09.896127  46:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:49:09.896127  47:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:49:09.896145  48:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:49:09.896145  49:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:49:09.896145  50:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:49:09.896145  51:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:49:09.896145  52:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:49:09.896145  53:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:49:09.896145  54:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:49:09.896145  55:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:49:09.896145  56:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:49:09.896145  57:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:49:09.896145  58:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:49:09.896145  59:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:49:09.896145  60:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:49:09.896145  61:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:49:09.896145  62:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:49:09.896145  63:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:49:09.896145  64:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:49:09.896145  65:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:49:09.896145  66:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:49:09.896145  67:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:49:09.896145  68:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:49:09.896145  69:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:49:09.896145  70:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:49:09.896145  71:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:49:09.896145  72:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:49:09.896145  73:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:49:09.896145  74:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:49:09.896145  75:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:49:09.896145  76:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:49:09.896145  77:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:49:09.896145  78:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:49:09.896145  79:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:49:09.896145  80:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:49:09.896145  81:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:49:09.896145  82:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:49:09.896145  83:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:49:09.896145  84:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:49:09.896145  85:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:49:09.896145  86:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:49:09.896145  87:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:49:09.896145  88:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:49:09.896145  89:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:49:09.896145  90:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:49:09.896145  91:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:49:09.896145  92:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:49:09.896145  93:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:49:09.896145  94:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:49:09.896145  95:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:49:09.896145  96:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:49:09.896145  97:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:49:09.896145  98:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:49:09.896145  99:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:49:09.896145 100:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:49:09.896145 101:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:49:09.896145 102:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:49:09.896145 103:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:49:09.896145 104:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:49:09.896145 105:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:49:09.896145 106:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:49:09.896145 107:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:49:09.896145 108:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:49:09.896145 109:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:49:09.896145 110:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:49:09.896145 111:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:49:09.896666 112:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:49:09.896666 113:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:49:09.896687 114:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:49:09.896687 115:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:49:09.896687 116:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:49:09.896687 117:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:49:09.896687 118:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:49:09.896687 119:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:49:09.896687 120:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:49:09.896687 121:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:49:09.896687 122:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:49:09.896687 123:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:49:09.896687 124:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:49:09.896687 125:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:49:09.896687 126: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:49:09.896687 127:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:120                          
17:49:09.896687 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@18)[0m
17:49:09.896687 [92m                 textDocument/didChange:             > 11:0-11:1 -> ""[0m
17:49:09.896687 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:49:09.896687 OUT Elapsed: 0s
17:49:09.896687 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:49:10.169027 IN Elapsed: 285.1486ms
17:49:10.169027 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:49:10.169027 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:49:10.515711 IN Elapsed: 619.0239ms
17:49:10.515711 [92mIDE --> LS REQU textDocument/documentSymbol 54[0m
17:49:10.515711 [92m                textDocument/documentSymbol 54: [93mread-locked[0m[0m
17:49:10.516475 [92m                textDocument/documentSymbol 54: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:10.516475 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 51[0m
17:49:10.516475 OUT Elapsed: 0s
17:49:10.517641 IN Elapsed: 348.6137ms
17:49:10.517880 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 51[0m
17:49:10.517880 [92m                textDocument/documentSymbol 54: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:49:10.517880 [92m                textDocument/documentSymbol 54:   > convert SymbolKind:Variable 19:0-19:15[0m
17:49:10.519690 [92m                textDocument/documentSymbol 54: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:19:0-19:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:17:0-17:15 (.ino)[0m
17:49:10.520229 [92m                textDocument/documentSymbol 54: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:19:9-19:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:17:9-17:11 (.ino)[0m
17:49:10.520229 [92m                textDocument/documentSymbol 54: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:10.520229 [92m                textDocument/documentSymbol 54:   > convert SymbolKind:Function 22:0-22:16[0m
17:49:10.521359 [92m                textDocument/documentSymbol 54: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:22:0-22:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:0-20:16 (.ino)[0m
17:49:10.522437 [92m                textDocument/documentSymbol 54: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:22:5-22:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:20:5-20:10 (.ino)[0m
17:49:10.522437 [92m                textDocument/documentSymbol 54: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:10.522437 [92m                textDocument/documentSymbol 54:   > convert SymbolKind:Function 24:0-24:15[0m
17:49:10.523508 [92m                textDocument/documentSymbol 54: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:24:0-24:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:0-24:15 (.ino)[0m
17:49:10.524639 [92m                textDocument/documentSymbol 54: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:24:5-24:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:24:5-24:9 (.ino)[0m
17:49:10.524639 [92m                textDocument/documentSymbol 54: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:10.524639 [92m                textDocument/documentSymbol 54:   > convert SymbolKind:Function 26:0-28:1[0m
17:49:10.525751 [92m                textDocument/documentSymbol 54: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:26:0-28:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:0-21:1 (.ino)[0m
17:49:10.527387 [92m                textDocument/documentSymbol 54: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:26:5-26:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:19:5-19:10 (.ino)[0m
17:49:10.527407 [92m                textDocument/documentSymbol 54: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:10.527407 [92m                textDocument/documentSymbol 54:   > convert SymbolKind:Function 30:0-126:1[0m
17:49:10.529387 [92m                textDocument/documentSymbol 54: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:30:0-126:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:23:0-119:1 (.ino)[0m
17:49:10.530069 [92m                textDocument/documentSymbol 54: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:30:5-30:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:23:5-23:9 (.ino)[0m
17:49:10.530069 [92m                textDocument/documentSymbol 54: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:10.530069 [92m                textDocument/documentSymbol 54: [93mread-unlocked[0m[0m
17:49:10.530069 [32mIDE <-- LS RESP textDocument/documentSymbol 54[0m
17:49:10.530069 OUT Elapsed: 0s
17:49:10.530069 IN Elapsed: 0s
17:49:10.530602 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:49:10.530628 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:49:10.530628 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@17)[0m
17:49:10.530628 [92m                 textDocument/didChange:   > 9:0-10:0 (len=2) -> ""[0m
17:49:10.530628 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

// OneWire DS18S20, DS18B20, DS1822 Temperature Example
//
// http://www.pjrc.com/teensy/td_libs_OneWire.html
//
// The DallasTemperature library can do all this work for you!
// http://milesburton.com/Dallas_Temperature_Control_Library
 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
-----------------------------[0m
17:49:10.530628 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:10.532389 Ino Range: 9:0-10:0 -> Cpp Range:11:0-12:0
17:49:10.532389   > Current sketchmapper content:
17:49:10.532389   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:49:10.532389   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:49:10.532389   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:49:10.532389   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:49:10.532389   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:49:10.532389   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:49:10.532389   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:49:10.532389   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:49:10.532389   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:49:10.532389   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:49:10.532389  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:49:10.532389  11: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:49:10.532389  12: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:49:10.532389  13: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:49:10.532389  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:49:10.532389  15: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:49:10.532389  16: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:49:10.532389  17:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:49:10.532389  18: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:49:10.532389  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:10.532389  20: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:10.532389  21: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:49:10.532389  22: #line 25 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:49:10.532389  23: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:18 D:\Arduino_GitHub\Termometer\Termometer.ino:18
17:49:10.532389  24: #line 21 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:49:10.532389  25: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:22 D:\Arduino_GitHub\Termometer\Termometer.ino:22
17:49:10.532389  26:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:49:10.532389  27: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:49:10.532389  28:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:49:10.532389  29: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:49:10.532389  30:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:49:10.532389  31:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:49:10.532389  32:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:49:10.532389  33:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:49:10.532389  34:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:49:10.532389  35:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:49:10.532901  36:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:49:10.532901  37:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:49:10.532924  38:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:49:10.532924  39:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:49:10.532939  40:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:49:10.532939  41:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:49:10.532939  42:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:49:10.532939  43:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:49:10.532939  44:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:49:10.532939  45:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:49:10.532939  46:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:49:10.532939  47:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:49:10.532939  48:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:49:10.532939  49:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:49:10.532939  50:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:49:10.532939  51:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:49:10.532939  52:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:49:10.532939  53:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:49:10.532939  54:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:49:10.532939  55:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:49:10.532939  56:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:49:10.532939  57:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:49:10.532939  58:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:49:10.532939  59:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:49:10.532939  60:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:49:10.532939  61:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:49:10.532939  62:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:49:10.532939  63:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:49:10.532939  64:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:49:10.532939  65:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:49:10.532939  66:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:49:10.532939  67:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:49:10.532939  68:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:49:10.532939  69:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:49:10.532939  70:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:49:10.532939  71:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:49:10.532939  72:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:49:10.532939  73:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:49:10.532939  74:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:49:10.532939  75:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:49:10.532939  76:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:49:10.532939  77:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:49:10.532939  78:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:49:10.532939  79:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:49:10.532939  80:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:49:10.532939  81:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:49:10.532939  82:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:49:10.532939  83:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:49:10.532939  84:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:49:10.532939  85:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:49:10.532939  86:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:49:10.532939  87:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:49:10.532939  88:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:49:10.532939  89:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:49:10.532939  90:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:49:10.532939  91:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:49:10.532939  92:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:49:10.532939  93:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:49:10.532939  94:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:49:10.532939  95:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:49:10.532939  96:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:49:10.532939  97:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:49:10.532939  98:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:49:10.532939  99:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:49:10.532939 100:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:49:10.532939 101:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:49:10.532939 102:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:49:10.532939 103:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:49:10.532939 104:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:49:10.532939 105:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:49:10.533481 106:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:49:10.533481 107:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:49:10.533481 108:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:49:10.533481 109:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:49:10.533481 110:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:49:10.533481 111:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:49:10.533481 112:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:49:10.533481 113:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:49:10.533481 114:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:49:10.533481 115:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:49:10.533481 116:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:49:10.533481 117:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:49:10.533481 118:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:49:10.533481 119:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:49:10.533481 120:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:49:10.533481 121:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:49:10.533481 122:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:49:10.533481 123:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:49:10.533481 124:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:49:10.533481 125: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:49:10.533481 126:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:49:10.533481 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@19)[0m
17:49:10.533481 [92m                 textDocument/didChange:             > 11:0-12:0 -> ""[0m
17:49:10.533481 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:49:10.533481 OUT Elapsed: 0s
17:49:10.533481 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:49:10.533481 IN Elapsed: 0s
17:49:10.533481 [92mIDE --> LS REQU textDocument/hover 55[0m
17:49:10.533481 [92m                textDocument/hover 55: [93mread-locked[0m[0m
17:49:10.534038 [92m                textDocument/hover 55: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:10.535131 [92m                textDocument/hover 55: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:10:30 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:12:30[0m
17:49:10.535131 [91mIDE     LS --> Clangd REQU textDocument/hover 52[0m
17:49:10.535131 OUT Elapsed: 0s
17:49:10.626607 IN Elapsed: 108.9664ms
17:49:10.626607 [31mIDE     LS <-- Clangd RESP textDocument/hover 52[0m
17:49:10.626607 [92m                textDocument/hover 55: null response[0m
17:49:10.626607 [92m                textDocument/hover 55: [93mread-unlocked[0m[0m
17:49:10.626607 [32mIDE <-- LS RESP textDocument/hover 55[0m
17:49:10.626607 OUT Elapsed: 0s
17:49:10.768041 IN Elapsed: 141.434ms
17:49:10.768041 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:49:10.768041 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:49:11.541120 [95mSKETCH REBUILD: : Sketch rebuild started[0m
17:49:11.541120 [95mSKETCH REBUILD: : [93mread-locked[0m[0m
17:49:11.541120 [95mSKETCH REBUILD: : [93mread-unlocked[0m[0m
17:49:11.541120 [92mIDE <-- LS REQU window/workDoneProgress/create 7[0m
17:49:11.541120 OUT Elapsed: 0s
17:49:11.541667 IN Elapsed: 915.0597ms
17:49:11.541667 [32mIDE --> LS RESP window/workDoneProgress/create 7[0m
17:49:11.541667 [92mIDE <-- LS NOTIF $/progress[0m
17:49:11.541667 OUT Elapsed: 0s
17:49:11.549581 [95mSKETCH REBUILD: : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server2510331829\\build",
  "verbose": true,
  "create_compilation_database_only": true,
  "source_override": {
    "Termometer.ino": "/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include \u003cOneWire.h\u003e\r\n#include \u003cDallasTemperature.h\u003e\r\n\r\n// OneWire DS18S20, DS18B20, DS1822 Temperature Example\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// The DallasTemperature library can do all this work for you!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i \u003c 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i \u003c 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] \u003c\u003c 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw \u003c\u003c 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw \u0026 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] \u0026 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw \u0026 ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw \u0026 ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw \u0026 ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}"
  },
  "skip_libraries_discovery": true
}[0m
17:49:11.585717 IN Elapsed: 44.0505ms
17:49:11.585717 [92mIDE --> LS NOTIF textDocument/didSave[0m
17:49:11.586280 [92m                 textDocument/didSave: [93mwrite-locked[0m[0m
17:49:11.586280 [92m                 textDocument/didSave: notification is not forwarded to clang[0m
17:49:11.586280 [92m                 textDocument/didSave: [93mwrite-unlocked[0m[0m
17:49:13.157665 [95mSKETCH REBUILD: : Compile successful![0m
17:49:13.174895 [95mSKETCH REBUILD: : [93mwrite-locked[0m[0m
17:49:13.175404 [95mSKETCH REBUILD: : [93mwrite-unlocked[0m[0m
17:49:13.175422 [95mSKETCH REBUILD: : Error: context canceled[0m
17:49:13.175438 [92mIDE <-- LS NOTIF $/progress[0m
17:49:13.175438 OUT Elapsed: 0s
17:49:14.183253 [95mSKETCH REBUILD: : Sketch rebuild started[0m
17:49:14.183253 [95mSKETCH REBUILD: : [93mread-locked[0m[0m
17:49:14.183253 [92mIDE <-- LS REQU window/workDoneProgress/create 8[0m
17:49:14.183253 [95mSKETCH REBUILD: : [93mread-unlocked[0m[0m
17:49:14.183253 OUT Elapsed: 0s
17:49:14.183253 IN Elapsed: 2.5969731s
17:49:14.184102 [32mIDE --> LS RESP window/workDoneProgress/create 8[0m
17:49:14.184102 [92mIDE <-- LS NOTIF $/progress[0m
17:49:14.184102 OUT Elapsed: 0s
17:49:14.185190 [95mSKETCH REBUILD: : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server2510331829\\build",
  "verbose": true,
  "create_compilation_database_only": true,
  "source_override": {
    "Termometer.ino": "/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include \u003cOneWire.h\u003e\r\n#include \u003cDallasTemperature.h\u003e\r\n\r\n// OneWire DS18S20, DS18B20, DS1822 Temperature Example\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// The DallasTemperature library can do all this work for you!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i \u003c 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i \u003c 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] \u003c\u003c 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw \u003c\u003c 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw \u0026 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] \u0026 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw \u0026 ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw \u0026 ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw \u0026 ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}"
  },
  "skip_libraries_discovery": true
}[0m
17:49:15.702014 [95mSKETCH REBUILD: : Compile successful![0m
17:49:15.721590 [95mSKETCH REBUILD: : [93mwrite-locked[0m[0m
17:49:15.722664   > Current sketchmapper content:
17:49:15.722664   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:49:15.723184   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:49:15.723184   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:49:15.723184   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:49:15.723184   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:49:15.723184   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:49:15.723184   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:49:15.723184   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:49:15.723184   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:49:15.723184   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:49:15.723184  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:49:15.723184  11: // OneWire DS18S20, DS18B20, DS1822 Temperature Example      | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:49:15.723184  12: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:49:15.723184  13: // http://www.pjrc.com/teensy/td_libs_OneWire.html           | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:49:15.723184  14: //                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:49:15.723184  15: // The DallasTemperature library can do all this work for yo | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:49:15.723184  16: // http://milesburton.com/Dallas_Temperature_Control_Library | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:49:15.723184  17:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:49:15.723184  18: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:49:15.723184  19:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:15.723692  20: #line 19 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:15.723692  21: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:18 D:\Arduino_GitHub\Termometer\Termometer.ino:18
17:49:15.723722  22: #line 23 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:15.723722  23: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:22 D:\Arduino_GitHub\Termometer\Termometer.ino:22
17:49:15.723722  24: #line 19 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:15.723722  25: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:49:15.723722  26:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:49:15.723722  27: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:49:15.723722  28:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:49:15.723722  29: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:49:15.723722  30:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:49:15.723722  31:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:49:15.723722  32:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:49:15.723722  33:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:49:15.723722  34:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:49:15.723722  35:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:49:15.723722  36:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:49:15.723722  37:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:49:15.723722  38:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:49:15.723722  39:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:49:15.723722  40:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:49:15.723722  41:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:49:15.723722  42:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:49:15.723722  43:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:49:15.723722  44:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:49:15.723722  45:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:49:15.723722  46:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:49:15.723722  47:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:49:15.723722  48:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:49:15.723722  49:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:49:15.723722  50:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:49:15.723722  51:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:49:15.723722  52:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:49:15.723722  53:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:49:15.723722  54:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:49:15.723722  55:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:49:15.723722  56:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:49:15.723722  57:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:49:15.723722  58:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:49:15.723722  59:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:49:15.723722  60:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:49:15.723722  61:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:49:15.723722  62:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:49:15.723722  63:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:49:15.723722  64:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:49:15.724232  65:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:49:15.724243  66:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:49:15.724243  67:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:49:15.724265  68:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:49:15.724265  69:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:49:15.724265  70:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:49:15.724265  71:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:49:15.724265  72:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:49:15.724265  73:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:49:15.724265  74:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:49:15.724265  75:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:49:15.724265  76:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:49:15.724265  77:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:49:15.724265  78:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:49:15.724265  79:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:49:15.724265  80:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:49:15.724265  81:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:49:15.724265  82:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:49:15.724265  83:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:49:15.724265  84:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:49:15.724265  85:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:49:15.724265  86:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:49:15.724265  87:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:49:15.724265  88:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:49:15.724265  89:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:49:15.724265  90:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:49:15.724265  91:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:49:15.724265  92:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:49:15.724265  93:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:49:15.724265  94:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:49:15.724265  95:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:49:15.724265  96:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:49:15.724265  97:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:49:15.724265  98:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:49:15.724265  99:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:49:15.724265 100:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:49:15.724265 101:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:49:15.724265 102:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:49:15.724265 103:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:49:15.724265 104:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:49:15.724265 105:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:49:15.724265 106:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:49:15.724265 107:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:49:15.724265 108:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:49:15.724265 109:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:49:15.724265 110:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:49:15.724265 111:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:49:15.724785 112:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:49:15.724796 113:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:49:15.724796 114:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:49:15.724796 115:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:49:15.724796 116:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:49:15.724796 117:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:49:15.724796 118:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:49:15.724796 119:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:49:15.724796 120:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:49:15.724796 121:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:49:15.724796 122:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:115                          
17:49:15.724796 123:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:116                          
17:49:15.724796 124:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:117                          
17:49:15.724796 125: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:118                          
17:49:15.724796 126:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:119                          
17:49:15.724796 [95mSKETCH REBUILD: : Sending 'didSave' notification to Clangd[0m
17:49:15.724796 [91mIDE     LS --> Clangd NOTIF textDocument/didSave[0m
17:49:15.724796 OUT Elapsed: 0s
17:49:15.724796 [95mSKETCH REBUILD: : Sending full-text 'didChange' notification to Clangd[0m
17:49:15.724796 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:49:15.724796 OUT Elapsed: 0s
17:49:15.725308 [95mSKETCH REBUILD: : [93mwrite-unlocked[0m[0m
17:49:15.725357 [92mIDE <-- LS NOTIF $/progress[0m
17:49:15.725357 OUT Elapsed: 0s
17:49:15.802736 IN Elapsed: 5.0346951s
17:49:15.802736 [91mIDE     LS <-- Clangd REQU window/workDoneProgress/create 3[0m
17:49:15.802736 [31mIDE     LS --> Clangd RESP window/workDoneProgress/create 3[0m
17:49:15.802736 OUT Elapsed: 0s
17:49:15.802736 [92mIDE <-- LS REQU window/workDoneProgress/create 9[0m
17:49:15.802736 IN Elapsed: 0s
17:49:15.802736 OUT Elapsed: 0s
17:49:15.802736 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:49:15.802736 [91m                            $/progress: backgroundIndexProgress BEGIN indexing, 0.0%[0m
17:49:15.802736 IN Elapsed: 0s
17:49:15.802736 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:49:15.802736 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
17:49:15.802736 IN Elapsed: 1.6186348s
17:49:15.802736 [32mIDE --> LS RESP window/workDoneProgress/create 9[0m
17:49:15.802736 [92mIDE <-- LS NOTIF $/progress[0m
17:49:15.802736 OUT Elapsed: 0s
17:49:15.802736 [92mIDE <-- LS NOTIF $/progress[0m
17:49:15.802736 OUT Elapsed: 0s
17:49:15.855729 IN Elapsed: 52.9927ms
17:49:15.855729 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:49:15.855729 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
17:49:15.855729 IN Elapsed: 0s
17:49:15.855729 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:49:15.855729 [91m                            $/progress: backgroundIndexProgress END [0m
17:49:15.855729 [92mIDE <-- LS NOTIF $/progress[0m
17:49:15.855729 OUT Elapsed: 0s
17:49:15.855729 [92mIDE <-- LS NOTIF $/progress[0m
17:49:15.855729 OUT Elapsed: 0s
17:49:15.862881 IN Elapsed: 7.1516ms
17:49:15.862881 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:49:15.862881 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:49:21.016563 IN Elapsed: 5.2138262s
17:49:21.016563 [92mIDE --> LS REQU textDocument/hover 56[0m
17:49:21.016563 [92m                textDocument/hover 56: [93mread-locked[0m[0m
17:49:21.016563 [92m                textDocument/hover 56: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:21.018255 [92m                textDocument/hover 56: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:12:2 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:14:2[0m
17:49:21.018255 [91mIDE     LS --> Clangd REQU textDocument/hover 53[0m
17:49:21.018255 OUT Elapsed: 0s
17:49:21.021985 IN Elapsed: 5.1591041s
17:49:21.022510 [31mIDE     LS <-- Clangd RESP textDocument/hover 53[0m
17:49:21.022510 [92m                textDocument/hover 56: null response[0m
17:49:21.022510 [92m                textDocument/hover 56: [93mread-unlocked[0m[0m
17:49:21.022510 [32mIDE <-- LS RESP textDocument/hover 56[0m
17:49:21.022510 OUT Elapsed: 0s
17:49:22.716834 IN Elapsed: 1.6943244s
17:49:22.716834 [92mIDE --> LS REQU textDocument/hover 57[0m
17:49:22.716834 [92m                textDocument/hover 57: [93mread-locked[0m[0m
17:49:22.716834 [92m                textDocument/hover 57: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:22.717923 [92m                textDocument/hover 57: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:0 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:13:0[0m
17:49:22.717923 [91mIDE     LS --> Clangd REQU textDocument/hover 54[0m
17:49:22.718459 OUT Elapsed: 536.1µs
17:49:22.720572 IN Elapsed: 1.698062s
17:49:22.720572 [31mIDE     LS <-- Clangd RESP textDocument/hover 54[0m
17:49:22.720572 [92m                textDocument/hover 57: null response[0m
17:49:22.720572 [92m                textDocument/hover 57: [93mread-unlocked[0m[0m
17:49:22.720572 [32mIDE <-- LS RESP textDocument/hover 57[0m
17:49:22.720572 OUT Elapsed: 0s
17:49:27.351138 IN Elapsed: 4.6305656s
17:49:27.351138 [92mIDE --> LS REQU textDocument/hover 58[0m
17:49:27.351138 [92m                textDocument/hover 58: [93mread-locked[0m[0m
17:49:27.351138 [92m                textDocument/hover 58: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:27.352742 [92m                textDocument/hover 58: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:0 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:13:0[0m
17:49:27.352742 [91mIDE     LS --> Clangd REQU textDocument/hover 55[0m
17:49:27.352742 OUT Elapsed: 0s
17:49:27.356426 IN Elapsed: 4.6358544s
17:49:27.356426 [31mIDE     LS <-- Clangd RESP textDocument/hover 55[0m
17:49:27.356426 [92m                textDocument/hover 58: null response[0m
17:49:27.356426 [92m                textDocument/hover 58: [93mread-unlocked[0m[0m
17:49:27.356426 [32mIDE <-- LS RESP textDocument/hover 58[0m
17:49:27.356426 OUT Elapsed: 0s
17:49:31.652687 IN Elapsed: 4.2957434s
17:49:31.652687 [92mIDE --> LS REQU textDocument/hover 59[0m
17:49:31.652687 [92m                textDocument/hover 59: [93mread-locked[0m[0m
17:49:31.652687 [92m                textDocument/hover 59: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:31.654037 [92m                textDocument/hover 59: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:1 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:13:1[0m
17:49:31.654037 [91mIDE     LS --> Clangd REQU textDocument/hover 56[0m
17:49:31.654037 OUT Elapsed: 0s
17:49:31.656570 IN Elapsed: 4.3001435s
17:49:31.656570 [31mIDE     LS <-- Clangd RESP textDocument/hover 56[0m
17:49:31.656570 [92m                textDocument/hover 59: null response[0m
17:49:31.656570 [92m                textDocument/hover 59: [93mread-unlocked[0m[0m
17:49:31.656570 [32mIDE <-- LS RESP textDocument/hover 59[0m
17:49:31.656570 OUT Elapsed: 0s
17:49:33.876729 IN Elapsed: 2.2201594s
17:49:33.876729 [92mIDE --> LS REQU textDocument/hover 60[0m
17:49:33.876729 [92m                textDocument/hover 60: [93mread-locked[0m[0m
17:49:33.877330 [92m                textDocument/hover 60: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:33.878457 [92m                textDocument/hover 60: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:0 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:13:0[0m
17:49:33.878457 [91mIDE     LS --> Clangd REQU textDocument/hover 57[0m
17:49:33.879016 OUT Elapsed: 24.5µs
17:49:33.883239 IN Elapsed: 2.226669s
17:49:33.883239 [31mIDE     LS <-- Clangd RESP textDocument/hover 57[0m
17:49:33.883239 [92m                textDocument/hover 60: null response[0m
17:49:33.883239 [92m                textDocument/hover 60: [93mread-unlocked[0m[0m
17:49:33.883239 [32mIDE <-- LS RESP textDocument/hover 60[0m
17:49:33.883239 OUT Elapsed: 0s
17:49:34.834273 IN Elapsed: 951.0345ms
17:49:34.834273 [92mIDE --> LS REQU textDocument/hover 61[0m
17:49:34.834273 [92m                textDocument/hover 61: [93mread-locked[0m[0m
17:49:34.834273 [92m                textDocument/hover 61: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:34.835354 [92m                textDocument/hover 61: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:0 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:11:0[0m
17:49:34.835354 [91mIDE     LS --> Clangd REQU textDocument/hover 58[0m
17:49:34.835871 OUT Elapsed: 516.8µs
17:49:34.836940 IN Elapsed: 953.7012ms
17:49:34.838043 [31mIDE     LS <-- Clangd RESP textDocument/hover 58[0m
17:49:34.838043 [92m                textDocument/hover 61: null response[0m
17:49:34.838043 [92m                textDocument/hover 61: [93mread-unlocked[0m[0m
17:49:34.838043 [32mIDE <-- LS RESP textDocument/hover 61[0m
17:49:34.838043 OUT Elapsed: 0s
17:49:36.426707 IN Elapsed: 1.5886644s
17:49:36.426707 [92mIDE --> LS REQU textDocument/codeAction 62[0m
17:49:36.426707 [92m                textDocument/codeAction 62: [93mread-locked[0m[0m
17:49:36.426707 [92m                textDocument/codeAction 62: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:0)[0m
17:49:36.427711 [92m                textDocument/codeAction 62: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:36.428708 [92m                textDocument/codeAction 62:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:9:0)[0m
17:49:36.428708 [91mIDE     LS --> Clangd REQU textDocument/codeAction 59[0m
17:49:36.429705 OUT Elapsed: 996.8µs
17:49:36.429705 IN Elapsed: 1.5916619s
17:49:36.429705 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 59[0m
17:49:36.429705 [92m                textDocument/codeAction 62: [93mread-unlocked[0m[0m
17:49:36.429705 [32mIDE <-- LS RESP textDocument/codeAction 62[0m
17:49:36.429705 OUT Elapsed: 0s
17:49:38.323146 IN Elapsed: 1.8934412s
17:49:38.323146 [92mIDE --> LS REQU textDocument/documentSymbol 63[0m
17:49:38.323146 [92m                textDocument/documentSymbol 63: [93mread-locked[0m[0m
17:49:38.323697 [92m                textDocument/documentSymbol 63: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:38.323697 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 60[0m
17:49:38.323697 OUT Elapsed: 0s
17:49:38.324254 IN Elapsed: 1.894549s
17:49:38.324794 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 60[0m
17:49:38.324817 [92m                textDocument/documentSymbol 63: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:49:38.324817 [92m                textDocument/documentSymbol 63:   > convert SymbolKind:Variable 18:0-18:15[0m
17:49:38.325878 [92m                textDocument/documentSymbol 63: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:18:0-18:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:16:0-16:15 (.ino)[0m
17:49:38.327540 [92m                textDocument/documentSymbol 63: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:18:9-18:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:16:9-16:11 (.ino)[0m
17:49:38.327540 [92m                textDocument/documentSymbol 63: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:38.327540 [92m                textDocument/documentSymbol 63:   > convert SymbolKind:Function 21:0-21:16[0m
17:49:38.328685 [92m                textDocument/documentSymbol 63: Range is in PREPROCESSED section of the sketch[0m
17:49:38.328685 [92m                textDocument/documentSymbol 63: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:21:0-21:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:16 (.ino)[0m
17:49:38.329193 [92m                textDocument/documentSymbol 63:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:49:38.329210 [92m                textDocument/documentSymbol 63:   > convert SymbolKind:Function 23:0-23:15[0m
17:49:38.329789 [92m                textDocument/documentSymbol 63: Range is in PREPROCESSED section of the sketch[0m
17:49:38.329789 [92m                textDocument/documentSymbol 63: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-23:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:22:0-22:15 (.ino)[0m
17:49:38.329789 [92m                textDocument/documentSymbol 63:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:49:38.329789 [92m                textDocument/documentSymbol 63:   > convert SymbolKind:Function 25:0-27:1[0m
17:49:38.330895 [92m                textDocument/documentSymbol 63: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:0-27:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-20:1 (.ino)[0m
17:49:38.331969 [92m                textDocument/documentSymbol 63: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:25:5-25:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:5-18:10 (.ino)[0m
17:49:38.331969 [92m                textDocument/documentSymbol 63: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:38.331969 [92m                textDocument/documentSymbol 63:   > convert SymbolKind:Function 29:0-125:1[0m
17:49:38.333044 [92m                textDocument/documentSymbol 63: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:29:0-125:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:22:0-118:1 (.ino)[0m
17:49:38.333593 [92m                textDocument/documentSymbol 63: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:29:5-29:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:22:5-22:9 (.ino)[0m
17:49:38.333593 [92m                textDocument/documentSymbol 63: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:38.333593 [92m                textDocument/documentSymbol 63: [93mread-unlocked[0m[0m
17:49:38.333593 [32mIDE <-- LS RESP textDocument/documentSymbol 63[0m
17:49:38.333593 OUT Elapsed: 0s
17:49:38.333593 IN Elapsed: 0s
17:49:38.333593 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:49:38.334113 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:49:38.334113 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@18)[0m
17:49:38.334113 [92m                 textDocument/didChange:   > 9:0-14:60 (len=241) -> ""[0m
17:49:38.334113 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>


 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
-----------------------------[0m
17:49:38.334113 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:38.335743 Ino Range: 9:0-14:60 -> Cpp Range:11:0-16:60
17:49:38.336309   > Current sketchmapper content:
17:49:38.336309   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:49:38.336309   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:49:38.336309   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:49:38.336309   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:49:38.336309   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:49:38.336309   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:49:38.336309   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:49:38.336309   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:49:38.336309   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:49:38.336309   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:49:38.336309  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:49:38.336309  11:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:49:38.336309  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:49:38.336309  13: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:49:38.336309  14:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:49:38.336309  15: #line 19 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:38.336309  16: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:49:38.336309  17: #line 23 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:38.336309  18: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:49:38.336309  19: #line 19 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:49:38.336309  20: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:49:38.336309  21:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:13 D:\Arduino_GitHub\Termometer\Termometer.ino:13
17:49:38.336309  22: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:49:38.336309  23:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17 D:\Arduino_GitHub\Termometer\Termometer.ino:17
17:49:38.336309  24: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:38.336309  25:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:49:38.336309  26:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:49:38.336309  27:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:49:38.336309  28:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:49:38.336309  29:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:49:38.336309  30:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:49:38.336309  31:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:49:38.336309  32:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:49:38.336309  33:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:49:38.336309  34:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:49:38.336309  35:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:49:38.336309  36:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:49:38.336817  37:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:49:38.336817  38:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:49:38.336834  39:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:49:38.336834  40:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:49:38.336857  41:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:49:38.336857  42:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:49:38.336857  43:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:49:38.336857  44:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:49:38.336857  45:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:49:38.336857  46:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:49:38.336857  47:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:49:38.336857  48:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:49:38.336857  49:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:49:38.336857  50:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:49:38.336857  51:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:49:38.336857  52:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:49:38.336857  53:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:49:38.336857  54:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:49:38.336857  55:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:49:38.336857  56:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:49:38.336857  57:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:49:38.336857  58:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:49:38.336857  59:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:49:38.336857  60:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:49:38.336857  61:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:49:38.336857  62:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:49:38.336857  63:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:49:38.336857  64:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:49:38.336857  65:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:49:38.336857  66:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:49:38.336857  67:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:49:38.336857  68:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:49:38.336857  69:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:49:38.336857  70:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:49:38.336857  71:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:49:38.336857  72:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:49:38.336857  73:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:49:38.336857  74:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:49:38.336857  75:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:49:38.336857  76:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:49:38.336857  77:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:49:38.336857  78:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:49:38.336857  79:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:49:38.336857  80:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:49:38.336857  81:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:49:38.336857  82:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:49:38.336857  83:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:49:38.336857  84:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:49:38.336857  85:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:49:38.336857  86:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:49:38.336857  87:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:49:38.336857  88:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:49:38.336857  89:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:49:38.336857  90:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:49:38.336857  91:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:49:38.336857  92:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:49:38.336857  93:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:49:38.336857  94:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:49:38.337383  95:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:49:38.337411  96:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:49:38.337411  97:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:49:38.337411  98:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:49:38.337411  99:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:49:38.337411 100:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:49:38.337411 101:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:49:38.337411 102:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:49:38.337411 103:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:49:38.337411 104:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:49:38.337411 105:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:49:38.337411 106:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:49:38.337411 107:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:49:38.337411 108:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:49:38.337411 109:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:49:38.337411 110:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:49:38.337411 111:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:49:38.337411 112:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:49:38.337411 113:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:49:38.337411 114:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:49:38.337411 115:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:49:38.337411 116:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:49:38.337411 117:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:49:38.337411 118:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:49:38.337411 119:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:49:38.337411 120: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:49:38.337411 121:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:114                          
17:49:38.337411 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@21)[0m
17:49:38.337411 [92m                 textDocument/didChange:             > 11:0-16:60 -> ""[0m
17:49:38.337411 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:49:38.337411 OUT Elapsed: 0s
17:49:38.337411 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:49:38.337411 IN Elapsed: 0s
17:49:38.337411 [92mIDE --> LS REQU textDocument/documentSymbol 64[0m
17:49:38.337411 [92m                textDocument/documentSymbol 64: [93mread-locked[0m[0m
17:49:38.337954 [92m                textDocument/documentSymbol 64: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:38.337954 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 61[0m
17:49:38.337954 OUT Elapsed: 0s
17:49:38.416207 IN Elapsed: 91.4461ms
17:49:38.416207 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 61[0m
17:49:38.416747 [92m                textDocument/documentSymbol 64: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:49:38.416747 [92m                textDocument/documentSymbol 64:   > convert SymbolKind:Variable 13:0-13:15[0m
17:49:38.417801 [92m                textDocument/documentSymbol 64: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:13:0-13:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:0-11:15 (.ino)[0m
17:49:38.418341 [92m                textDocument/documentSymbol 64: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:13:9-13:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:9-11:11 (.ino)[0m
17:49:38.418341 [92m                textDocument/documentSymbol 64: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:38.418341 [92m                textDocument/documentSymbol 64:   > convert SymbolKind:Function 16:0-16:16[0m
17:49:38.419400 [92m                textDocument/documentSymbol 64: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:16:0-16:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:16 (.ino)[0m
17:49:38.419928 [92m                textDocument/documentSymbol 64: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:16:5-16:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:5-18:10 (.ino)[0m
17:49:38.419928 [92m                textDocument/documentSymbol 64: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:38.419928 [92m                textDocument/documentSymbol 64:   > convert SymbolKind:Function 18:0-18:15[0m
17:49:38.421092 [92m                textDocument/documentSymbol 64: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:18:0-18:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:0-14:15 (.ino)[0m
17:49:38.422144 [92m                textDocument/documentSymbol 64: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:18:5-18:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:5-14:9 (.ino)[0m
17:49:38.422166 [92m                textDocument/documentSymbol 64: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:38.422166 [92m                textDocument/documentSymbol 64:   > convert SymbolKind:Function 20:0-22:1[0m
17:49:38.422683 [92m                textDocument/documentSymbol 64: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-22:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:13:0-18:1 (.ino)[0m
17:49:38.423753 [92m                textDocument/documentSymbol 64: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:5-20:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:13:5-13:10 (.ino)[0m
17:49:38.423753 [92m                textDocument/documentSymbol 64: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:38.423753 [92m                textDocument/documentSymbol 64:   > convert SymbolKind:Function 24:0-120:1[0m
17:49:38.424285 [92m                textDocument/documentSymbol 64: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:24:0-120:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:17:0-113:1 (.ino)[0m
17:49:38.425353 [92m                textDocument/documentSymbol 64: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:24:5-24:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:17:5-17:9 (.ino)[0m
17:49:38.425353 [92m                textDocument/documentSymbol 64: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:38.425353 [92m                textDocument/documentSymbol 64: [93mread-unlocked[0m[0m
17:49:38.425353 [32mIDE <-- LS RESP textDocument/documentSymbol 64[0m
17:49:38.425353 OUT Elapsed: 0s
17:49:38.425353 IN Elapsed: 0s
17:49:38.552736 IN Elapsed: 136.5283ms
17:49:38.552736 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:49:38.552736 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:49:38.858645 IN Elapsed: 433.2924ms
17:49:38.858645 [92mIDE --> LS REQU textDocument/documentSymbol 65[0m
17:49:38.858645 [92m                textDocument/documentSymbol 65: [93mread-locked[0m[0m
17:49:38.859188 [92m                textDocument/documentSymbol 65: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:38.859188 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 62[0m
17:49:38.859188 OUT Elapsed: 0s
17:49:38.859754 IN Elapsed: 307.0184ms
17:49:38.860650 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 62[0m
17:49:38.860650 [92m                textDocument/documentSymbol 65: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:49:38.860650 [92m                textDocument/documentSymbol 65:   > convert SymbolKind:Variable 13:0-13:15[0m
17:49:38.862329 [92m                textDocument/documentSymbol 65: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:13:0-13:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:0-11:15 (.ino)[0m
17:49:38.862856 [92m                textDocument/documentSymbol 65: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:13:9-13:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:9-11:11 (.ino)[0m
17:49:38.862856 [92m                textDocument/documentSymbol 65: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:38.863391 [92m                textDocument/documentSymbol 65:   > convert SymbolKind:Function 16:0-16:16[0m
17:49:38.864480 [92m                textDocument/documentSymbol 65: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:16:0-16:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:16 (.ino)[0m
17:49:38.865569 [92m                textDocument/documentSymbol 65: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:16:5-16:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:5-18:10 (.ino)[0m
17:49:38.865605 [92m                textDocument/documentSymbol 65: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:38.865605 [92m                textDocument/documentSymbol 65:   > convert SymbolKind:Function 18:0-18:15[0m
17:49:38.866166 [92m                textDocument/documentSymbol 65: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:18:0-18:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:0-14:15 (.ino)[0m
17:49:38.867233 [92m                textDocument/documentSymbol 65: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:18:5-18:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:5-14:9 (.ino)[0m
17:49:38.867233 [92m                textDocument/documentSymbol 65: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:38.867233 [92m                textDocument/documentSymbol 65:   > convert SymbolKind:Function 20:0-22:1[0m
17:49:38.867768 [92m                textDocument/documentSymbol 65: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:0-22:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:13:0-18:1 (.ino)[0m
17:49:38.868823 [92m                textDocument/documentSymbol 65: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:20:5-20:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:13:5-13:10 (.ino)[0m
17:49:38.868823 [92m                textDocument/documentSymbol 65: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:38.868823 [92m                textDocument/documentSymbol 65:   > convert SymbolKind:Function 24:0-120:1[0m
17:49:38.869350 [92m                textDocument/documentSymbol 65: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:24:0-120:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:17:0-113:1 (.ino)[0m
17:49:38.870404 [92m                textDocument/documentSymbol 65: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:24:5-24:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:17:5-17:9 (.ino)[0m
17:49:38.870404 [92m                textDocument/documentSymbol 65: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:38.870404 [92m                textDocument/documentSymbol 65: [93mread-unlocked[0m[0m
17:49:38.870404 [32mIDE <-- LS RESP textDocument/documentSymbol 65[0m
17:49:38.870404 OUT Elapsed: 0s
17:49:38.870404 IN Elapsed: 0s
17:49:38.870404 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:49:38.870404 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:49:38.870404 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@19)[0m
17:49:38.870404 [92m                 textDocument/didChange:   > 9:0-10:0 (len=2) -> ""[0m
17:49:38.870934 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

 
OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
-----------------------------[0m
17:49:38.870934 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:38.872004 Ino Range: 9:0-10:0 -> Cpp Range:11:0-12:0
17:49:38.872512   > Current sketchmapper content:
17:49:38.872561   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:49:38.872561   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:49:38.872561   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:49:38.872561   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:49:38.872561   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:49:38.872561   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:49:38.872561   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:49:38.872561   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:49:38.872561   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:49:38.872561   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:49:38.872561  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:49:38.872561  11:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:49:38.872561  12: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:49:38.872561  13:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:49:38.872561  14: #line 19 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:38.872561  15: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:49:38.872561  16: #line 23 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:38.872561  17: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:49:38.872561  18: #line 19 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:49:38.872561  19: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:49:38.872561  20:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:49:38.872561  21: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:12 D:\Arduino_GitHub\Termometer\Termometer.ino:12
17:49:38.872561  22:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:38.872561  23: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:16 D:\Arduino_GitHub\Termometer\Termometer.ino:16
17:49:38.872561  24:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:38.872561  25:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:49:38.872561  26:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:49:38.872561  27:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:49:38.872561  28:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:49:38.872561  29:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:49:38.872561  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:49:38.872561  31:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:49:38.872561  32:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:49:38.872561  33:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:49:38.872561  34:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:49:38.872561  35:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:49:38.872561  36:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:49:38.872561  37:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:49:38.872561  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:49:38.872561  39:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:49:38.872561  40:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:49:38.872561  41:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:49:38.872561  42:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:49:38.872561  43:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:49:38.872561  44:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:49:38.872561  45:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:49:38.872561  46:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:49:38.872561  47:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:49:38.872561  48:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:49:38.872561  49:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:49:38.872561  50:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:49:38.872561  51:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:49:38.873175  52:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:49:38.873175  53:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:49:38.873175  54:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:49:38.873221  55:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:49:38.873221  56:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:49:38.873221  57:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:49:38.873221  58:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:49:38.873221  59:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:49:38.873221  60:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:49:38.873221  61:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:49:38.873221  62:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:49:38.873221  63:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:49:38.873221  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:49:38.873221  65:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:49:38.873221  66:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:49:38.873221  67:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:49:38.873221  68:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:49:38.873221  69:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:49:38.873221  70:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:49:38.873221  71:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:49:38.873221  72:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:49:38.873221  73:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:49:38.873221  74:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:49:38.873221  75:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:49:38.873221  76:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:49:38.873221  77:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:49:38.873221  78:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:49:38.873221  79:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:49:38.873221  80:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:49:38.873221  81:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:49:38.873221  82:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:49:38.873221  83:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:49:38.873221  84:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:49:38.873221  85:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:49:38.873221  86:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:49:38.873221  87:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:49:38.873221  88:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:49:38.873221  89:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:49:38.873221  90:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:49:38.873221  91:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:49:38.873221  92:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:49:38.873221  93:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:49:38.873221  94:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:49:38.873221  95:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:49:38.873221  96:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:49:38.873221  97:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:49:38.873221  98:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:49:38.873221  99:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:49:38.873221 100:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:49:38.873221 101:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:49:38.873221 102:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:49:38.873221 103:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:49:38.873221 104:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:49:38.873221 105:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:49:38.873221 106:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:49:38.873221 107:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:49:38.873221 108:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:49:38.873221 109:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:49:38.873221 110:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:49:38.873221 111:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:49:38.873221 112:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:49:38.873221 113:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:49:38.873221 114:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:49:38.873221 115:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:49:38.873731 116:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:49:38.873731 117:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:49:38.873745 118:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:49:38.873764 119: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:49:38.873764 120:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:49:38.873764 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@22)[0m
17:49:38.873764 [92m                 textDocument/didChange:             > 11:0-12:0 -> ""[0m
17:49:38.873764 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:49:38.873764 OUT Elapsed: 0s
17:49:38.873764 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:49:39.161229 IN Elapsed: 300.5795ms
17:49:39.161761 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:49:39.161924 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:49:39.870570 [95mSKETCH REBUILD: : Sketch rebuild started[0m
17:49:39.870570 [95mSKETCH REBUILD: : [93mread-locked[0m[0m
17:49:39.870570 [92mIDE <-- LS REQU window/workDoneProgress/create 10[0m
17:49:39.870570 [95mSKETCH REBUILD: : [93mread-unlocked[0m[0m
17:49:39.870570 OUT Elapsed: 0s
17:49:39.871128 IN Elapsed: 997.3639ms
17:49:39.871128 [32mIDE --> LS RESP window/workDoneProgress/create 10[0m
17:49:39.871128 [92mIDE <-- LS NOTIF $/progress[0m
17:49:39.871128 OUT Elapsed: 0s
17:49:39.874454 IN Elapsed: 3.3261ms
17:49:39.875008 [92mIDE --> LS NOTIF textDocument/didSave[0m
17:49:39.875008 [92m                 textDocument/didSave: [93mwrite-locked[0m[0m
17:49:39.875008 [92m                 textDocument/didSave: notification is not forwarded to clang[0m
17:49:39.875008 [92m                 textDocument/didSave: [93mwrite-unlocked[0m[0m
17:49:39.877359 [95mSKETCH REBUILD: : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server2510331829\\build",
  "verbose": true,
  "create_compilation_database_only": true,
  "source_override": {
    "Termometer.ino": "/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include \u003cOneWire.h\u003e\r\n#include \u003cDallasTemperature.h\u003e\r\n\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i \u003c 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i \u003c 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] \u003c\u003c 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw \u003c\u003c 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw \u0026 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] \u0026 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw \u0026 ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw \u0026 ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw \u0026 ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}"
  },
  "skip_libraries_discovery": true
}[0m
17:49:40.110431 IN Elapsed: 235.4229ms
17:49:40.110431 [92mIDE --> LS REQU textDocument/documentSymbol 66[0m
17:49:40.110946 [92m                textDocument/documentSymbol 66: [93mread-locked[0m[0m
17:49:40.110972 [92m                textDocument/documentSymbol 66: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:40.111514 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 63[0m
17:49:40.111514 OUT Elapsed: 0s
17:49:40.112052 IN Elapsed: 950.1274ms
17:49:40.112052 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 63[0m
17:49:40.112605 [92m                textDocument/documentSymbol 66: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:49:40.112605 [92m                textDocument/documentSymbol 66:   > convert SymbolKind:Variable 12:0-12:15[0m
17:49:40.114224 [92m                textDocument/documentSymbol 66: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:12:0-12:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:10:0-10:15 (.ino)[0m
17:49:40.115903 [92m                textDocument/documentSymbol 66: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:12:9-12:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:10:9-10:11 (.ino)[0m
17:49:40.115903 [92m                textDocument/documentSymbol 66: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:40.115903 [92m                textDocument/documentSymbol 66:   > convert SymbolKind:Function 15:0-15:16[0m
17:49:40.117537 [92m                textDocument/documentSymbol 66: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:15:0-15:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:16 (.ino)[0m
17:49:40.120105 [92m                textDocument/documentSymbol 66: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:15:5-15:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:5-18:10 (.ino)[0m
17:49:40.120105 [92m                textDocument/documentSymbol 66: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:40.120105 [92m                textDocument/documentSymbol 66:   > convert SymbolKind:Function 17:0-17:15[0m
17:49:40.121736 [92m                textDocument/documentSymbol 66: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:17:0-17:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:0-14:15 (.ino)[0m
17:49:40.123526 [92m                textDocument/documentSymbol 66: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:17:5-17:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:5-14:9 (.ino)[0m
17:49:40.123526 [92m                textDocument/documentSymbol 66: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:40.123526 [92m                textDocument/documentSymbol 66:   > convert SymbolKind:Function 19:0-21:1[0m
17:49:40.124743 [92m                textDocument/documentSymbol 66: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:19:0-21:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:13:0-12:1 (.ino)[0m
17:49:40.125839 [92m                textDocument/documentSymbol 66: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:19:5-19:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:13:5-13:10 (.ino)[0m
17:49:40.125839 [92m                textDocument/documentSymbol 66: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:40.125839 [92m                textDocument/documentSymbol 66:   > convert SymbolKind:Function 23:0-119:1[0m
17:49:40.128232 [92m                textDocument/documentSymbol 66: Range is in PREPROCESSED section of the sketch[0m
17:49:40.128232 [92m                textDocument/documentSymbol 66: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-119:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:16:0-112:1 (.ino)[0m
17:49:40.128232 [92m                textDocument/documentSymbol 66:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:49:40.128743 [92m                textDocument/documentSymbol 66: [93mread-unlocked[0m[0m
17:49:40.128964 [32mIDE <-- LS RESP textDocument/documentSymbol 66[0m
17:49:40.128964 OUT Elapsed: 0s
17:49:40.128964 IN Elapsed: 0s
17:49:40.128964 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:49:40.128964 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:49:40.128964 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@20)[0m
17:49:40.128964 [92m                 textDocument/didChange:   > 9:0-9:1 (len=1) -> ""[0m
17:49:40.129643 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>


OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
-----------------------------[0m
17:49:40.130212 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:40.131873 Ino Range: 9:0-9:1 -> Cpp Range:11:0-11:1
17:49:40.131873   > Current sketchmapper content:
17:49:40.131873   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:49:40.131873   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:49:40.131873   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:49:40.131873   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:49:40.132381   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:49:40.132406   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:49:40.132406   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:49:40.132406   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:49:40.132406   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:49:40.132406   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:49:40.132406  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:49:40.132406  11:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:49:40.132406  12: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:49:40.132406  13:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:49:40.132406  14: #line 19 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:40.132406  15: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:49:40.132406  16: #line 23 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:40.132406  17: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:49:40.132406  18: #line 19 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:49:40.132406  19: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:49:40.132406  20:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:49:40.132406  21: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:12 D:\Arduino_GitHub\Termometer\Termometer.ino:12
17:49:40.132406  22:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:40.132406  23: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:16 D:\Arduino_GitHub\Termometer\Termometer.ino:16
17:49:40.132406  24:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:40.132406  25:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:49:40.132406  26:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:49:40.132406  27:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:49:40.132406  28:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:49:40.132406  29:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:49:40.132406  30:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:49:40.132406  31:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:49:40.132406  32:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:49:40.132406  33:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:49:40.132406  34:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:49:40.132406  35:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:49:40.132406  36:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:49:40.132406  37:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:49:40.132406  38:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:49:40.132406  39:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:49:40.132406  40:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:49:40.132406  41:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:49:40.132406  42:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:49:40.132406  43:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:49:40.132406  44:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:49:40.132406  45:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:49:40.132406  46:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:49:40.132406  47:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:49:40.132406  48:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:49:40.132406  49:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:49:40.132406  50:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:49:40.132406  51:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:49:40.132406  52:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:49:40.132406  53:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:49:40.132406  54:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:49:40.132406  55:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:49:40.132406  56:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:49:40.132406  57:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:49:40.132406  58:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:49:40.132406  59:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:49:40.132406  60:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:49:40.132406  61:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:49:40.132406  62:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:49:40.132406  63:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:49:40.132406  64:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:49:40.132406  65:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:49:40.132406  66:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:49:40.132406  67:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:49:40.132406  68:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:49:40.132406  69:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:49:40.132406  70:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:49:40.132406  71:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:49:40.132912  72:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:49:40.132912  73:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:49:40.132912  74:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:49:40.132912  75:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:49:40.132971  76:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:49:40.132971  77:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:49:40.132971  78:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:49:40.132971  79:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:49:40.132971  80:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:49:40.132971  81:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:49:40.132971  82:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:49:40.132971  83:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:49:40.132971  84:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:49:40.132971  85:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:49:40.132971  86:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:49:40.132971  87:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:49:40.132971  88:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:49:40.132971  89:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:49:40.132971  90:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:49:40.132971  91:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:49:40.132971  92:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:49:40.132971  93:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:49:40.132971  94:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:49:40.132971  95:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:49:40.132971  96:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:49:40.132971  97:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:49:40.132971  98:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:49:40.132971  99:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:49:40.132971 100:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:49:40.132971 101:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:49:40.132971 102:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:49:40.132971 103:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:49:40.132971 104:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:49:40.132971 105:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:49:40.132971 106:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:49:40.132971 107:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:49:40.132971 108:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:49:40.132971 109:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:49:40.132971 110:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:49:40.133482 111:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:49:40.133482 112:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:49:40.133506 113:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:49:40.133523 114:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:49:40.133523 115:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:49:40.133523 116:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:49:40.133523 117:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:49:40.133523 118:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:49:40.133523 119: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:49:40.133523 120:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:113                          
17:49:40.133523 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@23)[0m
17:49:40.133523 [92m                 textDocument/didChange:             > 11:0-11:1 -> ""[0m
17:49:40.133523 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:49:40.133523 OUT Elapsed: 0s
17:49:40.133523 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:49:40.428329 IN Elapsed: 316.2778ms
17:49:40.428329 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:49:40.428329 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:49:40.751127 IN Elapsed: 617.6036ms
17:49:40.751636 [92mIDE --> LS REQU textDocument/documentSymbol 67[0m
17:49:40.751680 [92m                textDocument/documentSymbol 67: [93mread-locked[0m[0m
17:49:40.751680 [92m                textDocument/documentSymbol 67: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:40.751680 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 64[0m
17:49:40.751680 OUT Elapsed: 0s
17:49:40.752240 IN Elapsed: 323.9108ms
17:49:40.752767 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 64[0m
17:49:40.752767 [92m                textDocument/documentSymbol 67: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:49:40.752767 [92m                textDocument/documentSymbol 67:   > convert SymbolKind:Variable 12:0-12:15[0m
17:49:40.753859 [92m                textDocument/documentSymbol 67: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:12:0-12:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:10:0-10:15 (.ino)[0m
17:49:40.754927 [92m                textDocument/documentSymbol 67: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:12:9-12:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:10:9-10:11 (.ino)[0m
17:49:40.754927 [92m                textDocument/documentSymbol 67: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:40.754927 [92m                textDocument/documentSymbol 67:   > convert SymbolKind:Function 15:0-15:16[0m
17:49:40.755988 [92m                textDocument/documentSymbol 67: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:15:0-15:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:0-18:16 (.ino)[0m
17:49:40.756516 [92m                textDocument/documentSymbol 67: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:15:5-15:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:18:5-18:10 (.ino)[0m
17:49:40.757045 [92m                textDocument/documentSymbol 67: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:40.757045 [92m                textDocument/documentSymbol 67:   > convert SymbolKind:Function 17:0-17:15[0m
17:49:40.757579 [92m                textDocument/documentSymbol 67: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:17:0-17:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:0-14:15 (.ino)[0m
17:49:40.758649 [92m                textDocument/documentSymbol 67: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:17:5-17:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:14:5-14:9 (.ino)[0m
17:49:40.758649 [92m                textDocument/documentSymbol 67: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:40.758649 [92m                textDocument/documentSymbol 67:   > convert SymbolKind:Function 19:0-21:1[0m
17:49:40.760382 [92m                textDocument/documentSymbol 67: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:19:0-21:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:13:0-12:1 (.ino)[0m
17:49:40.761537 [92m                textDocument/documentSymbol 67: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:19:5-19:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:13:5-13:10 (.ino)[0m
17:49:40.762083 [92m                textDocument/documentSymbol 67: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:49:40.762083 [92m                textDocument/documentSymbol 67:   > convert SymbolKind:Function 23:0-119:1[0m
17:49:40.763422 [92m                textDocument/documentSymbol 67: Range is in PREPROCESSED section of the sketch[0m
17:49:40.763422 [92m                textDocument/documentSymbol 67: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:23:0-119:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:16:0-112:1 (.ino)[0m
17:49:40.763422 [92m                textDocument/documentSymbol 67:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:49:40.763422 [92m                textDocument/documentSymbol 67: [93mread-unlocked[0m[0m
17:49:40.763422 [32mIDE <-- LS RESP textDocument/documentSymbol 67[0m
17:49:40.763990 OUT Elapsed: 55.6µs
17:49:40.763990 IN Elapsed: 0s
17:49:40.763990 [92mIDE --> LS NOTIF textDocument/didChange[0m
17:49:40.763990 [92m                 textDocument/didChange: [93mwrite-locked[0m[0m
17:49:40.763990 [92m                 textDocument/didChange: didChange(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino@21)[0m
17:49:40.763990 [92m                 textDocument/didChange:   > 9:0-10:0 (len=2) -> ""[0m
17:49:40.764525 [92m                 textDocument/didChange: -----Tracked SKETCH file-----
/*1янв25
Термометр
Проект 9
Scriptor42
*/

#include <OneWire.h>
#include <DallasTemperature.h>

OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)
 
void setup(void) {
  Serial.begin(9600);
}
 
void loop(void) {
  byte i;
  byte present = 0;
  byte type_s;
  byte data[12];
  byte addr[8];
  float celsius, fahrenheit;
   
  if ( !ds.search(addr)) {
    Serial.println("No more addresses.");
    Serial.println();
    ds.reset_search();
    delay(250);
    return;
  }
   
  Serial.print("ROM =");
  for( i = 0; i < 8; i++) {
    Serial.write(' ');
    Serial.print(addr[i], HEX);
  }
 
  if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
  }
  Serial.println();
  
  // the first ROM byte indicates which chip
  switch (addr[0]) {
    case 0x10:
      Serial.println("  Chip = DS18S20");  // or old DS1820
      type_s = 1;
      break;
    case 0x28:
      Serial.println("  Chip = DS18B20");
      type_s = 0;
      break;
    case 0x22:
      Serial.println("  Chip = DS1822");
      type_s = 0;
      break;
    default:
      Serial.println("Device is not a DS18x20 family device.");
      return;
  } 
 
  ds.reset();
  ds.select(addr);
  ds.write(0x44, 1);        // start conversion, with parasite power on at the end
   
  delay(1000);     // maybe 750ms is enough, maybe not
  // we might do a ds.depower() here, but the reset will take care of it.
   
  present = ds.reset();
  ds.select(addr);    
  ds.write(0xBE);         // Read Scratchpad
 
  Serial.print("  Data = ");
  Serial.print(present, HEX);
  Serial.print(" ");
  for ( i = 0; i < 9; i++) {           // we need 9 bytes
    data[i] = ds.read();
    Serial.print(data[i], HEX);
    Serial.print(" ");
  }
  Serial.print(" CRC=");
  Serial.print(OneWire::crc8(data, 8), HEX);
  Serial.println();
 
  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  int16_t raw = (data[1] << 8) | data[0];
  if (type_s) {
    raw = raw << 3; // 9 bit resolution default
    if (data[7] == 0x10) {
      // "count remain" gives full 12 bit resolution
      raw = (raw & 0xFFF0) + 12 - data[6];
    }
  } else {
    byte cfg = (data[4] & 0x60);
    // at lower res, the low bits are undefined, so let's zero them
    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
    //// default is 12 bit resolution, 750 ms conversion time
  }
  celsius = (float)raw / 16.0;
  fahrenheit = celsius * 1.8 + 32.0;
  Serial.print("  Temperature = ");
  Serial.print(celsius);
  Serial.print(" Celsius, ");
  Serial.print(fahrenheit);
  Serial.println(" Fahrenheit");
}
-----------------------------[0m
17:49:40.764851 [92m                 textDocument/didChange: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:40.766700 Ino Range: 9:0-10:0 -> Cpp Range:11:0-12:0
17:49:40.766700   > Current sketchmapper content:
17:49:40.766700   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:49:40.766700   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:49:40.766700   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:49:40.766700   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:49:40.766700   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:49:40.766700   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:49:40.766700   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:49:40.766700   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:49:40.766700   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:49:40.766700   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:49:40.766700  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:49:40.766700  11: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:49:40.766700  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:49:40.767210  13: #line 19 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:40.767230  14: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:49:40.767244  15: #line 23 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:40.767244  16: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:49:40.767244  17: #line 19 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:49:40.767244  18: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:49:40.767244  19:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:49:40.767244  20: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:49:40.767244  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:11 D:\Arduino_GitHub\Termometer\Termometer.ino:11
17:49:40.767244  22: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:49:40.767244  23:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:16 D:\Arduino_GitHub\Termometer\Termometer.ino:15
17:49:40.767244  24:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:40.767244  25:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:49:40.767244  26:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:49:40.767244  27:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:49:40.767244  28:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:49:40.767244  29:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:49:40.767244  30:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:49:40.767244  31:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:49:40.767244  32:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:49:40.767244  33:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:49:40.767244  34:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:49:40.767244  35:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:49:40.767244  36:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:49:40.767244  37:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:49:40.767244  38:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:49:40.767244  39:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:49:40.767244  40:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:49:40.767244  41:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:49:40.767244  42:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:49:40.767244  43:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:49:40.767244  44:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:49:40.767244  45:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:49:40.767244  46:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:49:40.767244  47:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:49:40.767244  48:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:49:40.767244  49:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:49:40.767244  50:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:49:40.767244  51:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:49:40.767244  52:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:49:40.767244  53:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:49:40.767244  54:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:49:40.767244  55:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:49:40.767244  56:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:49:40.767244  57:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:49:40.767751  58:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:49:40.767766  59:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:49:40.767780  60:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:49:40.767797  61:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:49:40.767797  62:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:49:40.767797  63:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:49:40.767797  64:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:49:40.767797  65:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:49:40.767797  66:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:49:40.767797  67:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:49:40.767797  68:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:49:40.767797  69:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:49:40.767797  70:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:49:40.767797  71:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:49:40.767797  72:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:49:40.767797  73:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:49:40.767797  74:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:49:40.767797  75:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:49:40.767797  76:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:49:40.767797  77:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:49:40.767797  78:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:49:40.767797  79:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:49:40.767797  80:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:49:40.767797  81:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:49:40.767797  82:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:49:40.767797  83:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:49:40.767797  84:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:49:40.767797  85:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:49:40.767797  86:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:49:40.767797  87:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:49:40.767797  88:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:49:40.767797  89:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:49:40.767797  90:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:49:40.767797  91:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:49:40.767797  92:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:49:40.767797  93:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:49:40.767797  94:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:49:40.767797  95:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:49:40.767797  96:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:49:40.767797  97:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:49:40.767797  98:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:49:40.767797  99:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:49:40.767797 100:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:49:40.767797 101:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:49:40.767797 102:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:49:40.767797 103:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:49:40.767797 104:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:49:40.767797 105:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:49:40.768304 106:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:49:40.768316 107:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:49:40.768316 108:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:49:40.768316 109:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:49:40.768316 110:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:49:40.768316 111:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:49:40.768316 112:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:49:40.768316 113:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:49:40.768316 114:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:49:40.768316 115:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:49:40.768316 116:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:49:40.768316 117:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:49:40.768316 118: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:49:40.768316 119:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:49:40.768316 [92m                 textDocument/didChange: to Clang: didChange(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp@24)[0m
17:49:40.768316 [92m                 textDocument/didChange:             > 11:0-12:0 -> ""[0m
17:49:40.768316 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:49:40.768316 OUT Elapsed: 0s
17:49:40.768316 [92m                 textDocument/didChange: [93mwrite-unlocked[0m[0m
17:49:41.065491 IN Elapsed: 297.1746ms
17:49:41.065491 [92mIDE --> LS REQU textDocument/hover 68[0m
17:49:41.065491 [92m                textDocument/hover 68: [93mread-locked[0m[0m
17:49:41.065491 [92m                textDocument/hover 68: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:41.067489 [92m                textDocument/hover 68: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:17 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:11:17[0m
17:49:41.067489 [91mIDE     LS --> Clangd REQU textDocument/hover 65[0m
17:49:41.067489 OUT Elapsed: 0s
17:49:41.093490 IN Elapsed: 340.723ms
17:49:41.093490 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:49:41.093490 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:49:41.097493 IN Elapsed: 4.0033ms
17:49:41.097493 [31mIDE     LS <-- Clangd RESP textDocument/hover 65[0m
17:49:41.097493 [92m                textDocument/hover 68: null response[0m
17:49:41.097493 [92m                textDocument/hover 68: [93mread-unlocked[0m[0m
17:49:41.097493 [32mIDE <-- LS RESP textDocument/hover 68[0m
17:49:41.097493 OUT Elapsed: 0s
17:49:41.537361 [95mSKETCH REBUILD: : Compile successful![0m
17:49:41.555517 [95mSKETCH REBUILD: : [93mwrite-locked[0m[0m
17:49:41.555517 [95mSKETCH REBUILD: : [93mwrite-unlocked[0m[0m
17:49:41.555517 [95mSKETCH REBUILD: : Error: context canceled[0m
17:49:41.556055 [92mIDE <-- LS NOTIF $/progress[0m
17:49:41.556055 OUT Elapsed: 0s
17:49:41.792062 IN Elapsed: 694.5692ms
17:49:41.792104 [92mIDE --> LS NOTIF textDocument/didSave[0m
17:49:41.792104 [92m                 textDocument/didSave: [93mwrite-locked[0m[0m
17:49:41.792104 [92m                 textDocument/didSave: notification is not forwarded to clang[0m
17:49:41.792104 [92m                 textDocument/didSave: [93mwrite-unlocked[0m[0m
17:49:42.793277 [95mSKETCH REBUILD: : Sketch rebuild started[0m
17:49:42.793277 [95mSKETCH REBUILD: : [93mread-locked[0m[0m
17:49:42.793277 [95mSKETCH REBUILD: : [93mread-unlocked[0m[0m
17:49:42.793277 [92mIDE <-- LS REQU window/workDoneProgress/create 11[0m
17:49:42.793277 OUT Elapsed: 0s
17:49:42.794287 IN Elapsed: 1.0021834s
17:49:42.794287 [32mIDE --> LS RESP window/workDoneProgress/create 11[0m
17:49:42.794287 [92mIDE <-- LS NOTIF $/progress[0m
17:49:42.794287 OUT Elapsed: 0s
17:49:42.798124 [95mSKETCH REBUILD: : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server2510331829\\build",
  "verbose": true,
  "create_compilation_database_only": true,
  "source_override": {
    "Termometer.ino": "/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include \u003cOneWire.h\u003e\r\n#include \u003cDallasTemperature.h\u003e\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i \u003c 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i \u003c 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] \u003c\u003c 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw \u003c\u003c 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw \u0026 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] \u0026 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw \u0026 ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw \u0026 ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw \u0026 ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}"
  },
  "skip_libraries_discovery": true
}[0m
17:49:44.360652 [95mSKETCH REBUILD: : Compile successful![0m
17:49:44.378578 [95mSKETCH REBUILD: : [93mwrite-locked[0m[0m
17:49:44.379686   > Current sketchmapper content:
17:49:44.379686   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:49:44.379686   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:49:44.379686   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:49:44.379686   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:49:44.379686   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:49:44.379686   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:49:44.379686   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:49:44.379686   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:49:44.379686   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:49:44.379686   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:49:44.379686  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:49:44.379686  11: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:49:44.379686  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:49:44.379686  13: #line 12 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:44.379686  14: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:11 D:\Arduino_GitHub\Termometer\Termometer.ino:11
17:49:44.379686  15: #line 16 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:44.379686  16: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:15 D:\Arduino_GitHub\Termometer\Termometer.ino:15
17:49:44.379686  17: #line 12 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:49:44.379686  18: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:49:44.379686  19:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:49:44.379686  20: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:49:44.379686  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:49:44.379686  22: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:49:44.379686  23:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:49:44.379686  24:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:49:44.379686  25:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:49:44.379686  26:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:49:44.379686  27:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:49:44.379686  28:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:49:44.379686  29:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:49:44.379686  30:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:49:44.379686  31:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:49:44.379686  32:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:49:44.379686  33:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:49:44.379686  34:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:49:44.379686  35:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:49:44.379686  36:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:49:44.379686  37:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:49:44.379686  38:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:49:44.379686  39:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:49:44.379686  40:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:49:44.379686  41:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:49:44.379686  42:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:49:44.379686  43:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:49:44.379686  44:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:49:44.379686  45:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:49:44.379686  46:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:49:44.379686  47:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:49:44.379686  48:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:49:44.379686  49:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:49:44.379686  50:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:49:44.379686  51:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:49:44.379686  52:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:49:44.379686  53:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:49:44.379686  54:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:49:44.379686  55:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:49:44.379686  56:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:49:44.379686  57:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:49:44.379686  58:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:49:44.379686  59:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:49:44.379686  60:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:49:44.379686  61:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:49:44.380193  62:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:49:44.380205  63:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:49:44.380205  64:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:49:44.380205  65:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:49:44.380232  66:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:49:44.380232  67:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:49:44.380232  68:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:49:44.380232  69:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:49:44.380232  70:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:49:44.380232  71:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:49:44.380232  72:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:49:44.380232  73:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:49:44.380232  74:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:49:44.380232  75:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:49:44.380232  76:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:49:44.380232  77:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:49:44.380232  78:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:49:44.380232  79:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:49:44.380232  80:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:49:44.380232  81:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:49:44.380232  82:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:49:44.380232  83:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:49:44.380232  84:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:49:44.380232  85:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:49:44.380232  86:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:49:44.380232  87:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:49:44.380232  88:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:49:44.380232  89:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:49:44.380232  90:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:49:44.380232  91:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:49:44.380232  92:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:49:44.380232  93:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:49:44.380232  94:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:49:44.380232  95:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:49:44.380232  96:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:49:44.380232  97:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:49:44.380232  98:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:49:44.380232  99:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:49:44.380232 100:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:49:44.380232 101:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:49:44.380232 102:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:49:44.380232 103:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:49:44.380232 104:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:49:44.380232 105:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:49:44.380232 106:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:49:44.380232 107:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:49:44.380232 108:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:49:44.380232 109:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:49:44.380232 110:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:49:44.380232 111:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:49:44.380232 112:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:49:44.380232 113:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:49:44.380232 114:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:49:44.380232 115:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:49:44.380232 116:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:49:44.380232 117:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:49:44.380232 118: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:49:44.380232 119:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:49:44.380232 [95mSKETCH REBUILD: : Sending 'didSave' notification to Clangd[0m
17:49:44.380776 [91mIDE     LS --> Clangd NOTIF textDocument/didSave[0m
17:49:44.380776 OUT Elapsed: 0s
17:49:44.380776 [95mSKETCH REBUILD: : Sending full-text 'didChange' notification to Clangd[0m
17:49:44.380776 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:49:44.380776 OUT Elapsed: 0s
17:49:44.380776 [95mSKETCH REBUILD: : [93mwrite-unlocked[0m[0m
17:49:44.380776 [92mIDE <-- LS NOTIF $/progress[0m
17:49:44.380776 OUT Elapsed: 0s
17:49:44.443843 IN Elapsed: 3.3463502s
17:49:44.444652 [91mIDE     LS <-- Clangd REQU window/workDoneProgress/create 4[0m
17:49:44.444652 [31mIDE     LS --> Clangd RESP window/workDoneProgress/create 4[0m
17:49:44.444862 [92mIDE <-- LS REQU window/workDoneProgress/create 12[0m
17:49:44.445015 OUT Elapsed: 362.4µs
17:49:44.445015 OUT Elapsed: 153.1µs
17:49:44.445015 IN Elapsed: 0s
17:49:44.445015 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:49:44.445015 [91m                            $/progress: backgroundIndexProgress BEGIN indexing, 0.0%[0m
17:49:44.445015 IN Elapsed: 0s
17:49:44.445015 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:49:44.445015 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
17:49:44.445015 IN Elapsed: 1.6507277s
17:49:44.445575 [32mIDE --> LS RESP window/workDoneProgress/create 12[0m
17:49:44.445575 [92mIDE <-- LS NOTIF $/progress[0m
17:49:44.445575 OUT Elapsed: 0s
17:49:44.445575 [92mIDE <-- LS NOTIF $/progress[0m
17:49:44.445575 OUT Elapsed: 0s
17:49:44.499891 IN Elapsed: 54.8766ms
17:49:44.499891 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:49:44.499891 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
17:49:44.499891 IN Elapsed: 0s
17:49:44.499891 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:49:44.499891 [91m                            $/progress: backgroundIndexProgress END [0m
17:49:44.499891 [92mIDE <-- LS NOTIF $/progress[0m
17:49:44.499891 OUT Elapsed: 0s
17:49:44.499891 [92mIDE <-- LS NOTIF $/progress[0m
17:49:44.499891 OUT Elapsed: 0s
17:49:44.508888 IN Elapsed: 8.9965ms
17:49:44.508888 [91mIDE     LS <-- Clangd NOTIF textDocument/publishDiagnostics[0m
17:49:44.508888 [91m                            textDocument/publishDiagnostics: Ignored by configuration[0m
17:49:46.613659 IN Elapsed: 2.1681294s
17:49:46.613659 [92mIDE --> LS REQU textDocument/hover 69[0m
17:49:46.613659 [92m                textDocument/hover 69: [93mread-locked[0m[0m
17:49:46.613659 [92m                textDocument/hover 69: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:46.615246 [92m                textDocument/hover 69: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:66:30 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:73:30[0m
17:49:46.615246 [91mIDE     LS --> Clangd REQU textDocument/hover 66[0m
17:49:46.615246 OUT Elapsed: 0s
17:49:46.617998 IN Elapsed: 2.1091101s
17:49:46.618039 [31mIDE     LS <-- Clangd RESP textDocument/hover 66[0m
17:49:46.618039 [92m                textDocument/hover 69: null response[0m
17:49:46.618039 [92m                textDocument/hover 69: [93mread-unlocked[0m[0m
17:49:46.618039 [32mIDE <-- LS RESP textDocument/hover 69[0m
17:49:46.618039 OUT Elapsed: 0s
17:49:47.969114 IN Elapsed: 1.3510748s
17:49:47.969174 [92mIDE --> LS REQU textDocument/hover 70[0m
17:49:47.969174 [92m                textDocument/hover 70: [93mread-locked[0m[0m
17:49:47.969174 [92m                textDocument/hover 70: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:47.970231 [92m                textDocument/hover 70: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:104:24 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:111:24[0m
17:49:47.970231 [91mIDE     LS --> Clangd REQU textDocument/hover 67[0m
17:49:47.970753 OUT Elapsed: 16.8µs
17:49:47.972838 IN Elapsed: 1.3547992s
17:49:47.972838 [31mIDE     LS <-- Clangd RESP textDocument/hover 67[0m
17:49:47.972838 [92m                textDocument/hover 70: null response[0m
17:49:47.972838 [92m                textDocument/hover 70: [93mread-unlocked[0m[0m
17:49:47.972838 [32mIDE <-- LS RESP textDocument/hover 70[0m
17:49:47.972838 OUT Elapsed: 0s
17:49:48.373412 IN Elapsed: 400.5737ms
17:49:48.373412 [92mIDE --> LS REQU textDocument/hover 71[0m
17:49:48.373412 [92m                textDocument/hover 71: [93mread-locked[0m[0m
17:49:48.373412 [92m                textDocument/hover 71: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:48.375036 [92m                textDocument/hover 71: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:106:22 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:113:22[0m
17:49:48.375036 [91mIDE     LS --> Clangd REQU textDocument/hover 68[0m
17:49:48.375569 OUT Elapsed: 533.6µs
17:49:48.379056 IN Elapsed: 406.2174ms
17:49:48.379056 [31mIDE     LS <-- Clangd RESP textDocument/hover 68[0m
17:49:48.379056 [92m                textDocument/hover 71: null response[0m
17:49:48.379056 [92m                textDocument/hover 71: [93mread-unlocked[0m[0m
17:49:48.379056 [32mIDE <-- LS RESP textDocument/hover 71[0m
17:49:48.379056 OUT Elapsed: 0s
17:49:50.486327 IN Elapsed: 2.107271s
17:49:50.486327 [92mIDE --> LS REQU textDocument/hover 72[0m
17:49:50.486327 [92m                textDocument/hover 72: [93mread-locked[0m[0m
17:49:50.486872 [92m                textDocument/hover 72: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:49:50.487961 [92m                textDocument/hover 72: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:101:44 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:108:44[0m
17:49:50.487961 [91mIDE     LS --> Clangd REQU textDocument/hover 69[0m
17:49:50.487961 OUT Elapsed: 0s
17:49:50.492870 IN Elapsed: 2.1138147s
17:49:50.492870 [31mIDE     LS <-- Clangd RESP textDocument/hover 69[0m
17:49:50.492870 [92m                textDocument/hover 72: null response[0m
17:49:50.493382 [92m                textDocument/hover 72: [93mread-unlocked[0m[0m
17:49:50.493382 [32mIDE <-- LS RESP textDocument/hover 72[0m
17:49:50.493426 OUT Elapsed: 0s
17:50:00.863481 IN Elapsed: 10.3700559s
17:50:00.863481 [92mIDE --> LS NOTIF ino/didCompleteBuild[0m
17:50:00.864482 [92m                 ino/didCompleteBuild: [93mwrite-locked[0m[0m
17:50:00.868136 [92m                 ino/didCompleteBuild: Updated 'libraries.cache'. Copied: C:\Users\рс\AppData\Local\arduino\sketches\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\libraries.cache to C:\Users\рс\AppData\Local\Temp\arduino-language-server2510331829\build\libraries.cache[0m
17:50:00.868656 [92m                 ino/didCompleteBuild: [93mwrite-unlocked[0m[0m
17:50:01.873000 [95mSKETCH REBUILD: : Sketch rebuild started[0m
17:50:01.873000 [95mSKETCH REBUILD: : [93mread-locked[0m[0m
17:50:01.873000 [95mSKETCH REBUILD: : [93mread-unlocked[0m[0m
17:50:01.873000 [92mIDE <-- LS REQU window/workDoneProgress/create 13[0m
17:50:01.873000 OUT Elapsed: 0s
17:50:01.873000 IN Elapsed: 1.0043445s
17:50:01.873000 [32mIDE --> LS RESP window/workDoneProgress/create 13[0m
17:50:01.873000 [92mIDE <-- LS NOTIF $/progress[0m
17:50:01.873000 OUT Elapsed: 0s
17:50:01.879851 [95mSKETCH REBUILD: : Running build with: {
  "instance": {
    "id": 1
  },
  "fqbn": "arduino:avr:leonardo",
  "sketch_path": "D:\\Arduino_GitHub\\Termometer",
  "build_path": "C:\\Users\\рс\\AppData\\Local\\Temp\\arduino-language-server2510331829\\build",
  "verbose": true,
  "create_compilation_database_only": true,
  "source_override": {
    "Termometer.ino": "/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include \u003cOneWire.h\u003e\r\n#include \u003cDallasTemperature.h\u003e\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i \u003c 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i \u003c 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] \u003c\u003c 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw \u003c\u003c 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw \u0026 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] \u0026 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw \u0026 ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw \u0026 ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw \u0026 ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}"
  },
  "skip_libraries_discovery": true
}[0m
17:50:03.457212 [95mSKETCH REBUILD: : Compile successful![0m
17:50:03.476069 [95mSKETCH REBUILD: : [93mwrite-locked[0m[0m
17:50:03.477183   > Current sketchmapper content:
17:50:03.477183   0: #include <Arduino.h>                                         | /not-ino:0                                         
17:50:03.477183   1: #line 1 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"     | /not-ino:0                                         
17:50:03.477183   2: /*1янв25                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:0                          
17:50:03.477183   3: Термометр                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:1                          
17:50:03.477183   4: Проект 9                                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:2                          
17:50:03.477183   5: Scriptor42                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:3                          
17:50:03.477183   6: */                                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:4                          
17:50:03.477183   7:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:5                          
17:50:03.477183   8: #include <OneWire.h>                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:6                          
17:50:03.477183   9: #include <DallasTemperature.h>                               | D:\Arduino_GitHub\Termometer\Termometer.ino:7                          
17:50:03.477183  10:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:8                          
17:50:03.477183  11: OneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary | D:\Arduino_GitHub\Termometer\Termometer.ino:9                          
17:50:03.477183  12:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:10                          
17:50:03.477183  13: #line 12 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:50:03.477183  14: void setup(void);                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:11 D:\Arduino_GitHub\Termometer\Termometer.ino:11
17:50:03.477183  15: #line 16 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:50:03.477183  16: void loop(void);                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:15 D:\Arduino_GitHub\Termometer\Termometer.ino:15
17:50:03.477183  17: #line 12 "D:\\Arduino_GitHub\\Termometer\\Termometer.ino"    | /not-ino:0                                         
17:50:03.477183  18: void setup(void) {                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:11                          
17:50:03.477183  19:   Serial.begin(9600);                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:12                          
17:50:03.477183  20: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:13                          
17:50:03.477183  21:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:14                          
17:50:03.477183  22: void loop(void) {                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:15                          
17:50:03.477183  23:   byte i;                                                    | D:\Arduino_GitHub\Termometer\Termometer.ino:16                          
17:50:03.477183  24:   byte present = 0;                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:17                          
17:50:03.477183  25:   byte type_s;                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:18                          
17:50:03.477183  26:   byte data[12];                                             | D:\Arduino_GitHub\Termometer\Termometer.ino:19                          
17:50:03.477183  27:   byte addr[8];                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:20                          
17:50:03.477183  28:   float celsius, fahrenheit;                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:21                          
17:50:03.477690  29:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:22                          
17:50:03.477703  30:   if ( !ds.search(addr)) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:23                          
17:50:03.477713  31:     Serial.println("No more addresses.");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:24                          
17:50:03.477713  32:     Serial.println();                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:25                          
17:50:03.477713  33:     ds.reset_search();                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:26                          
17:50:03.477713  34:     delay(250);                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:27                          
17:50:03.477713  35:     return;                                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:28                          
17:50:03.477713  36:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:29                          
17:50:03.477713  37:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:30                          
17:50:03.477713  38:   Serial.print("ROM =");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:31                          
17:50:03.477713  39:   for( i = 0; i < 8; i++) {                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:32                          
17:50:03.477713  40:     Serial.write(' ');                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:33                          
17:50:03.477713  41:     Serial.print(addr[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:34                          
17:50:03.477713  42:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:35                          
17:50:03.477713  43:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:36                          
17:50:03.477713  44:   if (OneWire::crc8(addr, 7) != addr[7]) {                   | D:\Arduino_GitHub\Termometer\Termometer.ino:37                          
17:50:03.477713  45:       Serial.println("CRC is not valid!");                   | D:\Arduino_GitHub\Termometer\Termometer.ino:38                          
17:50:03.477713  46:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:39                          
17:50:03.477713  47:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:40                          
17:50:03.477713  48:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:41                          
17:50:03.477713  49:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:42                          
17:50:03.477713  50:   // the first ROM byte indicates which chip                 | D:\Arduino_GitHub\Termometer\Termometer.ino:43                          
17:50:03.477713  51:   switch (addr[0]) {                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:44                          
17:50:03.477713  52:     case 0x10:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:45                          
17:50:03.477713  53:       Serial.println("  Chip = DS18S20");  // or old DS1820  | D:\Arduino_GitHub\Termometer\Termometer.ino:46                          
17:50:03.477713  54:       type_s = 1;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:47                          
17:50:03.477713  55:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:48                          
17:50:03.477713  56:     case 0x28:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:49                          
17:50:03.477713  57:       Serial.println("  Chip = DS18B20");                    | D:\Arduino_GitHub\Termometer\Termometer.ino:50                          
17:50:03.477713  58:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:51                          
17:50:03.477713  59:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:52                          
17:50:03.477713  60:     case 0x22:                                               | D:\Arduino_GitHub\Termometer\Termometer.ino:53                          
17:50:03.477713  61:       Serial.println("  Chip = DS1822");                     | D:\Arduino_GitHub\Termometer\Termometer.ino:54                          
17:50:03.477713  62:       type_s = 0;                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:55                          
17:50:03.477713  63:       break;                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:56                          
17:50:03.477713  64:     default:                                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:57                          
17:50:03.477713  65:       Serial.println("Device is not a DS18x20 family device. | D:\Arduino_GitHub\Termometer\Termometer.ino:58                          
17:50:03.477713  66:       return;                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:59                          
17:50:03.477713  67:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:60                          
17:50:03.477713  68:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:61                          
17:50:03.477713  69:   ds.reset();                                                | D:\Arduino_GitHub\Termometer\Termometer.ino:62                          
17:50:03.477713  70:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:63                          
17:50:03.477713  71:   ds.write(0x44, 1);        // start conversion, with parasi | D:\Arduino_GitHub\Termometer\Termometer.ino:64                          
17:50:03.477713  72:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:65                          
17:50:03.477713  73:   delay(1000);     // maybe 750ms is enough, maybe not       | D:\Arduino_GitHub\Termometer\Termometer.ino:66                          
17:50:03.477713  74:   // we might do a ds.depower() here, but the reset will tak | D:\Arduino_GitHub\Termometer\Termometer.ino:67                          
17:50:03.477713  75:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:68                          
17:50:03.477713  76:   present = ds.reset();                                      | D:\Arduino_GitHub\Termometer\Termometer.ino:69                          
17:50:03.477713  77:   ds.select(addr);                                           | D:\Arduino_GitHub\Termometer\Termometer.ino:70                          
17:50:03.477713  78:   ds.write(0xBE);         // Read Scratchpad                 | D:\Arduino_GitHub\Termometer\Termometer.ino:71                          
17:50:03.477713  79:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:72                          
17:50:03.477713  80:   Serial.print("  Data = ");                                 | D:\Arduino_GitHub\Termometer\Termometer.ino:73                          
17:50:03.477713  81:   Serial.print(present, HEX);                                | D:\Arduino_GitHub\Termometer\Termometer.ino:74                          
17:50:03.477713  82:   Serial.print(" ");                                         | D:\Arduino_GitHub\Termometer\Termometer.ino:75                          
17:50:03.477713  83:   for ( i = 0; i < 9; i++) {           // we need 9 bytes    | D:\Arduino_GitHub\Termometer\Termometer.ino:76                          
17:50:03.477713  84:     data[i] = ds.read();                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:77                          
17:50:03.477713  85:     Serial.print(data[i], HEX);                              | D:\Arduino_GitHub\Termometer\Termometer.ino:78                          
17:50:03.477713  86:     Serial.print(" ");                                       | D:\Arduino_GitHub\Termometer\Termometer.ino:79                          
17:50:03.477713  87:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:80                          
17:50:03.477713  88:   Serial.print(" CRC=");                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:81                          
17:50:03.477713  89:   Serial.print(OneWire::crc8(data, 8), HEX);                 | D:\Arduino_GitHub\Termometer\Termometer.ino:82                          
17:50:03.477713  90:   Serial.println();                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:83                          
17:50:03.477713  91:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:84                          
17:50:03.477713  92:   // Convert the data to actual temperature                  | D:\Arduino_GitHub\Termometer\Termometer.ino:85                          
17:50:03.477713  93:   // because the result is a 16 bit signed integer, it shoul | D:\Arduino_GitHub\Termometer\Termometer.ino:86                          
17:50:03.477713  94:   // be stored to an "int16_t" type, which is always 16 bits | D:\Arduino_GitHub\Termometer\Termometer.ino:87                          
17:50:03.477713  95:   // even when compiled on a 32 bit processor.               | D:\Arduino_GitHub\Termometer\Termometer.ino:88                          
17:50:03.477713  96:   int16_t raw = (data[1] << 8) | data[0];                    | D:\Arduino_GitHub\Termometer\Termometer.ino:89                          
17:50:03.478220  97:   if (type_s) {                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:90                          
17:50:03.478231  98:     raw = raw << 3; // 9 bit resolution default              | D:\Arduino_GitHub\Termometer\Termometer.ino:91                          
17:50:03.478240  99:     if (data[7] == 0x10) {                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:92                          
17:50:03.478240 100:       // "count remain" gives full 12 bit resolution         | D:\Arduino_GitHub\Termometer\Termometer.ino:93                          
17:50:03.478240 101:       raw = (raw & 0xFFF0) + 12 - data[6];                   | D:\Arduino_GitHub\Termometer\Termometer.ino:94                          
17:50:03.478240 102:     }                                                        | D:\Arduino_GitHub\Termometer\Termometer.ino:95                          
17:50:03.478240 103:   } else {                                                   | D:\Arduino_GitHub\Termometer\Termometer.ino:96                          
17:50:03.478240 104:     byte cfg = (data[4] & 0x60);                             | D:\Arduino_GitHub\Termometer\Termometer.ino:97                          
17:50:03.478240 105:     // at lower res, the low bits are undefined, so let's ze | D:\Arduino_GitHub\Termometer\Termometer.ino:98                          
17:50:03.478240 106:     if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 9 | D:\Arduino_GitHub\Termometer\Termometer.ino:99                          
17:50:03.478240 107:     else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187 | D:\Arduino_GitHub\Termometer\Termometer.ino:100                          
17:50:03.478240 108:     else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 | D:\Arduino_GitHub\Termometer\Termometer.ino:101                          
17:50:03.478240 109:     //// default is 12 bit resolution, 750 ms conversion tim | D:\Arduino_GitHub\Termometer\Termometer.ino:102                          
17:50:03.478240 110:   }                                                          | D:\Arduino_GitHub\Termometer\Termometer.ino:103                          
17:50:03.478240 111:   celsius = (float)raw / 16.0;                               | D:\Arduino_GitHub\Termometer\Termometer.ino:104                          
17:50:03.478240 112:   fahrenheit = celsius * 1.8 + 32.0;                         | D:\Arduino_GitHub\Termometer\Termometer.ino:105                          
17:50:03.478240 113:   Serial.print("  Temperature = ");                          | D:\Arduino_GitHub\Termometer\Termometer.ino:106                          
17:50:03.478240 114:   Serial.print(celsius);                                     | D:\Arduino_GitHub\Termometer\Termometer.ino:107                          
17:50:03.478240 115:   Serial.print(" Celsius, ");                                | D:\Arduino_GitHub\Termometer\Termometer.ino:108                          
17:50:03.478240 116:   Serial.print(fahrenheit);                                  | D:\Arduino_GitHub\Termometer\Termometer.ino:109                          
17:50:03.478240 117:   Serial.println(" Fahrenheit");                             | D:\Arduino_GitHub\Termometer\Termometer.ino:110                          
17:50:03.478240 118: }                                                            | D:\Arduino_GitHub\Termometer\Termometer.ino:111                          
17:50:03.478240 119:                                                              | D:\Arduino_GitHub\Termometer\Termometer.ino:112                          
17:50:03.478240 [95mSKETCH REBUILD: : Sending 'didSave' notification to Clangd[0m
17:50:03.478240 [91mIDE     LS --> Clangd NOTIF textDocument/didSave[0m
17:50:03.478240 OUT Elapsed: 0s
17:50:03.478240 [95mSKETCH REBUILD: : Sending full-text 'didChange' notification to Clangd[0m
17:50:03.478240 [91mIDE     LS --> Clangd NOTIF textDocument/didChange[0m
17:50:03.478240 OUT Elapsed: 0s
17:50:03.478240 [95mSKETCH REBUILD: : [93mwrite-unlocked[0m[0m
17:50:03.478240 [92mIDE <-- LS NOTIF $/progress[0m
17:50:03.478240 OUT Elapsed: 0s
17:50:03.561536 IN Elapsed: 13.0686658s
17:50:03.561536 [91mIDE     LS <-- Clangd REQU window/workDoneProgress/create 5[0m
17:50:03.562537 [31mIDE     LS --> Clangd RESP window/workDoneProgress/create 5[0m
17:50:03.562537 OUT Elapsed: 0s
17:50:03.562537 IN Elapsed: 0s
17:50:03.562537 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:50:03.562537 [91m                            $/progress: backgroundIndexProgress BEGIN indexing, 0.0%[0m
17:50:03.562537 IN Elapsed: 0s
17:50:03.562537 [92mIDE <-- LS REQU window/workDoneProgress/create 14[0m
17:50:03.563533 OUT Elapsed: 996µs
17:50:03.562537 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:50:03.563533 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
17:50:03.563533 IN Elapsed: 1.6905325s
17:50:03.564533 [32mIDE --> LS RESP window/workDoneProgress/create 14[0m
17:50:03.564533 [92mIDE <-- LS NOTIF $/progress[0m
17:50:03.564533 OUT Elapsed: 0s
17:50:03.564533 [92mIDE <-- LS NOTIF $/progress[0m
17:50:03.564533 OUT Elapsed: 0s
17:50:03.617787 IN Elapsed: 54.2546ms
17:50:03.617787 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:50:03.617787 [91m                            $/progress: backgroundIndexProgress REPORT, 0/1, 0.0%[0m
17:50:03.617787 IN Elapsed: 0s
17:50:03.617787 [92mIDE <-- LS NOTIF $/progress[0m
17:50:03.617787 [91mIDE     LS <-- Clangd NOTIF $/progress[0m
17:50:03.617787 OUT Elapsed: 0s
17:50:03.617787 [91m                            $/progress: backgroundIndexProgress END [0m
17:50:03.617787 [92mIDE <-- LS NOTIF $/progress[0m
17:50:03.617787 OUT Elapsed: 0s
17:53:17.289263 IN Elapsed: 3m13.7247301s
17:53:17.289263 [92mIDE --> LS REQU textDocument/documentSymbol 73[0m
17:53:17.289263 [92m                textDocument/documentSymbol 73: [93mread-locked[0m[0m
17:53:17.289790 [92m                textDocument/documentSymbol 73: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:53:17.289790 [91mIDE     LS --> Clangd REQU textDocument/documentSymbol 70[0m
17:53:17.289790 OUT Elapsed: 0s
17:53:17.294171 IN Elapsed: 3m13.676384s
17:53:17.294171 [31mIDE     LS <-- Clangd RESP textDocument/documentSymbol 70[0m
17:53:17.294709 [92m                textDocument/documentSymbol 73: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (5 document symbols)[0m
17:53:17.294709 [92m                textDocument/documentSymbol 73:   > convert SymbolKind:Variable 11:0-11:15[0m
17:53:17.295827 [92m                textDocument/documentSymbol 73: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:11:0-11:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:0-9:15 (.ino)[0m
17:53:17.296396 [92m                textDocument/documentSymbol 73: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:11:9-11:11 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:9:9-9:11 (.ino)[0m
17:53:17.296396 [92m                textDocument/documentSymbol 73: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:53:17.296908 [92m                textDocument/documentSymbol 73:   > convert SymbolKind:Function 14:0-14:16[0m
17:53:17.297498 [92m                textDocument/documentSymbol 73: Range is in PREPROCESSED section of the sketch[0m
17:53:17.297498 [92m                textDocument/documentSymbol 73: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:14:0-14:16 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:0-11:16 (.ino)[0m
17:53:17.297498 [92m                textDocument/documentSymbol 73:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:53:17.298006 [92m                textDocument/documentSymbol 73:   > convert SymbolKind:Function 16:0-16:15[0m
17:53:17.299440 [92m                textDocument/documentSymbol 73: Range is in PREPROCESSED section of the sketch[0m
17:53:17.299952 [92m                textDocument/documentSymbol 73: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:16:0-16:15 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:15:0-15:15 (.ino)[0m
17:53:17.299995 [92m                textDocument/documentSymbol 73:     symbol is in the preprocessed section of the sketch.ino.cpp, skipping[0m
17:53:17.299995 [92m                textDocument/documentSymbol 73:   > convert SymbolKind:Function 18:0-20:1[0m
17:53:17.301099 [92m                textDocument/documentSymbol 73: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:18:0-20:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:0-13:1 (.ino)[0m
17:53:17.302782 [92m                textDocument/documentSymbol 73: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:18:5-18:10 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:11:5-11:10 (.ino)[0m
17:53:17.302782 [92m                textDocument/documentSymbol 73: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:53:17.302782 [92m                textDocument/documentSymbol 73:   > convert SymbolKind:Function 22:0-118:1[0m
17:53:17.304449 [92m                textDocument/documentSymbol 73: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:22:0-118:1 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:15:0-111:1 (.ino)[0m
17:53:17.305656 [92m                textDocument/documentSymbol 73: Range: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:22:5-22:9 -> file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:15:5-15:9 (.ino)[0m
17:53:17.305656 [92m                textDocument/documentSymbol 73: file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp (0 document symbols)[0m
17:53:17.305656 [92m                textDocument/documentSymbol 73: [93mread-unlocked[0m[0m
17:53:17.305656 [32mIDE <-- LS RESP textDocument/documentSymbol 73[0m
17:53:17.305656 OUT Elapsed: 0s
17:53:17.521861 IN Elapsed: 215.6916ms
17:53:17.521861 [92mIDE --> LS REQU textDocument/codeAction 74[0m
17:53:17.521861 [92m                textDocument/codeAction 74: [93mread-locked[0m[0m
17:53:17.521861 [92m                textDocument/codeAction 74: --> codeAction(file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:108:29)[0m
17:53:17.522390 [92m                textDocument/codeAction 74: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:53:17.525057 [92m                textDocument/codeAction 74:     --> codeAction(file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:108:29)[0m
17:53:17.525057 [91mIDE     LS --> Clangd REQU textDocument/codeAction 71[0m
17:53:17.525057 OUT Elapsed: 0s
17:53:17.525581 IN Elapsed: 231.41ms
17:53:17.525581 [31mIDE     LS <-- Clangd RESP textDocument/codeAction 71[0m
17:53:17.525581 [92m                textDocument/codeAction 74: [93mread-unlocked[0m[0m
17:53:17.525581 [32mIDE <-- LS RESP textDocument/codeAction 74[0m
17:53:17.525581 OUT Elapsed: 0s
17:53:19.374659 IN Elapsed: 1.849078s
17:53:19.374884 [92mIDE --> LS REQU textDocument/hover 75[0m
17:53:19.374884 [92m                textDocument/hover 75: [93mread-locked[0m[0m
17:53:19.375569 [92m                textDocument/hover 75: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:53:19.378464 [92m                textDocument/hover 75: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:101:57 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:108:57[0m
17:53:19.379020 [91mIDE     LS --> Clangd REQU textDocument/hover 72[0m
17:53:19.379104 OUT Elapsed: 31.1µs
17:53:19.381995 IN Elapsed: 1.8564139s
17:53:19.381995 [31mIDE     LS <-- Clangd RESP textDocument/hover 72[0m
17:53:19.381995 [92m                textDocument/hover 75: null response[0m
17:53:19.381995 [92m                textDocument/hover 75: [93mread-unlocked[0m[0m
17:53:19.381995 [32mIDE <-- LS RESP textDocument/hover 75[0m
17:53:19.381995 OUT Elapsed: 0s
17:53:21.406976 IN Elapsed: 2.0249803s
17:53:21.407615 [92mIDE --> LS REQU textDocument/hover 76[0m
17:53:21.407615 [92m                textDocument/hover 76: [93mread-locked[0m[0m
17:53:21.407615 [92m                textDocument/hover 76: URI: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp[0m
17:53:21.408671 [92m                textDocument/hover 76: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:98:65 -> file:///c%3A/Users/%D1%80%D1%81/AppData/Local/Temp/arduino-language-server2510331829/build/sketch/Termometer.ino.cpp:105:65[0m
17:53:21.408671 [91mIDE     LS --> Clangd REQU textDocument/hover 73[0m
17:53:21.408671 OUT Elapsed: 0s
17:53:21.411118 IN Elapsed: 2.0291227s
17:53:21.411118 [31mIDE     LS <-- Clangd RESP textDocument/hover 73[0m
17:53:21.411118 [92m                textDocument/hover 76: null response[0m
17:53:21.411118 [92m                textDocument/hover 76: [93mread-unlocked[0m[0m
17:53:21.411118 [32mIDE <-- LS RESP textDocument/hover 76[0m
17:53:21.411118 OUT Elapsed: 0s

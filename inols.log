






Started logging.

<<<
Content-Length: 3007

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":21140,"clientInfo":{"name":"vscode","version":"1.80.0"},"rootPath":"d:\\Arduino_GitHub\\Termometer","rootUri":"file:///d%3A/Arduino_GitHub/Termometer","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///d%3A/Arduino_GitHub/Termometer","name":"Termometer"}]}}
>>>
Content-Length: 940

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.0.0-git"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 739

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","languageId":"cpp","version":1,"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n#define ONE_WIRE_BUS 2\r\n\r\nOneWire oneWire(ONE_WIRE_BUS);\r\nDallasTemperature sensors(&oneWire);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n  sensors.begin();\r\n}\r\n\r\nvoid loop() {\r\n  sensors.requestTemperatures();\r\n  float temperatureC = sensors.getTempCByIndex(0);\r\n  Serial.print(\"Temperature: \");\r\n  Serial.print(temperatureC);\r\n  Serial.println(\" °C\");\r\n  delay(1000);\r\n}\r\n\r\n"}}}Content-Length: 252

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 153

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 113

{"jsonrpc":"2.0","id":"1","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 36

{"jsonrpc":"2.0","id":1,"result":[]}Content-Length: 864

{"jsonrpc":"2.0","id":2,"result":[{"name":"oneWire","detail":"int","kind":13,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":15}},"selectionRange":{"start":{"line":11,"character":8},"end":{"line":11,"character":15}}},{"name":"sensors","detail":"int","kind":13,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":25}},"selectionRange":{"start":{"line":12,"character":18},"end":{"line":12,"character":25}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":26,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":9}}}]}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"1","result":null}Content-Length: 21523

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildPath":"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","buildOutputUri":"file:///c%3A/Users/%D1%80%D1%81/AppData/Local/arduino/sketches/D3D3BD4A9EF75B21D6254DA8EDFB7FF8","executableSectionsSize":[],"usedLibraries":[{"name":"OneWire","author":"Jim Studt, Tom Pollard, Robin James, Glenn Trewitt, Jason Dangel, Guillermo Lovato, Paul Stoffregen, Scott Roberts, Bertrik Sikken, Mark Tillotson, Ken Butcher, Roger Clark, Love Nystrom","maintainer":"Paul Stoffregen","sentence":"Access 1-wire temperature sensors, memory and other chips.","paragraph":"","website":"http://www.pjrc.com/teensy/td_libs_OneWire.html","category":"Communication","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"2.3.8","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS18x20_Temperature","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS2408_Switch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS250x_PROM"],"providesIncludes":["OneWire.h"],"properties":{},"compatibleWith":{}}],"buildPlatform":{"id":"arduino:avr","version":"1.8.6","installDir":"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","packageUrl":""},"buildProperties":["_id=leonardo","archive_file_path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}","bootloader.extended_fuses=0xcb","bootloader.file=caterina/Caterina-Leonardo.hex","bootloader.high_fuses=0xd8","bootloader.lock_bits=0x2F","bootloader.low_fuses=0xff","bootloader.tool=avrdude","bootloader.tool.default=avrdude","bootloader.unlock_bits=0x3F","build.arch=AVR","build.board=AVR_LEONARDO","build.board.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.core=arduino","build.core.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\cores\\arduino","build.core.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.extra_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.f_cpu=16000000L","build.fqbn=arduino:avr:leonardo","build.library_discovery_phase=0","build.mcu=atmega32u4","build.path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","build.pid=0x8036","build.project_name=Termometer.ino","build.source.path=D:\\Arduino_GitHub\\Termometer","build.system.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\system","build.usb_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.usb_manufacturer=\"Unknown\"","build.usb_product=\"Arduino Leonardo\"","build.variant=leonardo","build.variant.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\variants\\leonardo","build.vid=0x2341","compiler.S.extra_flags=","compiler.S.flags=-c -g -x assembler-with-cpp -flto -MMD","compiler.ar.cmd=avr-gcc-ar","compiler.ar.extra_flags=","compiler.ar.flags=rcs","compiler.c.cmd=avr-gcc","compiler.c.elf.cmd=avr-gcc","compiler.c.elf.extra_flags=","compiler.c.elf.flags=-w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections","compiler.c.extra_flags=","compiler.c.flags=-c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects","compiler.cpp.cmd=avr-g++","compiler.cpp.extra_flags=","compiler.cpp.flags=-c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto","compiler.elf2hex.cmd=avr-objcopy","compiler.elf2hex.extra_flags=","compiler.elf2hex.flags=-O ihex -R .eeprom","compiler.ldflags=","compiler.libraries.ldflags=","compiler.objcopy.cmd=avr-objcopy","compiler.objcopy.eep.extra_flags=","compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0","compiler.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/","compiler.size.cmd=avr-size","compiler.warning_flags=-w","compiler.warning_flags.all=-Wall -Wextra","compiler.warning_flags.default=","compiler.warning_flags.more=-Wall","compiler.warning_flags.none=-w","extra.time.dst=0","extra.time.local=1735745166","extra.time.utc=1735734366","extra.time.zone=10800","ide_version=10607","name=Arduino Leonardo","pid.0=0x0036","pid.1=0x8036","pid.2=0x0036","pid.3=0x8036","pluggable_discovery.required.0=builtin:serial-discovery","pluggable_discovery.required.1=builtin:mdns-discovery","pluggable_monitor.required.serial=builtin:serial-monitor","preproc.includes.flags=-w -x c++ -M -MG -MP","preproc.macros.flags=-w -x c++ -E -CC","recipe.S.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -x assembler-with-cpp -flto -MMD -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.ar.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc-ar\" rcs  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"{object_file}\"","recipe.c.combine.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections -mmcu=atmega32u4   -o \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" {object_files}  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"-LC:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\" -lm","recipe.c.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.cpp.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.objcopy.eep.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.eep\"","recipe.objcopy.hex.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -R .eeprom  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\"","recipe.output.save_file=Termometer.ino.leonardo.hex","recipe.output.tmp_file=Termometer.ino.hex","recipe.preproc.includes=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -M -MG -MP -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\"","recipe.preproc.macros=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -E -CC -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{preprocessed_file_path}\"","recipe.size.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-size\" -A \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\"","recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).*","recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).*","recipe.size.regex.eeprom=^(?:\\.eeprom)\\s+([0-9]+).*","runtime.hardware.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr","runtime.ide.path=C:\\Users\\рс\\AppData\\Local\\Programs\\Arduino IDE\\resources\\app\\lib\\backend\\resources","runtime.ide.version=10607","runtime.os=windows","runtime.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","runtime.tools.arduinoOTA-1.3.0.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arduinoOTA.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.arm-none-eabi-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino5","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino7.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avr-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avrdude-6.3.0-arduino17.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.bossac-1.6.1-arduino.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.bossac.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.ctags-5.8-arduino11.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.ctags.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.dfu-discovery-0.1.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.dfu-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.linux-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\dfu-util","runtime.tools.linux-hid_flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\hid_flash","runtime.tools.linux-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\src","runtime.tools.linux-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stlink","runtime.tools.linux-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux64-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\dfu-util","runtime.tools.linux64-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\src","runtime.tools.linux64-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stlink","runtime.tools.linux64-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.linux64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.macosx-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\dfu-util","runtime.tools.macosx-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\src","runtime.tools.macosx-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stlink","runtime.tools.macosx-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.macosx.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.mdns-discovery-1.0.5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.5","runtime.tools.mdns-discovery-1.0.9.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mdns-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mklittlefs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mklittlefs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.python3-3.7.2-post1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.python3.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.serial-discovery-1.2.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.2.1","runtime.tools.serial-discovery-1.3.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.3.2","runtime.tools.serial-discovery-1.4.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-monitor-0.14.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.serial-monitor-0.9.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.9.1","runtime.tools.serial-monitor.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.stm32tools-2021.5.31.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.stm32tools.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.win-dfu-util-0.9-win64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\dfu-util-0.9-win64","runtime.tools.win-lib.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\lib","runtime.tools.win-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\src","runtime.tools.win-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\stlink","runtime.tools.win-texane-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.win.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.xtensa-lx106-elf-gcc-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","runtime.tools.xtensa-lx106-elf-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","sketch_path=D:\\Arduino_GitHub\\Termometer","software=ARDUINO","tools.arduino_ota.cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.arduino_ota.upload.pattern=\"{cmd}\" -address {upload.port.address} -port {upload.port.properties.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.port.properties.endpoint_upload} -sync {upload.port.properties.endpoint_sync} -reset {upload.port.properties.endpoint_reset} -sync_exp {upload.port.properties.sync_return}","tools.avrdude.bootloader.params.quiet=-q -q","tools.avrdude.bootloader.params.verbose=-v","tools.avrdude.bootloader.pattern=\"{cmd.path}\" \"-C{config.path}\" {bootloader.verbose} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6/bootloaders/caterina/Caterina-Leonardo.hex:i\" -Ulock:w:0x2F:m","tools.avrdude.cmd.path={path}/bin/avrdude","tools.avrdude.config.path={path}/etc/avrdude.conf","tools.avrdude.erase.params.quiet=-q -q","tools.avrdude.erase.params.verbose=-v","tools.avrdude.erase.pattern=\"{cmd.path}\" \"-C{config.path}\" {erase.verbose} -patmega32u4 -c{protocol} {program.extra_params} -e -Ulock:w:0x3F:m -Uefuse:w:0xcb:m -Uhfuse:w:0xd8:m -Ulfuse:w:0xff:m","tools.avrdude.network_cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","tools.avrdude.program.params.noverify=-V","tools.avrdude.program.params.quiet=-q -q","tools.avrdude.program.params.verbose=-v","tools.avrdude.program.pattern=\"{cmd.path}\" \"-C{config.path}\" {program.verbose} {program.verify} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.program.verify=","tools.avrdude.upload.network_pattern=\"{network_cmd}\" -address {serial.port} -port {upload.network.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}","tools.avrdude.upload.params.noverify=-V","tools.avrdude.upload.params.quiet=-q -q","tools.avrdude.upload.params.verbose=-v","tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} {upload.verify} -patmega32u4 -cavr109 \"-P{serial.port}\" -b57600 -D \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.upload.verify=","tools.avrdude_remote.upload.pattern=/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -patmega32u4","upload.disable_flushing=true","upload.maximum_data_size=2560","upload.maximum_size=28672","upload.protocol=avr109","upload.speed=57600","upload.tool=avrdude","upload.tool.default=avrdude","upload.tool.network=arduino_ota","upload.use_1200bps_touch=true","upload.wait_for_upload_port=true","upload_port.0.pid=0x0036","upload_port.0.vid=0x2341","upload_port.1.pid=0x8036","upload_port.1.vid=0x2341","upload_port.2.pid=0x0036","upload_port.2.vid=0x2A03","upload_port.3.pid=0x8036","upload_port.3.vid=0x2A03","upload_port.4.board=leonardo","version=1.8.6","vid.0=0x2341","vid.1=0x2341","vid.2=0x2A03","vid.3=0x2A03"]}}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/2","percentage":50}}}
<<<
Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}Content-Length: 153

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 864

{"jsonrpc":"2.0","id":3,"result":[{"name":"oneWire","detail":"int","kind":13,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":15}},"selectionRange":{"start":{"line":11,"character":8},"end":{"line":11,"character":15}}},{"name":"sensors","detail":"int","kind":13,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":25}},"selectionRange":{"start":{"line":12,"character":18},"end":{"line":12,"character":25}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":26,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":9}}}]}
<<<
Content-Length: 252

{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"jsonrpc":"2.0","id":4,"result":[]}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 118

{"jsonrpc":"2.0","id":"2","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"2","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":21,"character":42}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":5,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":7,"character":24}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":6,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":7,"character":24}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":7,"result":null}
<<<
Content-Length: 58

{"jsonrpc":"2.0","id":8,"method":"shutdown","params":null}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":8,"result":null}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3007

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":21140,"clientInfo":{"name":"vscode","version":"1.80.0"},"rootPath":"d:\\Arduino_GitHub\\Termometer","rootUri":"file:///d%3A/Arduino_GitHub/Termometer","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///d%3A/Arduino_GitHub/Termometer","name":"Termometer"}]}}
>>>
Content-Length: 940

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.0.0-git"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 739

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","languageId":"cpp","version":1,"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n#define ONE_WIRE_BUS 2\r\n\r\nOneWire oneWire(ONE_WIRE_BUS);\r\nDallasTemperature sensors(&oneWire);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n  sensors.begin();\r\n}\r\n\r\nvoid loop() {\r\n  sensors.requestTemperatures();\r\n  float temperatureC = sensors.getTempCByIndex(0);\r\n  Serial.print(\"Temperature: \");\r\n  Serial.print(temperatureC);\r\n  Serial.println(\" °C\");\r\n  delay(1000);\r\n}\r\n\r\n"}}}Content-Length: 252

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 181

{"jsonrpc":"2.0","id":2,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":19}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}Content-Length: 181

{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":7,"character":11}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}
>>>
Content-Length: 113

{"jsonrpc":"2.0","id":"1","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 36

{"jsonrpc":"2.0","id":1,"result":[]}Content-Length: 222

{"jsonrpc":"2.0","id":2,"result":{"contents":{"kind":"markdown","value":"### macro `ONE_WIRE_BUS`  \n\n---\n```cpp\n#define ONE_WIRE_BUS 2\n```"},"range":{"start":{"line":9,"character":8},"end":{"line":9,"character":20}}}}Content-Length: 209

{"jsonrpc":"2.0","id":3,"result":{"contents":{"kind":"markdown","value":"### `DallasTemperature.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\DallasTemperature.h\n```"}}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"1","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/2","percentage":50}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":26}}}
>>>
Content-Length: 225

{"jsonrpc":"2.0","id":4,"result":{"contents":{"kind":"markdown","value":"### macro `ONE_WIRE_BUS`  \n\n---\n```cpp\n#define ONE_WIRE_BUS 2\n```"},"range":{"start":{"line":11,"character":16},"end":{"line":11,"character":28}}}}
<<<
Content-Length: 24193

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildPath":"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","buildOutputUri":"file:///c%3A/Users/%D1%80%D1%81/AppData/Local/arduino/sketches/D3D3BD4A9EF75B21D6254DA8EDFB7FF8","executableSectionsSize":[{"name":"text","size":7544,"maxSize":28672},{"name":"data","size":226,"maxSize":2560}],"usedLibraries":[{"name":"OneWire","author":"Jim Studt, Tom Pollard, Robin James, Glenn Trewitt, Jason Dangel, Guillermo Lovato, Paul Stoffregen, Scott Roberts, Bertrik Sikken, Mark Tillotson, Ken Butcher, Roger Clark, Love Nystrom","maintainer":"Paul Stoffregen","sentence":"Access 1-wire temperature sensors, memory and other chips.","paragraph":"","website":"http://www.pjrc.com/teensy/td_libs_OneWire.html","category":"Communication","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"2.3.8","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS18x20_Temperature","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS2408_Switch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS250x_PROM"],"providesIncludes":["OneWire.h"],"properties":{},"compatibleWith":{}},{"name":"DallasTemperature","author":"Miles Burton <miles@mnetcs.com>, Tim Newsome <nuisance@casualhacker.net>, Guil Barros <gfbarros@bappos.com>, Rob Tillaart <rob.tillaart@gmail.com>","maintainer":"Miles Burton <miles@mnetcs.com>","sentence":"Arduino Library for Dallas Temperature ICs","paragraph":"Supports DS18B20, DS18S20, DS1822, DS1820","website":"https://github.com/milesburton/Arduino-Temperature-Control-Library","category":"Sensors","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"3.9.0","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Alarm","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\AlarmHandler","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\ExternalPullup","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multibus_simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multiple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SaveRecallScratchPad","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SetUserData","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Single","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Tester","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Timing","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\TwoPin_DS18B20","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataDemo","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataWriteBatch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion2","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\oneWireSearch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\readPowerSupply"],"providesIncludes":["DallasTemperature.h"],"properties":{},"compatibleWith":{}}],"buildPlatform":{"id":"arduino:avr","version":"1.8.6","installDir":"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","packageUrl":""},"buildProperties":["_id=leonardo","archive_file_path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}","bootloader.extended_fuses=0xcb","bootloader.file=caterina/Caterina-Leonardo.hex","bootloader.high_fuses=0xd8","bootloader.lock_bits=0x2F","bootloader.low_fuses=0xff","bootloader.tool=avrdude","bootloader.tool.default=avrdude","bootloader.unlock_bits=0x3F","build.arch=AVR","build.board=AVR_LEONARDO","build.board.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.core=arduino","build.core.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\cores\\arduino","build.core.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.extra_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.f_cpu=16000000L","build.fqbn=arduino:avr:leonardo","build.library_discovery_phase=0","build.mcu=atmega32u4","build.path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","build.pid=0x8036","build.project_name=Termometer.ino","build.source.path=D:\\Arduino_GitHub\\Termometer","build.system.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\system","build.usb_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.usb_manufacturer=\"Unknown\"","build.usb_product=\"Arduino Leonardo\"","build.variant=leonardo","build.variant.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\variants\\leonardo","build.vid=0x2341","compiler.S.extra_flags=","compiler.S.flags=-c -g -x assembler-with-cpp -flto -MMD","compiler.ar.cmd=avr-gcc-ar","compiler.ar.extra_flags=","compiler.ar.flags=rcs","compiler.c.cmd=avr-gcc","compiler.c.elf.cmd=avr-gcc","compiler.c.elf.extra_flags=","compiler.c.elf.flags=-w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections","compiler.c.extra_flags=","compiler.c.flags=-c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects","compiler.cpp.cmd=avr-g++","compiler.cpp.extra_flags=","compiler.cpp.flags=-c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto","compiler.elf2hex.cmd=avr-objcopy","compiler.elf2hex.extra_flags=","compiler.elf2hex.flags=-O ihex -R .eeprom","compiler.ldflags=","compiler.libraries.ldflags=","compiler.objcopy.cmd=avr-objcopy","compiler.objcopy.eep.extra_flags=","compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0","compiler.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/","compiler.size.cmd=avr-size","compiler.warning_flags=-w","compiler.warning_flags.all=-Wall -Wextra","compiler.warning_flags.default=","compiler.warning_flags.more=-Wall","compiler.warning_flags.none=-w","extra.time.dst=0","extra.time.local=1735745549","extra.time.utc=1735734749","extra.time.zone=10800","ide_version=10607","name=Arduino Leonardo","pid.0=0x0036","pid.1=0x8036","pid.2=0x0036","pid.3=0x8036","pluggable_discovery.required.0=builtin:serial-discovery","pluggable_discovery.required.1=builtin:mdns-discovery","pluggable_monitor.required.serial=builtin:serial-monitor","preproc.includes.flags=-w -x c++ -M -MG -MP","preproc.macros.flags=-w -x c++ -E -CC","recipe.S.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -x assembler-with-cpp -flto -MMD -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.ar.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc-ar\" rcs  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"{object_file}\"","recipe.c.combine.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections -mmcu=atmega32u4   -o \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" {object_files}  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"-LC:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\" -lm","recipe.c.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.cpp.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.objcopy.eep.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.eep\"","recipe.objcopy.hex.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -R .eeprom  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\"","recipe.output.save_file=Termometer.ino.leonardo.hex","recipe.output.tmp_file=Termometer.ino.hex","recipe.preproc.includes=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -M -MG -MP -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\"","recipe.preproc.macros=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -E -CC -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{preprocessed_file_path}\"","recipe.size.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-size\" -A \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\"","recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).*","recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).*","recipe.size.regex.eeprom=^(?:\\.eeprom)\\s+([0-9]+).*","runtime.hardware.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr","runtime.ide.path=C:\\Users\\рс\\AppData\\Local\\Programs\\Arduino IDE\\resources\\app\\lib\\backend\\resources","runtime.ide.version=10607","runtime.os=windows","runtime.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","runtime.tools.arduinoOTA-1.3.0.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arduinoOTA.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.arm-none-eabi-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino5","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino7.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avr-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avrdude-6.3.0-arduino17.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.bossac-1.6.1-arduino.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.bossac.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.ctags-5.8-arduino11.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.ctags.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.dfu-discovery-0.1.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.dfu-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.linux-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\dfu-util","runtime.tools.linux-hid_flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\hid_flash","runtime.tools.linux-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\src","runtime.tools.linux-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stlink","runtime.tools.linux-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux64-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\dfu-util","runtime.tools.linux64-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\src","runtime.tools.linux64-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stlink","runtime.tools.linux64-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.linux64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.macosx-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\dfu-util","runtime.tools.macosx-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\src","runtime.tools.macosx-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stlink","runtime.tools.macosx-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.macosx.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.mdns-discovery-1.0.5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.5","runtime.tools.mdns-discovery-1.0.9.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mdns-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mklittlefs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mklittlefs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.python3-3.7.2-post1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.python3.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.serial-discovery-1.2.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.2.1","runtime.tools.serial-discovery-1.3.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.3.2","runtime.tools.serial-discovery-1.4.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-monitor-0.14.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.serial-monitor-0.9.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.9.1","runtime.tools.serial-monitor.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.stm32tools-2021.5.31.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.stm32tools.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.win-dfu-util-0.9-win64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\dfu-util-0.9-win64","runtime.tools.win-lib.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\lib","runtime.tools.win-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\src","runtime.tools.win-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\stlink","runtime.tools.win-texane-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.win.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.xtensa-lx106-elf-gcc-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","runtime.tools.xtensa-lx106-elf-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","sketch_path=D:\\Arduino_GitHub\\Termometer","software=ARDUINO","tools.arduino_ota.cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.arduino_ota.upload.pattern=\"{cmd}\" -address {upload.port.address} -port {upload.port.properties.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.port.properties.endpoint_upload} -sync {upload.port.properties.endpoint_sync} -reset {upload.port.properties.endpoint_reset} -sync_exp {upload.port.properties.sync_return}","tools.avrdude.bootloader.params.quiet=-q -q","tools.avrdude.bootloader.params.verbose=-v","tools.avrdude.bootloader.pattern=\"{cmd.path}\" \"-C{config.path}\" {bootloader.verbose} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6/bootloaders/caterina/Caterina-Leonardo.hex:i\" -Ulock:w:0x2F:m","tools.avrdude.cmd.path={path}/bin/avrdude","tools.avrdude.config.path={path}/etc/avrdude.conf","tools.avrdude.erase.params.quiet=-q -q","tools.avrdude.erase.params.verbose=-v","tools.avrdude.erase.pattern=\"{cmd.path}\" \"-C{config.path}\" {erase.verbose} -patmega32u4 -c{protocol} {program.extra_params} -e -Ulock:w:0x3F:m -Uefuse:w:0xcb:m -Uhfuse:w:0xd8:m -Ulfuse:w:0xff:m","tools.avrdude.network_cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","tools.avrdude.program.params.noverify=-V","tools.avrdude.program.params.quiet=-q -q","tools.avrdude.program.params.verbose=-v","tools.avrdude.program.pattern=\"{cmd.path}\" \"-C{config.path}\" {program.verbose} {program.verify} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.program.verify=","tools.avrdude.upload.network_pattern=\"{network_cmd}\" -address {serial.port} -port {upload.network.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}","tools.avrdude.upload.params.noverify=-V","tools.avrdude.upload.params.quiet=-q -q","tools.avrdude.upload.params.verbose=-v","tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} {upload.verify} -patmega32u4 -cavr109 \"-P{serial.port}\" -b57600 -D \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.upload.verify=","tools.avrdude_remote.upload.pattern=/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -patmega32u4","upload.disable_flushing=true","upload.maximum_data_size=2560","upload.maximum_size=28672","upload.protocol=avr109","upload.speed=57600","upload.tool=avrdude","upload.tool.default=avrdude","upload.tool.network=arduino_ota","upload.use_1200bps_touch=true","upload.wait_for_upload_port=true","upload_port.0.pid=0x0036","upload_port.0.vid=0x2341","upload_port.1.pid=0x8036","upload_port.1.vid=0x2341","upload_port.2.pid=0x0036","upload_port.2.vid=0x2A03","upload_port.3.pid=0x8036","upload_port.3.vid=0x2A03","upload_port.4.board=leonardo","version=1.8.6","vid.0=0x2341","vid.1=0x2341","vid.2=0x2A03","vid.3=0x2A03"]}}
>>>
Content-Length: 118

{"jsonrpc":"2.0","id":"2","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"2","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 113

{"jsonrpc":"2.0","id":"3","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"3","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":20}}}
>>>
Content-Length: 225

{"jsonrpc":"2.0","id":5,"result":{"contents":{"kind":"markdown","value":"### macro `ONE_WIRE_BUS`  \n\n---\n```cpp\n#define ONE_WIRE_BUS 2\n```"},"range":{"start":{"line":11,"character":16},"end":{"line":11,"character":28}}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":21}}}
>>>
Content-Length: 225

{"jsonrpc":"2.0","id":6,"result":{"contents":{"kind":"markdown","value":"### macro `ONE_WIRE_BUS`  \n\n---\n```cpp\n#define ONE_WIRE_BUS 2\n```"},"range":{"start":{"line":11,"character":16},"end":{"line":11,"character":28}}}}
<<<
Content-Length: 180

{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":1,"character":3}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":7,"result":null}
<<<
Content-Length: 180

{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":0,"character":0}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":8,"result":null}
<<<
Content-Length: 180

{"jsonrpc":"2.0","id":9,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":0,"character":0}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":9,"result":null}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":28,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":10,"result":[]}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":27,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":11,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":22,"character":20}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":12,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":19}}}
>>>
Content-Length: 290

{"jsonrpc":"2.0","id":13,"result":{"contents":{"kind":"markdown","value":"### variable `temperatureC`  \n\n---\nType: `float`  \n\n---\n```cpp\n// In loop\nfloat temperatureC = sensors.getTempCByIndex(0)\n```"},"range":{"start":{"line":23,"character":15},"end":{"line":23,"character":27}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":17}}}
>>>
Content-Length: 290

{"jsonrpc":"2.0","id":14,"result":{"contents":{"kind":"markdown","value":"### variable `temperatureC`  \n\n---\nType: `float`  \n\n---\n```cpp\n// In loop\nfloat temperatureC = sensors.getTempCByIndex(0)\n```"},"range":{"start":{"line":23,"character":15},"end":{"line":23,"character":27}}}}
<<<
Content-Length: 257

{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":19,"character":13},"end":{"line":19,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":15,"result":[]}
<<<
Content-Length: 255

{"jsonrpc":"2.0","id":16,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":17,"character":1},"end":{"line":17,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":16,"result":[]}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":7,"character":18}}}
>>>
Content-Length: 210

{"jsonrpc":"2.0","id":17,"result":{"contents":{"kind":"markdown","value":"### `DallasTemperature.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\DallasTemperature.h\n```"}}}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":18,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":0,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":18,"result":null}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":19,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":28,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":19,"result":[]}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":27,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":20,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":21,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":22,"character":13}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":21,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":22,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":13}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":22,"result":null}
<<<
Content-Length: 257

{"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":25,"character":14},"end":{"line":25,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":23,"result":[]}
<<<
Content-Length: 59

{"jsonrpc":"2.0","id":24,"method":"shutdown","params":null}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":24,"result":null}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3007

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":33868,"clientInfo":{"name":"vscode","version":"1.80.0"},"rootPath":"d:\\Arduino_GitHub\\Termometer","rootUri":"file:///d%3A/Arduino_GitHub/Termometer","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///d%3A/Arduino_GitHub/Termometer","name":"Termometer"}]}}
>>>
Content-Length: 940

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.0.0-git"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 739

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","languageId":"cpp","version":1,"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n#define ONE_WIRE_BUS 2\r\n\r\nOneWire oneWire(ONE_WIRE_BUS);\r\nDallasTemperature sensors(&oneWire);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n  sensors.begin();\r\n}\r\n\r\nvoid loop() {\r\n  sensors.requestTemperatures();\r\n  float temperatureC = sensors.getTempCByIndex(0);\r\n  Serial.print(\"Temperature: \");\r\n  Serial.print(temperatureC);\r\n  Serial.println(\" °C\");\r\n  delay(1000);\r\n}\r\n\r\n"}}}Content-Length: 256

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":25,"character":14},"end":{"line":25,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 113

{"jsonrpc":"2.0","id":"1","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 36

{"jsonrpc":"2.0","id":1,"result":[]}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"1","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/2","percentage":50}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 194

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":25}}}
>>>
Content-Length: 36

{"jsonrpc":"2.0","id":2,"result":[]}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":11,"character":25},"end":{"line":11,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"jsonrpc":"2.0","id":3,"result":[]}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":20,"character":16}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":4,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":15,"character":16}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":5,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":26}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":6,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":27}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":7,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":7,"character":12}}}
>>>
Content-Length: 179

{"jsonrpc":"2.0","id":8,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 180

{"jsonrpc":"2.0","id":9,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":7,"character":0}}}
>>>
Content-Length: 179

{"jsonrpc":"2.0","id":9,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":10,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":7,"character":1}}}
>>>
Content-Length: 180

{"jsonrpc":"2.0","id":10,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":11,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":2}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":11,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":3}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":12,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":13,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":14,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":15,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":1}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":15,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":14,"character":7}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":16,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":14,"character":8}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":17,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":18,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":14,"character":6}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":18,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":19,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":20,"result":null}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":21,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":28,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":21,"result":[]}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":27,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":22,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":23,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":21,"character":12}}}
>>>
Content-Length: 160

{"jsonrpc":"2.0","id":23,"result":null,"error":{"code":-32603,"message":"Document is not available: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino.cpp"}}






Started logging.

<<<
Content-Length: 3007

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":33868,"clientInfo":{"name":"vscode","version":"1.80.0"},"rootPath":"d:\\Arduino_GitHub\\Termometer","rootUri":"file:///d%3A/Arduino_GitHub/Termometer","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///d%3A/Arduino_GitHub/Termometer","name":"Termometer"}]}}
>>>
Content-Length: 940

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.0.0-git"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 739

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","languageId":"cpp","version":1,"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n#define ONE_WIRE_BUS 2\r\n\r\nOneWire oneWire(ONE_WIRE_BUS);\r\nDallasTemperature sensors(&oneWire);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n  sensors.begin();\r\n}\r\n\r\nvoid loop() {\r\n  sensors.requestTemperatures();\r\n  float temperatureC = sensors.getTempCByIndex(0);\r\n  Serial.print(\"Temperature: \");\r\n  Serial.print(temperatureC);\r\n  Serial.println(\" °C\");\r\n  delay(1000);\r\n}\r\n\r\n"}}}Content-Length: 253

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":27,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 182

{"jsonrpc":"2.0","id":2,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":18}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}Content-Length: 182

{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":29}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}Content-Length: 182

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":27}}}
>>>
Content-Length: 113

{"jsonrpc":"2.0","id":"1","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 36

{"jsonrpc":"2.0","id":1,"result":[]}Content-Length: 289

{"jsonrpc":"2.0","id":2,"result":{"contents":{"kind":"markdown","value":"### variable `temperatureC`  \n\n---\nType: `float`  \n\n---\n```cpp\n// In loop\nfloat temperatureC = sensors.getTempCByIndex(0)\n```"},"range":{"start":{"line":23,"character":15},"end":{"line":23,"character":27}}}}Content-Length: 38

{"jsonrpc":"2.0","id":3,"result":null}Content-Length: 38

{"jsonrpc":"2.0","id":4,"result":null}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"1","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/2","percentage":50}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":23}}}
>>>
Content-Length: 289

{"jsonrpc":"2.0","id":5,"result":{"contents":{"kind":"markdown","value":"### variable `temperatureC`  \n\n---\nType: `float`  \n\n---\n```cpp\n// In loop\nfloat temperatureC = sensors.getTempCByIndex(0)\n```"},"range":{"start":{"line":23,"character":15},"end":{"line":23,"character":27}}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":24,"character":21}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":6,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":24,"character":22}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":7,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":24,"character":22}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":8,"result":null}
<<<
Content-Length: 153

{"jsonrpc":"2.0","id":9,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 154

{"jsonrpc":"2.0","id":10,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":9}}
>>>
Content-Length: 882

{"jsonrpc":"2.0","id":9,"result":[{"name":"oneWire","detail":"OneWire","kind":13,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":29}},"selectionRange":{"start":{"line":11,"character":8},"end":{"line":11,"character":15}}},{"name":"sensors","detail":"DallasTemperature","kind":13,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":35}},"selectionRange":{"start":{"line":12,"character":18},"end":{"line":12,"character":25}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":26,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":9}}}]}Content-Length: 883

{"jsonrpc":"2.0","id":10,"result":[{"name":"oneWire","detail":"OneWire","kind":13,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":29}},"selectionRange":{"start":{"line":11,"character":8},"end":{"line":11,"character":15}}},{"name":"sensors","detail":"DallasTemperature","kind":13,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":35}},"selectionRange":{"start":{"line":12,"character":18},"end":{"line":12,"character":25}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":26,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":9}}}]}
<<<
Content-Length: 3738

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":2},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":27,"character":0}},"rangeLength":373,"text":"#include \"OneWire.h\"\r\n \r\n// OneWire DS18S20, DS18B20, DS1822 Temperature Example\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// The DallasTemperature library can do all this work for you!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\nТеги:\r\n\r\n    Arduino Термометр"}]}}Content-Length: 259

{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":123,"character":21},"end":{"line":123,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 217

{"jsonrpc":"2.0","id":11,"result":null,"error":{"code":-32603,"message":"invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:21-123:21: could not be mapped to Arduino-preprocessed sketck.ino.cpp"}}
<<<
Content-Length: 3767

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":2},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n#include \"OneWire.h\"\r\n \r\n// OneWire DS18S20, DS18B20, DS1822 Temperature Example\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// The DallasTemperature library can do all this work for you!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\nТеги:\r\n\r\n    Arduino Термометр\r\n"}}
>>>
Content-Length: 118

{"jsonrpc":"2.0","id":"2","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"2","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 196

{"jsonrpc":"2.0","id":12,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":123,"character":20}}}
>>>
Content-Length: 217

{"jsonrpc":"2.0","id":12,"result":null,"error":{"code":-32603,"message":"invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:20-123:20: could not be mapped to Arduino-preprocessed sketck.ino.cpp"}}
<<<
Content-Length: 258

{"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":123,"character":3},"end":{"line":123,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 216

{"jsonrpc":"2.0","id":13,"result":null,"error":{"code":-32603,"message":"invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:3-123:21: could not be mapped to Arduino-preprocessed sketck.ino.cpp"}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":123,"character":2}}}
>>>
Content-Length: 215

{"jsonrpc":"2.0","id":14,"result":null,"error":{"code":-32603,"message":"invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:2-123:2: could not be mapped to Arduino-preprocessed sketck.ino.cpp"}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":15,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 280

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":3},"contentChanges":[{"range":{"start":{"line":123,"character":3},"end":{"line":123,"character":21}},"rangeLength":18,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":16,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":15}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":15,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":16,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":17,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":4},"contentChanges":[{"range":{"start":{"line":123,"character":2},"end":{"line":123,"character":3}},"rangeLength":1,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":18,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":17}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":17,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":18,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":19,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":5},"contentChanges":[{"range":{"start":{"line":123,"character":0},"end":{"line":123,"character":2}},"rangeLength":2,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":20,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":19}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":19,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 113

{"jsonrpc":"2.0","id":"3","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 657

{"jsonrpc":"2.0","id":20,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"3","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":21,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":6},"contentChanges":[{"range":{"start":{"line":122,"character":0},"end":{"line":123,"character":0}},"rangeLength":2,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":22,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":21}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":21,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":22,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":23,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":7},"contentChanges":[{"range":{"start":{"line":121,"character":5},"end":{"line":122,"character":0}},"rangeLength":2,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":24,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":23,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":24,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":23}}Content-Length: 257

{"jsonrpc":"2.0","id":25,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":121,"character":5},"end":{"line":121,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":25,"result":[]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":26,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":8},"contentChanges":[{"range":{"start":{"line":121,"character":4},"end":{"line":121,"character":5}},"rangeLength":1,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":27,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":26}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":26,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":27,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":28,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":9},"contentChanges":[{"range":{"start":{"line":121,"character":3},"end":{"line":121,"character":4}},"rangeLength":1,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":29,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":28,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":29,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":28}}Content-Length: 154

{"jsonrpc":"2.0","id":30,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":10},"contentChanges":[{"range":{"start":{"line":121,"character":2},"end":{"line":121,"character":3}},"rangeLength":1,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":31,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":30}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":30,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":31,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":32,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":11},"contentChanges":[{"range":{"start":{"line":121,"character":1},"end":{"line":121,"character":2}},"rangeLength":1,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":33,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":32}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":32,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":33,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 257

{"jsonrpc":"2.0","id":34,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":121,"character":1},"end":{"line":121,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":34,"result":[]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":35,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":12},"contentChanges":[{"range":{"start":{"line":121,"character":0},"end":{"line":121,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":36,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":35}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":35,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":36,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":37,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":13},"contentChanges":[{"range":{"start":{"line":120,"character":1},"end":{"line":121,"character":0}},"rangeLength":2,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":38,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":37}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":37,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":38,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 257

{"jsonrpc":"2.0","id":39,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":120,"character":1},"end":{"line":120,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":39,"result":[]}Content-Length: 118

{"jsonrpc":"2.0","id":"4","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"4","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3717

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":13},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n#include \"OneWire.h\"\r\n \r\n// OneWire DS18S20, DS18B20, DS1822 Temperature Example\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// The DallasTemperature library can do all this work for you!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 184

{"jsonrpc":"2.0","id":40,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":103,"character":34}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":40,"result":{"contents":{"kind":"markdown","value":"### variable `data`  \n\n---\nType: `byte[12]`  \n\n---\n```cpp\n// In loop\nbyte data[12]\n```"},"range":{"start":{"line":103,"character":34},"end":{"line":103,"character":38}}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 118

{"jsonrpc":"2.0","id":"5","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"5","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 113

{"jsonrpc":"2.0","id":"6","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"6","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":41,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":15,"character":53}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":41,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":42,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":9}}}
>>>
Content-Length: 180

{"jsonrpc":"2.0","id":42,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":42}}Content-Length: 181

{"jsonrpc":"2.0","id":43,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 180

{"jsonrpc":"2.0","id":43,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":44,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":19}}}
>>>
Content-Length: 180

{"jsonrpc":"2.0","id":44,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":45,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":2}}}
>>>
Content-Length: 180

{"jsonrpc":"2.0","id":45,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":46,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 180

{"jsonrpc":"2.0","id":46,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":47,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 180

{"jsonrpc":"2.0","id":47,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":48,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":48,"result":[]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":49,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":14},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":20}},"rangeLength":20,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":50,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":49}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":49,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":50,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":51,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 276

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":15},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":10,"character":0}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":51,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":52,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":10,"character":36}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":52,"result":null}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":53,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 275

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":16},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":1}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1073

{"jsonrpc":"2.0","id":53,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":15}},"selectionRange":{"start":{"line":17,"character":9},"end":{"line":17,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":16}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":15}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":21,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":23,"character":0},"end":{"line":119,"character":1}},"selectionRange":{"start":{"line":23,"character":5},"end":{"line":23,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":54,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 276

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":17},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":10,"character":0}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 1073

{"jsonrpc":"2.0","id":54,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":15}},"selectionRange":{"start":{"line":17,"character":9},"end":{"line":17,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":16}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":15}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":21,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":23,"character":0},"end":{"line":119,"character":1}},"selectionRange":{"start":{"line":23,"character":5},"end":{"line":23,"character":9}}}]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":55,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":10,"character":30}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":55,"result":null}Content-Length: 118

{"jsonrpc":"2.0","id":"7","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"7","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3686

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":17},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n// OneWire DS18S20, DS18B20, DS1822 Temperature Example\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// The DallasTemperature library can do all this work for you!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 118

{"jsonrpc":"2.0","id":"8","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"8","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 113

{"jsonrpc":"2.0","id":"9","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"9","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":56,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":12,"character":2}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":56,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":57,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":57,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":58,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":58,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":59,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":1}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":59,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":60,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":60,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":61,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":61,"result":null}
<<<
Content-Length: 255

{"jsonrpc":"2.0","id":62,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":14,"character":60}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":62,"result":[]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":63,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":18},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":14,"character":60}},"rangeLength":241,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":64,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":63,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":16,"character":0},"end":{"line":16,"character":15}},"selectionRange":{"start":{"line":16,"character":9},"end":{"line":16,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":20,"character":1}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":22,"character":0},"end":{"line":118,"character":1}},"selectionRange":{"start":{"line":22,"character":5},"end":{"line":22,"character":9}}}]}Content-Length: 1073

{"jsonrpc":"2.0","id":64,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":15}},"selectionRange":{"start":{"line":11,"character":9},"end":{"line":11,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":16}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":15}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":18,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":113,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}]}
<<<
Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":63}}Content-Length: 154

{"jsonrpc":"2.0","id":65,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 276

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":19},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":10,"character":0}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 1073

{"jsonrpc":"2.0","id":65,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":15}},"selectionRange":{"start":{"line":11,"character":9},"end":{"line":11,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":16}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":15}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":18,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":113,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}]}Content-Length: 119

{"jsonrpc":"2.0","id":"10","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"10","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3431

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":19},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 154

{"jsonrpc":"2.0","id":66,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 275

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":20},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":1}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 866

{"jsonrpc":"2.0","id":66,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":15}},"selectionRange":{"start":{"line":10,"character":9},"end":{"line":10,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":16}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":15}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":10}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":67,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 276

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":21},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":10,"character":0}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 866

{"jsonrpc":"2.0","id":67,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":15}},"selectionRange":{"start":{"line":10,"character":9},"end":{"line":10,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":16}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":15}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":10}}}]}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":68,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":17}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":68,"result":null}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 3426

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":21},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"11","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"11","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"12","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"12","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":69,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":66,"character":30}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":69,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":70,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":104,"character":24}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":70,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":71,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":106,"character":22}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":71,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":72,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":101,"character":44}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":72,"result":null}
<<<
Content-Length: 24193

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildPath":"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","buildOutputUri":"file:///c%3A/Users/%D1%80%D1%81/AppData/Local/arduino/sketches/D3D3BD4A9EF75B21D6254DA8EDFB7FF8","executableSectionsSize":[{"name":"text","size":7202,"maxSize":28672},{"name":"data","size":365,"maxSize":2560}],"usedLibraries":[{"name":"OneWire","author":"Jim Studt, Tom Pollard, Robin James, Glenn Trewitt, Jason Dangel, Guillermo Lovato, Paul Stoffregen, Scott Roberts, Bertrik Sikken, Mark Tillotson, Ken Butcher, Roger Clark, Love Nystrom","maintainer":"Paul Stoffregen","sentence":"Access 1-wire temperature sensors, memory and other chips.","paragraph":"","website":"http://www.pjrc.com/teensy/td_libs_OneWire.html","category":"Communication","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"2.3.8","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS18x20_Temperature","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS2408_Switch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS250x_PROM"],"providesIncludes":["OneWire.h"],"properties":{},"compatibleWith":{}},{"name":"DallasTemperature","author":"Miles Burton <miles@mnetcs.com>, Tim Newsome <nuisance@casualhacker.net>, Guil Barros <gfbarros@bappos.com>, Rob Tillaart <rob.tillaart@gmail.com>","maintainer":"Miles Burton <miles@mnetcs.com>","sentence":"Arduino Library for Dallas Temperature ICs","paragraph":"Supports DS18B20, DS18S20, DS1822, DS1820","website":"https://github.com/milesburton/Arduino-Temperature-Control-Library","category":"Sensors","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"3.9.0","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Alarm","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\AlarmHandler","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\ExternalPullup","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multibus_simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multiple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SaveRecallScratchPad","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SetUserData","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Single","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Tester","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Timing","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\TwoPin_DS18B20","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataDemo","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataWriteBatch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion2","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\oneWireSearch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\readPowerSupply"],"providesIncludes":["DallasTemperature.h"],"properties":{},"compatibleWith":{}}],"buildPlatform":{"id":"arduino:avr","version":"1.8.6","installDir":"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","packageUrl":""},"buildProperties":["_id=leonardo","archive_file_path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}","bootloader.extended_fuses=0xcb","bootloader.file=caterina/Caterina-Leonardo.hex","bootloader.high_fuses=0xd8","bootloader.lock_bits=0x2F","bootloader.low_fuses=0xff","bootloader.tool=avrdude","bootloader.tool.default=avrdude","bootloader.unlock_bits=0x3F","build.arch=AVR","build.board=AVR_LEONARDO","build.board.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.core=arduino","build.core.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\cores\\arduino","build.core.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.extra_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.f_cpu=16000000L","build.fqbn=arduino:avr:leonardo","build.library_discovery_phase=0","build.mcu=atmega32u4","build.path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","build.pid=0x8036","build.project_name=Termometer.ino","build.source.path=D:\\Arduino_GitHub\\Termometer","build.system.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\system","build.usb_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.usb_manufacturer=\"Unknown\"","build.usb_product=\"Arduino Leonardo\"","build.variant=leonardo","build.variant.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\variants\\leonardo","build.vid=0x2341","compiler.S.extra_flags=","compiler.S.flags=-c -g -x assembler-with-cpp -flto -MMD","compiler.ar.cmd=avr-gcc-ar","compiler.ar.extra_flags=","compiler.ar.flags=rcs","compiler.c.cmd=avr-gcc","compiler.c.elf.cmd=avr-gcc","compiler.c.elf.extra_flags=","compiler.c.elf.flags=-w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections","compiler.c.extra_flags=","compiler.c.flags=-c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects","compiler.cpp.cmd=avr-g++","compiler.cpp.extra_flags=","compiler.cpp.flags=-c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto","compiler.elf2hex.cmd=avr-objcopy","compiler.elf2hex.extra_flags=","compiler.elf2hex.flags=-O ihex -R .eeprom","compiler.ldflags=","compiler.libraries.ldflags=","compiler.objcopy.cmd=avr-objcopy","compiler.objcopy.eep.extra_flags=","compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0","compiler.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/","compiler.size.cmd=avr-size","compiler.warning_flags=-w","compiler.warning_flags.all=-Wall -Wextra","compiler.warning_flags.default=","compiler.warning_flags.more=-Wall","compiler.warning_flags.none=-w","extra.time.dst=0","extra.time.local=1735753789","extra.time.utc=1735742989","extra.time.zone=10800","ide_version=10607","name=Arduino Leonardo","pid.0=0x0036","pid.1=0x8036","pid.2=0x0036","pid.3=0x8036","pluggable_discovery.required.0=builtin:serial-discovery","pluggable_discovery.required.1=builtin:mdns-discovery","pluggable_monitor.required.serial=builtin:serial-monitor","preproc.includes.flags=-w -x c++ -M -MG -MP","preproc.macros.flags=-w -x c++ -E -CC","recipe.S.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -x assembler-with-cpp -flto -MMD -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.ar.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc-ar\" rcs  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"{object_file}\"","recipe.c.combine.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections -mmcu=atmega32u4   -o \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" {object_files}  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"-LC:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\" -lm","recipe.c.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.cpp.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.objcopy.eep.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.eep\"","recipe.objcopy.hex.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -R .eeprom  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\"","recipe.output.save_file=Termometer.ino.leonardo.hex","recipe.output.tmp_file=Termometer.ino.hex","recipe.preproc.includes=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -M -MG -MP -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\"","recipe.preproc.macros=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -E -CC -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{preprocessed_file_path}\"","recipe.size.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-size\" -A \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\"","recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).*","recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).*","recipe.size.regex.eeprom=^(?:\\.eeprom)\\s+([0-9]+).*","runtime.hardware.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr","runtime.ide.path=C:\\Users\\рс\\AppData\\Local\\Programs\\Arduino IDE\\resources\\app\\lib\\backend\\resources","runtime.ide.version=10607","runtime.os=windows","runtime.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","runtime.tools.arduinoOTA-1.3.0.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arduinoOTA.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.arm-none-eabi-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino5","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino7.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avr-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avrdude-6.3.0-arduino17.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.bossac-1.6.1-arduino.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.bossac.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.ctags-5.8-arduino11.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.ctags.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.dfu-discovery-0.1.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.dfu-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.linux-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\dfu-util","runtime.tools.linux-hid_flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\hid_flash","runtime.tools.linux-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\src","runtime.tools.linux-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stlink","runtime.tools.linux-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux64-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\dfu-util","runtime.tools.linux64-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\src","runtime.tools.linux64-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stlink","runtime.tools.linux64-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.linux64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.macosx-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\dfu-util","runtime.tools.macosx-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\src","runtime.tools.macosx-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stlink","runtime.tools.macosx-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.macosx.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.mdns-discovery-1.0.5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.5","runtime.tools.mdns-discovery-1.0.9.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mdns-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mklittlefs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mklittlefs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.python3-3.7.2-post1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.python3.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.serial-discovery-1.2.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.2.1","runtime.tools.serial-discovery-1.3.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.3.2","runtime.tools.serial-discovery-1.4.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-monitor-0.14.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.serial-monitor-0.9.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.9.1","runtime.tools.serial-monitor.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.stm32tools-2021.5.31.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.stm32tools.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.win-dfu-util-0.9-win64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\dfu-util-0.9-win64","runtime.tools.win-lib.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\lib","runtime.tools.win-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\src","runtime.tools.win-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\stlink","runtime.tools.win-texane-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.win.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.xtensa-lx106-elf-gcc-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","runtime.tools.xtensa-lx106-elf-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","sketch_path=D:\\Arduino_GitHub\\Termometer","software=ARDUINO","tools.arduino_ota.cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.arduino_ota.upload.pattern=\"{cmd}\" -address {upload.port.address} -port {upload.port.properties.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.port.properties.endpoint_upload} -sync {upload.port.properties.endpoint_sync} -reset {upload.port.properties.endpoint_reset} -sync_exp {upload.port.properties.sync_return}","tools.avrdude.bootloader.params.quiet=-q -q","tools.avrdude.bootloader.params.verbose=-v","tools.avrdude.bootloader.pattern=\"{cmd.path}\" \"-C{config.path}\" {bootloader.verbose} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6/bootloaders/caterina/Caterina-Leonardo.hex:i\" -Ulock:w:0x2F:m","tools.avrdude.cmd.path={path}/bin/avrdude","tools.avrdude.config.path={path}/etc/avrdude.conf","tools.avrdude.erase.params.quiet=-q -q","tools.avrdude.erase.params.verbose=-v","tools.avrdude.erase.pattern=\"{cmd.path}\" \"-C{config.path}\" {erase.verbose} -patmega32u4 -c{protocol} {program.extra_params} -e -Ulock:w:0x3F:m -Uefuse:w:0xcb:m -Uhfuse:w:0xd8:m -Ulfuse:w:0xff:m","tools.avrdude.network_cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","tools.avrdude.program.params.noverify=-V","tools.avrdude.program.params.quiet=-q -q","tools.avrdude.program.params.verbose=-v","tools.avrdude.program.pattern=\"{cmd.path}\" \"-C{config.path}\" {program.verbose} {program.verify} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.program.verify=","tools.avrdude.upload.network_pattern=\"{network_cmd}\" -address {serial.port} -port {upload.network.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}","tools.avrdude.upload.params.noverify=-V","tools.avrdude.upload.params.quiet=-q -q","tools.avrdude.upload.params.verbose=-v","tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} {upload.verify} -patmega32u4 -cavr109 \"-P{serial.port}\" -b57600 -D \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.upload.verify=","tools.avrdude_remote.upload.pattern=/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -patmega32u4","upload.disable_flushing=true","upload.maximum_data_size=2560","upload.maximum_size=28672","upload.protocol=avr109","upload.speed=57600","upload.tool=avrdude","upload.tool.default=avrdude","upload.tool.network=arduino_ota","upload.use_1200bps_touch=true","upload.wait_for_upload_port=true","upload_port.0.pid=0x0036","upload_port.0.vid=0x2341","upload_port.1.pid=0x8036","upload_port.1.vid=0x2341","upload_port.2.pid=0x0036","upload_port.2.vid=0x2A03","upload_port.3.pid=0x8036","upload_port.3.vid=0x2A03","upload_port.4.board=leonardo","version=1.8.6","vid.0=0x2341","vid.1=0x2341","vid.2=0x2A03","vid.3=0x2A03"]}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"13","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"13","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"14","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"14","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":73,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 653

{"jsonrpc":"2.0","id":73,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":111,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 259

{"jsonrpc":"2.0","id":74,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":108,"character":29},"end":{"line":108,"character":29}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":74,"result":[]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":75,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":101,"character":57}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":75,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":76,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":98,"character":65}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":76,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":77,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":7,"character":12}}}
>>>
Content-Length: 210

{"jsonrpc":"2.0","id":77,"result":{"contents":{"kind":"markdown","value":"### `DallasTemperature.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\DallasTemperature.h\n```"}}}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":78,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":0,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":78,"result":null}
<<<
Content-Length: 255

{"jsonrpc":"2.0","id":79,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":112,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":79,"result":[]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":80,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":102,"character":39}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":80,"result":null}
<<<
Content-Length: 257

{"jsonrpc":"2.0","id":81,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":89,"character":41},"end":{"line":89,"character":41}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":81,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":82,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":94,"character":25}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":82,"result":null}
<<<
Content-Length: 24193

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildPath":"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","buildOutputUri":"file:///c%3A/Users/%D1%80%D1%81/AppData/Local/arduino/sketches/D3D3BD4A9EF75B21D6254DA8EDFB7FF8","executableSectionsSize":[{"name":"text","size":7202,"maxSize":28672},{"name":"data","size":365,"maxSize":2560}],"usedLibraries":[{"name":"OneWire","author":"Jim Studt, Tom Pollard, Robin James, Glenn Trewitt, Jason Dangel, Guillermo Lovato, Paul Stoffregen, Scott Roberts, Bertrik Sikken, Mark Tillotson, Ken Butcher, Roger Clark, Love Nystrom","maintainer":"Paul Stoffregen","sentence":"Access 1-wire temperature sensors, memory and other chips.","paragraph":"","website":"http://www.pjrc.com/teensy/td_libs_OneWire.html","category":"Communication","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"2.3.8","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS18x20_Temperature","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS2408_Switch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS250x_PROM"],"providesIncludes":["OneWire.h"],"properties":{},"compatibleWith":{}},{"name":"DallasTemperature","author":"Miles Burton <miles@mnetcs.com>, Tim Newsome <nuisance@casualhacker.net>, Guil Barros <gfbarros@bappos.com>, Rob Tillaart <rob.tillaart@gmail.com>","maintainer":"Miles Burton <miles@mnetcs.com>","sentence":"Arduino Library for Dallas Temperature ICs","paragraph":"Supports DS18B20, DS18S20, DS1822, DS1820","website":"https://github.com/milesburton/Arduino-Temperature-Control-Library","category":"Sensors","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"3.9.0","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Alarm","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\AlarmHandler","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\ExternalPullup","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multibus_simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multiple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SaveRecallScratchPad","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SetUserData","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Single","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Tester","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Timing","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\TwoPin_DS18B20","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataDemo","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataWriteBatch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion2","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\oneWireSearch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\readPowerSupply"],"providesIncludes":["DallasTemperature.h"],"properties":{},"compatibleWith":{}}],"buildPlatform":{"id":"arduino:avr","version":"1.8.6","installDir":"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","packageUrl":""},"buildProperties":["_id=leonardo","archive_file_path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}","bootloader.extended_fuses=0xcb","bootloader.file=caterina/Caterina-Leonardo.hex","bootloader.high_fuses=0xd8","bootloader.lock_bits=0x2F","bootloader.low_fuses=0xff","bootloader.tool=avrdude","bootloader.tool.default=avrdude","bootloader.unlock_bits=0x3F","build.arch=AVR","build.board=AVR_LEONARDO","build.board.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.core=arduino","build.core.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\cores\\arduino","build.core.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.extra_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.f_cpu=16000000L","build.fqbn=arduino:avr:leonardo","build.library_discovery_phase=0","build.mcu=atmega32u4","build.path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","build.pid=0x8036","build.project_name=Termometer.ino","build.source.path=D:\\Arduino_GitHub\\Termometer","build.system.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\system","build.usb_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.usb_manufacturer=\"Unknown\"","build.usb_product=\"Arduino Leonardo\"","build.variant=leonardo","build.variant.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\variants\\leonardo","build.vid=0x2341","compiler.S.extra_flags=","compiler.S.flags=-c -g -x assembler-with-cpp -flto -MMD","compiler.ar.cmd=avr-gcc-ar","compiler.ar.extra_flags=","compiler.ar.flags=rcs","compiler.c.cmd=avr-gcc","compiler.c.elf.cmd=avr-gcc","compiler.c.elf.extra_flags=","compiler.c.elf.flags=-w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections","compiler.c.extra_flags=","compiler.c.flags=-c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects","compiler.cpp.cmd=avr-g++","compiler.cpp.extra_flags=","compiler.cpp.flags=-c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto","compiler.elf2hex.cmd=avr-objcopy","compiler.elf2hex.extra_flags=","compiler.elf2hex.flags=-O ihex -R .eeprom","compiler.ldflags=","compiler.libraries.ldflags=","compiler.objcopy.cmd=avr-objcopy","compiler.objcopy.eep.extra_flags=","compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0","compiler.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/","compiler.size.cmd=avr-size","compiler.warning_flags=-w","compiler.warning_flags.all=-Wall -Wextra","compiler.warning_flags.default=","compiler.warning_flags.more=-Wall","compiler.warning_flags.none=-w","extra.time.dst=0","extra.time.local=1735756914","extra.time.utc=1735746114","extra.time.zone=10800","ide_version=10607","name=Arduino Leonardo","pid.0=0x0036","pid.1=0x8036","pid.2=0x0036","pid.3=0x8036","pluggable_discovery.required.0=builtin:serial-discovery","pluggable_discovery.required.1=builtin:mdns-discovery","pluggable_monitor.required.serial=builtin:serial-monitor","preproc.includes.flags=-w -x c++ -M -MG -MP","preproc.macros.flags=-w -x c++ -E -CC","recipe.S.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -x assembler-with-cpp -flto -MMD -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.ar.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc-ar\" rcs  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"{object_file}\"","recipe.c.combine.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections -mmcu=atmega32u4   -o \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" {object_files}  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"-LC:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\" -lm","recipe.c.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.cpp.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.objcopy.eep.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.eep\"","recipe.objcopy.hex.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -R .eeprom  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\"","recipe.output.save_file=Termometer.ino.leonardo.hex","recipe.output.tmp_file=Termometer.ino.hex","recipe.preproc.includes=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -M -MG -MP -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\"","recipe.preproc.macros=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -E -CC -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{preprocessed_file_path}\"","recipe.size.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-size\" -A \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\"","recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).*","recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).*","recipe.size.regex.eeprom=^(?:\\.eeprom)\\s+([0-9]+).*","runtime.hardware.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr","runtime.ide.path=C:\\Users\\рс\\AppData\\Local\\Programs\\Arduino IDE\\resources\\app\\lib\\backend\\resources","runtime.ide.version=10607","runtime.os=windows","runtime.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","runtime.tools.arduinoOTA-1.3.0.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arduinoOTA.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.arm-none-eabi-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino5","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino7.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avr-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avrdude-6.3.0-arduino17.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.bossac-1.6.1-arduino.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.bossac.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.ctags-5.8-arduino11.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.ctags.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.dfu-discovery-0.1.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.dfu-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.linux-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\dfu-util","runtime.tools.linux-hid_flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\hid_flash","runtime.tools.linux-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\src","runtime.tools.linux-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stlink","runtime.tools.linux-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux64-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\dfu-util","runtime.tools.linux64-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\src","runtime.tools.linux64-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stlink","runtime.tools.linux64-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.linux64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.macosx-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\dfu-util","runtime.tools.macosx-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\src","runtime.tools.macosx-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stlink","runtime.tools.macosx-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.macosx.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.mdns-discovery-1.0.5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.5","runtime.tools.mdns-discovery-1.0.9.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mdns-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mklittlefs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mklittlefs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.python3-3.7.2-post1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.python3.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.serial-discovery-1.2.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.2.1","runtime.tools.serial-discovery-1.3.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.3.2","runtime.tools.serial-discovery-1.4.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-monitor-0.14.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.serial-monitor-0.9.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.9.1","runtime.tools.serial-monitor.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.stm32tools-2021.5.31.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.stm32tools.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.win-dfu-util-0.9-win64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\dfu-util-0.9-win64","runtime.tools.win-lib.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\lib","runtime.tools.win-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\src","runtime.tools.win-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\stlink","runtime.tools.win-texane-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.win.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.xtensa-lx106-elf-gcc-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","runtime.tools.xtensa-lx106-elf-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","sketch_path=D:\\Arduino_GitHub\\Termometer","software=ARDUINO","tools.arduino_ota.cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.arduino_ota.upload.pattern=\"{cmd}\" -address {upload.port.address} -port {upload.port.properties.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.port.properties.endpoint_upload} -sync {upload.port.properties.endpoint_sync} -reset {upload.port.properties.endpoint_reset} -sync_exp {upload.port.properties.sync_return}","tools.avrdude.bootloader.params.quiet=-q -q","tools.avrdude.bootloader.params.verbose=-v","tools.avrdude.bootloader.pattern=\"{cmd.path}\" \"-C{config.path}\" {bootloader.verbose} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6/bootloaders/caterina/Caterina-Leonardo.hex:i\" -Ulock:w:0x2F:m","tools.avrdude.cmd.path={path}/bin/avrdude","tools.avrdude.config.path={path}/etc/avrdude.conf","tools.avrdude.erase.params.quiet=-q -q","tools.avrdude.erase.params.verbose=-v","tools.avrdude.erase.pattern=\"{cmd.path}\" \"-C{config.path}\" {erase.verbose} -patmega32u4 -c{protocol} {program.extra_params} -e -Ulock:w:0x3F:m -Uefuse:w:0xcb:m -Uhfuse:w:0xd8:m -Ulfuse:w:0xff:m","tools.avrdude.network_cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","tools.avrdude.program.params.noverify=-V","tools.avrdude.program.params.quiet=-q -q","tools.avrdude.program.params.verbose=-v","tools.avrdude.program.pattern=\"{cmd.path}\" \"-C{config.path}\" {program.verbose} {program.verify} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.program.verify=","tools.avrdude.upload.network_pattern=\"{network_cmd}\" -address {serial.port} -port {upload.network.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}","tools.avrdude.upload.params.noverify=-V","tools.avrdude.upload.params.quiet=-q -q","tools.avrdude.upload.params.verbose=-v","tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} {upload.verify} -patmega32u4 -cavr109 \"-P{serial.port}\" -b57600 -D \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.upload.verify=","tools.avrdude_remote.upload.pattern=/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -patmega32u4","upload.disable_flushing=true","upload.maximum_data_size=2560","upload.maximum_size=28672","upload.protocol=avr109","upload.speed=57600","upload.tool=avrdude","upload.tool.default=avrdude","upload.tool.network=arduino_ota","upload.use_1200bps_touch=true","upload.wait_for_upload_port=true","upload_port.0.pid=0x0036","upload_port.0.vid=0x2341","upload_port.1.pid=0x8036","upload_port.1.vid=0x2341","upload_port.2.pid=0x0036","upload_port.2.vid=0x2A03","upload_port.3.pid=0x8036","upload_port.3.vid=0x2A03","upload_port.4.board=leonardo","version=1.8.6","vid.0=0x2341","vid.1=0x2341","vid.2=0x2A03","vid.3=0x2A03"]}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"15","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"15","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"16","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"16","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":83,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":91,"character":41}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":83,"result":null}
<<<
Content-Length: 24193

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildPath":"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","buildOutputUri":"file:///c%3A/Users/%D1%80%D1%81/AppData/Local/arduino/sketches/D3D3BD4A9EF75B21D6254DA8EDFB7FF8","executableSectionsSize":[{"name":"text","size":7202,"maxSize":28672},{"name":"data","size":365,"maxSize":2560}],"usedLibraries":[{"name":"OneWire","author":"Jim Studt, Tom Pollard, Robin James, Glenn Trewitt, Jason Dangel, Guillermo Lovato, Paul Stoffregen, Scott Roberts, Bertrik Sikken, Mark Tillotson, Ken Butcher, Roger Clark, Love Nystrom","maintainer":"Paul Stoffregen","sentence":"Access 1-wire temperature sensors, memory and other chips.","paragraph":"","website":"http://www.pjrc.com/teensy/td_libs_OneWire.html","category":"Communication","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"2.3.8","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS18x20_Temperature","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS2408_Switch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS250x_PROM"],"providesIncludes":["OneWire.h"],"properties":{},"compatibleWith":{}},{"name":"DallasTemperature","author":"Miles Burton <miles@mnetcs.com>, Tim Newsome <nuisance@casualhacker.net>, Guil Barros <gfbarros@bappos.com>, Rob Tillaart <rob.tillaart@gmail.com>","maintainer":"Miles Burton <miles@mnetcs.com>","sentence":"Arduino Library for Dallas Temperature ICs","paragraph":"Supports DS18B20, DS18S20, DS1822, DS1820","website":"https://github.com/milesburton/Arduino-Temperature-Control-Library","category":"Sensors","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"3.9.0","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Alarm","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\AlarmHandler","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\ExternalPullup","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multibus_simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multiple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SaveRecallScratchPad","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SetUserData","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Single","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Tester","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Timing","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\TwoPin_DS18B20","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataDemo","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataWriteBatch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion2","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\oneWireSearch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\readPowerSupply"],"providesIncludes":["DallasTemperature.h"],"properties":{},"compatibleWith":{}}],"buildPlatform":{"id":"arduino:avr","version":"1.8.6","installDir":"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","packageUrl":""},"buildProperties":["_id=leonardo","archive_file_path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}","bootloader.extended_fuses=0xcb","bootloader.file=caterina/Caterina-Leonardo.hex","bootloader.high_fuses=0xd8","bootloader.lock_bits=0x2F","bootloader.low_fuses=0xff","bootloader.tool=avrdude","bootloader.tool.default=avrdude","bootloader.unlock_bits=0x3F","build.arch=AVR","build.board=AVR_LEONARDO","build.board.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.core=arduino","build.core.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\cores\\arduino","build.core.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.extra_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.f_cpu=16000000L","build.fqbn=arduino:avr:leonardo","build.library_discovery_phase=0","build.mcu=atmega32u4","build.path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","build.pid=0x8036","build.project_name=Termometer.ino","build.source.path=D:\\Arduino_GitHub\\Termometer","build.system.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\system","build.usb_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.usb_manufacturer=\"Unknown\"","build.usb_product=\"Arduino Leonardo\"","build.variant=leonardo","build.variant.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\variants\\leonardo","build.vid=0x2341","compiler.S.extra_flags=","compiler.S.flags=-c -g -x assembler-with-cpp -flto -MMD","compiler.ar.cmd=avr-gcc-ar","compiler.ar.extra_flags=","compiler.ar.flags=rcs","compiler.c.cmd=avr-gcc","compiler.c.elf.cmd=avr-gcc","compiler.c.elf.extra_flags=","compiler.c.elf.flags=-w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections","compiler.c.extra_flags=","compiler.c.flags=-c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects","compiler.cpp.cmd=avr-g++","compiler.cpp.extra_flags=","compiler.cpp.flags=-c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto","compiler.elf2hex.cmd=avr-objcopy","compiler.elf2hex.extra_flags=","compiler.elf2hex.flags=-O ihex -R .eeprom","compiler.ldflags=","compiler.libraries.ldflags=","compiler.objcopy.cmd=avr-objcopy","compiler.objcopy.eep.extra_flags=","compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0","compiler.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/","compiler.size.cmd=avr-size","compiler.warning_flags=-w","compiler.warning_flags.all=-Wall -Wextra","compiler.warning_flags.default=","compiler.warning_flags.more=-Wall","compiler.warning_flags.none=-w","extra.time.dst=0","extra.time.local=1735756984","extra.time.utc=1735746184","extra.time.zone=10800","ide_version=10607","name=Arduino Leonardo","pid.0=0x0036","pid.1=0x8036","pid.2=0x0036","pid.3=0x8036","pluggable_discovery.required.0=builtin:serial-discovery","pluggable_discovery.required.1=builtin:mdns-discovery","pluggable_monitor.required.serial=builtin:serial-monitor","preproc.includes.flags=-w -x c++ -M -MG -MP","preproc.macros.flags=-w -x c++ -E -CC","recipe.S.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -x assembler-with-cpp -flto -MMD -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.ar.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc-ar\" rcs  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"{object_file}\"","recipe.c.combine.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections -mmcu=atmega32u4   -o \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" {object_files}  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"-LC:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\" -lm","recipe.c.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.cpp.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.objcopy.eep.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.eep\"","recipe.objcopy.hex.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -R .eeprom  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\"","recipe.output.save_file=Termometer.ino.leonardo.hex","recipe.output.tmp_file=Termometer.ino.hex","recipe.preproc.includes=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -M -MG -MP -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\"","recipe.preproc.macros=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -E -CC -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{preprocessed_file_path}\"","recipe.size.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-size\" -A \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\"","recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).*","recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).*","recipe.size.regex.eeprom=^(?:\\.eeprom)\\s+([0-9]+).*","runtime.hardware.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr","runtime.ide.path=C:\\Users\\рс\\AppData\\Local\\Programs\\Arduino IDE\\resources\\app\\lib\\backend\\resources","runtime.ide.version=10607","runtime.os=windows","runtime.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","runtime.tools.arduinoOTA-1.3.0.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arduinoOTA.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.arm-none-eabi-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino5","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino7.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avr-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avrdude-6.3.0-arduino17.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.bossac-1.6.1-arduino.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.bossac.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.ctags-5.8-arduino11.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.ctags.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.dfu-discovery-0.1.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.dfu-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.linux-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\dfu-util","runtime.tools.linux-hid_flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\hid_flash","runtime.tools.linux-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\src","runtime.tools.linux-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stlink","runtime.tools.linux-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux64-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\dfu-util","runtime.tools.linux64-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\src","runtime.tools.linux64-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stlink","runtime.tools.linux64-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.linux64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.macosx-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\dfu-util","runtime.tools.macosx-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\src","runtime.tools.macosx-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stlink","runtime.tools.macosx-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.macosx.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.mdns-discovery-1.0.5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.5","runtime.tools.mdns-discovery-1.0.9.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mdns-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mklittlefs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mklittlefs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.python3-3.7.2-post1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.python3.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.serial-discovery-1.2.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.2.1","runtime.tools.serial-discovery-1.3.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.3.2","runtime.tools.serial-discovery-1.4.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-monitor-0.14.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.serial-monitor-0.9.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.9.1","runtime.tools.serial-monitor.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.stm32tools-2021.5.31.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.stm32tools.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.win-dfu-util-0.9-win64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\dfu-util-0.9-win64","runtime.tools.win-lib.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\lib","runtime.tools.win-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\src","runtime.tools.win-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\stlink","runtime.tools.win-texane-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.win.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.xtensa-lx106-elf-gcc-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","runtime.tools.xtensa-lx106-elf-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","sketch_path=D:\\Arduino_GitHub\\Termometer","software=ARDUINO","tools.arduino_ota.cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.arduino_ota.upload.pattern=\"{cmd}\" -address {upload.port.address} -port {upload.port.properties.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.port.properties.endpoint_upload} -sync {upload.port.properties.endpoint_sync} -reset {upload.port.properties.endpoint_reset} -sync_exp {upload.port.properties.sync_return}","tools.avrdude.bootloader.params.quiet=-q -q","tools.avrdude.bootloader.params.verbose=-v","tools.avrdude.bootloader.pattern=\"{cmd.path}\" \"-C{config.path}\" {bootloader.verbose} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6/bootloaders/caterina/Caterina-Leonardo.hex:i\" -Ulock:w:0x2F:m","tools.avrdude.cmd.path={path}/bin/avrdude","tools.avrdude.config.path={path}/etc/avrdude.conf","tools.avrdude.erase.params.quiet=-q -q","tools.avrdude.erase.params.verbose=-v","tools.avrdude.erase.pattern=\"{cmd.path}\" \"-C{config.path}\" {erase.verbose} -patmega32u4 -c{protocol} {program.extra_params} -e -Ulock:w:0x3F:m -Uefuse:w:0xcb:m -Uhfuse:w:0xd8:m -Ulfuse:w:0xff:m","tools.avrdude.network_cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","tools.avrdude.program.params.noverify=-V","tools.avrdude.program.params.quiet=-q -q","tools.avrdude.program.params.verbose=-v","tools.avrdude.program.pattern=\"{cmd.path}\" \"-C{config.path}\" {program.verbose} {program.verify} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.program.verify=","tools.avrdude.upload.network_pattern=\"{network_cmd}\" -address {serial.port} -port {upload.network.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}","tools.avrdude.upload.params.noverify=-V","tools.avrdude.upload.params.quiet=-q -q","tools.avrdude.upload.params.verbose=-v","tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} {upload.verify} -patmega32u4 -cavr109 \"-P{serial.port}\" -b57600 -D \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.upload.verify=","tools.avrdude_remote.upload.pattern=/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -patmega32u4","upload.disable_flushing=true","upload.maximum_data_size=2560","upload.maximum_size=28672","upload.protocol=avr109","upload.speed=57600","upload.tool=avrdude","upload.tool.default=avrdude","upload.tool.network=arduino_ota","upload.use_1200bps_touch=true","upload.wait_for_upload_port=true","upload_port.0.pid=0x0036","upload_port.0.vid=0x2341","upload_port.1.pid=0x8036","upload_port.1.vid=0x2341","upload_port.2.pid=0x0036","upload_port.2.vid=0x2A03","upload_port.3.pid=0x8036","upload_port.3.vid=0x2A03","upload_port.4.board=leonardo","version=1.8.6","vid.0=0x2341","vid.1=0x2341","vid.2=0x2A03","vid.3=0x2A03"]}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"17","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"17","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"18","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"18","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":84,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":98,"character":36}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":84,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":85,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":98,"character":43}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":85,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":86,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":98,"character":46}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":86,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":87,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":98,"character":47}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":87,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":88,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":99,"character":20}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":88,"result":null}
<<<
Content-Length: 195

{"jsonrpc":"2.0","id":89,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":99,"character":21}}}
>>>
Content-Length: 1110

{"jsonrpc":"2.0","id":89,"result":[{"range":{"start":{"line":89,"character":10},"end":{"line":89,"character":13}},"kind":1},{"range":{"start":{"line":91,"character":4},"end":{"line":91,"character":7}},"kind":3},{"range":{"start":{"line":91,"character":10},"end":{"line":91,"character":13}},"kind":2},{"range":{"start":{"line":94,"character":6},"end":{"line":94,"character":9}},"kind":3},{"range":{"start":{"line":94,"character":13},"end":{"line":94,"character":16}},"kind":2},{"range":{"start":{"line":99,"character":21},"end":{"line":99,"character":24}},"kind":3},{"range":{"start":{"line":99,"character":27},"end":{"line":99,"character":30}},"kind":2},{"range":{"start":{"line":100,"character":26},"end":{"line":100,"character":29}},"kind":3},{"range":{"start":{"line":100,"character":32},"end":{"line":100,"character":35}},"kind":2},{"range":{"start":{"line":101,"character":26},"end":{"line":101,"character":29}},"kind":3},{"range":{"start":{"line":101,"character":32},"end":{"line":101,"character":35}},"kind":2},{"range":{"start":{"line":104,"character":19},"end":{"line":104,"character":22}},"kind":2}]}
<<<
Content-Length: 257

{"jsonrpc":"2.0","id":90,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":99,"character":21},"end":{"line":112,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":90,"result":[]}
<<<
Content-Length: 259

{"jsonrpc":"2.0","id":91,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":104,"character":30},"end":{"line":104,"character":30}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":91,"result":[]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":92,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":106,"character":34}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":92,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":93,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":91,"character":35}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":93,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":94,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":64,"character":27}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":94,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":95,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":64,"character":27}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":95,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":96,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":64,"character":26}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":96,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":97,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":37,"character":29}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":97,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":98,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":37,"character":10}}}
>>>
Content-Length: 214

{"jsonrpc":"2.0","id":98,"result":{"contents":{"kind":"markdown","value":"### class `OneWire`  \n\n---\n```cpp\nclass OneWire {}\n```"},"range":{"start":{"line":37,"character":6},"end":{"line":37,"character":13}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":99,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":25,"character":19}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":99,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":100,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":25,"character":20}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":100,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":101,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":25,"character":20}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":101,"result":null}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":101}}Content-Length: 258

{"jsonrpc":"2.0","id":102,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":19,"character":16},"end":{"line":19,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":102,"result":[]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":103,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":24,"character":10}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":103,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":104,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":21,"character":10}}}
>>>
Content-Length: 251

{"jsonrpc":"2.0","id":104,"result":{"contents":{"kind":"markdown","value":"### variable `celsius`  \n\n---\nType: `float`  \n\n---\n```cpp\n// In loop\nfloat celsius\n```"},"range":{"start":{"line":21,"character":8},"end":{"line":21,"character":15}}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":105,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":25,"character":16}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":105,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":106,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":24,"character":14}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":106,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":107,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":7}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":107,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":108,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":8}}}
>>>
Content-Length: 287

{"jsonrpc":"2.0","id":108,"result":{"contents":{"kind":"markdown","value":"### variable `ds`  \n\n---\nType: `class OneWire`  \non pin 10 (a 4.7K resistor is necessary)  \n\n---\n```cpp\nOneWire ds(10)\n```"},"range":{"start":{"line":23,"character":8},"end":{"line":23,"character":10}}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":109,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":28,"character":11}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":109,"result":null}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":110,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":22},"contentChanges":[{"range":{"start":{"line":30,"character":3},"end":{"line":30,"character":3}},"rangeLength":0,"text":"*"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":111,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":110}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":110,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":111,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":111,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":111,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":112,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":112,"result":[]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":113,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":23},"contentChanges":[{"range":{"start":{"line":30,"character":4},"end":{"line":30,"character":4}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":114,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":115,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":30,"character":5},"context":{"triggerKind":2,"triggerCharacter":"/"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":113}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":113,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":111,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":114,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":111,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":115,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":116,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":30,"character":5},"end":{"line":30,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":116,"result":[]}Content-Length: 119

{"jsonrpc":"2.0","id":"19","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"19","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3428

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":23},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 155

{"jsonrpc":"2.0","id":117,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":24},"contentChanges":[{"range":{"start":{"line":22,"character":3},"end":{"line":22,"character":3}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":118,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":119,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":22,"character":4},"context":{"triggerKind":2,"triggerCharacter":"/"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":117,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":111,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":118,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":111,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":119,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":117}}Content-Length: 155

{"jsonrpc":"2.0","id":120,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":25},"contentChanges":[{"range":{"start":{"line":22,"character":4},"end":{"line":22,"character":4}},"rangeLength":0,"text":"*"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":121,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":120,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":111,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":121,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":111,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":120}}Content-Length: 256

{"jsonrpc":"2.0","id":122,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":22,"character":5},"end":{"line":22,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":122,"result":[]}
<<<
Content-Length: 3430

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":25},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 258

{"jsonrpc":"2.0","id":123,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":21,"character":28},"end":{"line":21,"character":28}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":123,"result":[]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":124,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 285

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":26},"contentChanges":[{"range":{"start":{"line":21,"character":28},"end":{"line":21,"character":28}},"rangeLength":0,"text":"\r\n  "}]}}Content-Length: 155

{"jsonrpc":"2.0","id":125,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":124}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":124,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":111,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":125,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 3436

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":26},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n  \r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 256

{"jsonrpc":"2.0","id":126,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":31,"character":5},"end":{"line":31,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":126,"result":[]}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":127,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 388

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":27},"contentChanges":[{"range":{"start":{"line":31,"character":5},"end":{"line":31,"character":5}},"rangeLength":0,"text":"\r\n   "},{"range":{"start":{"line":22,"character":0},"end":{"line":22,"character":2}},"rangeLength":2,"text":""}]}}Content-Length: 155

{"jsonrpc":"2.0","id":128,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":127}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":127,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":112,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":128,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":113,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":129,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":36,"character":20}}}
>>>
Content-Length: 250

{"jsonrpc":"2.0","id":129,"result":{"contents":{"kind":"markdown","value":"### variable `addr`  \n\n---\nType: `byte[8]`  \n\n---\n```cpp\n// In loop\nbyte addr[8]\n```"},"range":{"start":{"line":36,"character":17},"end":{"line":36,"character":21}}}}Content-Length: 119

{"jsonrpc":"2.0","id":"20","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"20","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3441

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":27},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 183

{"jsonrpc":"2.0","id":130,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":33,"character":7}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":130,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":33,"character":2},"end":{"line":33,"character":8}}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":131,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":33,"character":7}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":131,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":33,"character":2},"end":{"line":33,"character":8}}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":132,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":36,"character":31}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":132,"result":null}Content-Length: 119

{"jsonrpc":"2.0","id":"21","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"21","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"22","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"22","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":133,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 386

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":28},"contentChanges":[{"range":{"start":{"line":38,"character":1},"end":{"line":38,"character":1}},"rangeLength":0,"text":"\r\n "},{"range":{"start":{"line":32,"character":0},"end":{"line":32,"character":3}},"rangeLength":3,"text":""}]}}Content-Length: 155

{"jsonrpc":"2.0","id":134,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":133,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":113,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":134,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":133}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"23","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"23","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3443

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":28},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 155

{"jsonrpc":"2.0","id":135,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 382

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":29},"contentChanges":[{"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":1}},"rangeLength":1,"text":""},{"range":{"start":{"line":38,"character":1},"end":{"line":38,"character":1}},"rangeLength":0,"text":"*"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":136,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":135}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":135,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":136,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":137,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":30},"contentChanges":[{"range":{"start":{"line":38,"character":2},"end":{"line":38,"character":2}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":138,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":139,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":38,"character":3},"context":{"triggerKind":2,"triggerCharacter":"/"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":137,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":138,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":139,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":137}}Content-Length: 256

{"jsonrpc":"2.0","id":140,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":38,"character":3},"end":{"line":38,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":140,"result":[]}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 3444

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":30},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"24","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"24","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"25","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"25","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":141,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":31},"contentChanges":[{"range":{"start":{"line":32,"character":0},"end":{"line":32,"character":0}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":142,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":143,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":32,"character":1},"context":{"triggerKind":2,"triggerCharacter":"/"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":141}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":141,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":142,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":143,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":144,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":32},"contentChanges":[{"range":{"start":{"line":32,"character":1},"end":{"line":32,"character":1}},"rangeLength":0,"text":"*"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":145,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":144,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":145,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":144}}Content-Length: 256

{"jsonrpc":"2.0","id":146,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":32,"character":2},"end":{"line":32,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":146,"result":[]}Content-Length: 119

{"jsonrpc":"2.0","id":"26","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"26","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3446

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":32},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 184

{"jsonrpc":"2.0","id":147,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":41,"character":30}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":147,"result":null}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 119

{"jsonrpc":"2.0","id":"27","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"27","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"28","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"28","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":148,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":44,"character":10}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":148,"result":null}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":149,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":33},"contentChanges":[{"range":{"start":{"line":45,"character":2},"end":{"line":45,"character":2}},"rangeLength":0,"text":"*"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":150,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":149}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":149,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":150,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":151,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":34},"contentChanges":[{"range":{"start":{"line":45,"character":3},"end":{"line":45,"character":3}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":152,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":153,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":45,"character":4},"context":{"triggerKind":2,"triggerCharacter":"/"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":151,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":152,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":153,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":151}}Content-Length: 256

{"jsonrpc":"2.0","id":154,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":45,"character":4},"end":{"line":45,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":154,"result":[]}Content-Length: 119

{"jsonrpc":"2.0","id":"29","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"29","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3448

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":34},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 155

{"jsonrpc":"2.0","id":155,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":35},"contentChanges":[{"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":0}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":156,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":157,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":39,"character":1},"context":{"triggerKind":2,"triggerCharacter":"/"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":155}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":155,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":156,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":157,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":158,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":36},"contentChanges":[{"range":{"start":{"line":39,"character":1},"end":{"line":39,"character":1}},"rangeLength":0,"text":"*"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":159,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":158,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":159,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":158}}Content-Length: 256

{"jsonrpc":"2.0","id":160,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":39,"character":2},"end":{"line":39,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":160,"result":[]}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 3450

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":36},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"30","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"30","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":161,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":45,"character":4},"end":{"line":45,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":161,"result":[]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":162,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 283

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":37},"contentChanges":[{"range":{"start":{"line":45,"character":4},"end":{"line":45,"character":4}},"rangeLength":0,"text":"\r\n  "}]}}Content-Length: 155

{"jsonrpc":"2.0","id":163,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":162,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 114

{"jsonrpc":"2.0","id":"31","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 654

{"jsonrpc":"2.0","id":163,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":115,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":162}}Content-Length: 41

{"jsonrpc":"2.0","id":"31","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 3456

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":37},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"32","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"32","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":164,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":47,"character":33}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":164,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":165,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":47,"character":34}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":165,"result":null}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":166,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":47,"character":35}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":166,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":167,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":50,"character":38}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":167,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":168,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":68,"character":41}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":168,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":169,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":71,"character":43}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":169,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":170,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":75,"character":32}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":170,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":171,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":39}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":171,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":172,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":83,"character":20}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":172,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":173,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":83,"character":18}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":173,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":174,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":82,"character":18}}}
>>>
Content-Length: 252

{"jsonrpc":"2.0","id":174,"result":{"contents":{"kind":"markdown","value":"### variable `data`  \n\n---\nType: `byte[12]`  \n\n---\n```cpp\n// In loop\nbyte data[12]\n```"},"range":{"start":{"line":82,"character":17},"end":{"line":82,"character":21}}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":175,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":82,"character":18}}}
>>>
Content-Length: 252

{"jsonrpc":"2.0","id":175,"result":{"contents":{"kind":"markdown","value":"### variable `data`  \n\n---\nType: `byte[12]`  \n\n---\n```cpp\n// In loop\nbyte data[12]\n```"},"range":{"start":{"line":82,"character":17},"end":{"line":82,"character":21}}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":176,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":82,"character":18}}}
>>>
Content-Length: 252

{"jsonrpc":"2.0","id":176,"result":{"contents":{"kind":"markdown","value":"### variable `data`  \n\n---\nType: `byte[12]`  \n\n---\n```cpp\n// In loop\nbyte data[12]\n```"},"range":{"start":{"line":82,"character":17},"end":{"line":82,"character":21}}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":177,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":83,"character":21}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":177,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":178,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":86,"character":25}}}
>>>
Content-Length: 462

{"jsonrpc":"2.0","id":178,"result":{"contents":{"kind":"markdown","value":"### static-method `crc8`  \n\n---\n→ `uint8_t`  \nParameters:  \n- `const uint8_t * addr`\n- `uint8_t len`\n\nCompute a Dallas Semiconductor 8 bit CRC, these are used in the ROM and scratchpad registers.  \n\n---\n```cpp\n// In OneWire\npublic: static uint8_t crc8(const uint8_t *addr, uint8_t len)\n```"},"range":{"start":{"line":86,"character":24},"end":{"line":86,"character":28}}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":179,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":87,"character":19}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":179,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":180,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":86,"character":19}}}
>>>
Content-Length: 216

{"jsonrpc":"2.0","id":180,"result":{"contents":{"kind":"markdown","value":"### class `OneWire`  \n\n---\n```cpp\nclass OneWire {}\n```"},"range":{"start":{"line":86,"character":15},"end":{"line":86,"character":22}}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":181,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":78,"character":14}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":181,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":182,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":77,"character":10}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":182,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":183,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":77,"character":10}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":183,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":184,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":73,"character":7}}}
>>>
Content-Length: 267

{"jsonrpc":"2.0","id":184,"result":{"contents":{"kind":"markdown","value":"### variable `present`  \n\n---\nType: `byte`  \nValue = `0`  \n\n---\n```cpp\n// In loop\nbyte present = 0\n```"},"range":{"start":{"line":73,"character":2},"end":{"line":73,"character":9}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":185,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":73,"character":8}}}
>>>
Content-Length: 267

{"jsonrpc":"2.0","id":185,"result":{"contents":{"kind":"markdown","value":"### variable `present`  \n\n---\nType: `byte`  \nValue = `0`  \n\n---\n```cpp\n// In loop\nbyte present = 0\n```"},"range":{"start":{"line":73,"character":2},"end":{"line":73,"character":9}}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":186,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 388

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":38},"contentChanges":[{"range":{"start":{"line":72,"character":3},"end":{"line":72,"character":3}},"rangeLength":0,"text":"\r\n   "},{"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":2}},"rangeLength":2,"text":""}]}}Content-Length: 155

{"jsonrpc":"2.0","id":187,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":186}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":186,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":115,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 114

{"jsonrpc":"2.0","id":"33","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 654

{"jsonrpc":"2.0","id":187,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":116,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"33","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":188,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":75,"character":10}}}
>>>
Content-Length: 389

{"jsonrpc":"2.0","id":188,"result":{"contents":{"kind":"markdown","value":"### instance-method `select`  \n\n---\n→ `void`  \nParameters:  \n- `const uint8_t * rom`\n\nIssue a 1-Wire rom select command, you do the reset first.  \n\n---\n```cpp\n// In OneWire\npublic: void select(const uint8_t rom[8])\n```"},"range":{"start":{"line":75,"character":5},"end":{"line":75,"character":11}}}}Content-Length: 119

{"jsonrpc":"2.0","id":"34","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"34","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3461

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":38},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 184

{"jsonrpc":"2.0","id":189,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":75,"character":11}}}
>>>
Content-Length: 389

{"jsonrpc":"2.0","id":189,"result":{"contents":{"kind":"markdown","value":"### instance-method `select`  \n\n---\n→ `void`  \nParameters:  \n- `const uint8_t * rom`\n\nIssue a 1-Wire rom select command, you do the reset first.  \n\n---\n```cpp\n// In OneWire\npublic: void select(const uint8_t rom[8])\n```"},"range":{"start":{"line":75,"character":5},"end":{"line":75,"character":11}}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":190,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":39},"contentChanges":[{"range":{"start":{"line":73,"character":3},"end":{"line":73,"character":3}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":191,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":192,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":73,"character":4},"context":{"triggerKind":2,"triggerCharacter":"/"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":190}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":190,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":116,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":191,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":116,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":192,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":193,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":73,"character":4},"end":{"line":73,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":193,"result":[]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":194,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":40},"contentChanges":[{"range":{"start":{"line":73,"character":4},"end":{"line":73,"character":4}},"rangeLength":0,"text":"*"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":195,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":194,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":116,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":195,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":116,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":194}}Content-Length: 256

{"jsonrpc":"2.0","id":196,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":73,"character":5},"end":{"line":73,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":196,"result":[]}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":197,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":83,"character":18}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":197,"result":null}
<<<
Content-Length: 3463

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":40},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   /*\r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"35","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"35","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":198,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":41},"contentChanges":[{"range":{"start":{"line":89,"character":1},"end":{"line":89,"character":1}},"rangeLength":0,"text":"*"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":199,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":198}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":198,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":116,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 114

{"jsonrpc":"2.0","id":"36","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 654

{"jsonrpc":"2.0","id":199,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":116,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"36","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":200,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":42},"contentChanges":[{"range":{"start":{"line":89,"character":2},"end":{"line":89,"character":2}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":201,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":202,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":89,"character":3},"context":{"triggerKind":2,"triggerCharacter":"/"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":200,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":116,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":201,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":116,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":202,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":200}}Content-Length: 256

{"jsonrpc":"2.0","id":203,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":89,"character":3},"end":{"line":89,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":203,"result":[]}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":204,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":90,"character":13}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":204,"result":null}
<<<
Content-Length: 3465

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":42},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   /*\r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n */\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"37","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"37","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":205,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 282

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":43},"contentChanges":[{"range":{"start":{"line":89,"character":3},"end":{"line":89,"character":3}},"rangeLength":0,"text":"\r\n "}]}}Content-Length: 155

{"jsonrpc":"2.0","id":206,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":205}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":205,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":116,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":206,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":207,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":86,"character":17}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":207,"result":null}
<<<
Content-Length: 3470

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":43},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   /*\r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n */\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 119

{"jsonrpc":"2.0","id":"38","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"38","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"39","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"39","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":208,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":106,"character":42}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":208,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":209,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":105,"character":38}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":209,"result":null}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":209}}Content-Length: 185

{"jsonrpc":"2.0","id":210,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":107,"character":49}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":210,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":211,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":25}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":211,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":212,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":25}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":212,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":213,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":23}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":213,"result":null}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":213}}Content-Length: 184

{"jsonrpc":"2.0","id":214,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":78,"character":22}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":214,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":215,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":81,"character":16}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":215,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":216,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":84,"character":10}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":216,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":217,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":74,"character":6}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":217,"result":null}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":218,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":73,"character":5},"end":{"line":73,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":218,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":219,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":9}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":219,"result":null}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":220,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 381

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":44},"contentChanges":[{"range":{"start":{"line":90,"character":0},"end":{"line":90,"character":1}},"rangeLength":1,"text":""},{"range":{"start":{"line":73,"character":4},"end":{"line":73,"character":5}},"rangeLength":1,"text":""}]}}Content-Length: 155

{"jsonrpc":"2.0","id":221,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":220}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":220,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":221,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":222,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":45},"contentChanges":[{"range":{"start":{"line":73,"character":3},"end":{"line":73,"character":4}},"rangeLength":1,"text":""}]}}Content-Length: 155

{"jsonrpc":"2.0","id":223,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":222,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":223,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":222}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"40","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"40","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3467

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":45},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n */\r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 256

{"jsonrpc":"2.0","id":224,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":89,"character":3},"end":{"line":89,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":224,"result":[]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":225,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":46},"contentChanges":[{"range":{"start":{"line":89,"character":2},"end":{"line":89,"character":3}},"rangeLength":1,"text":""}]}}Content-Length: 155

{"jsonrpc":"2.0","id":226,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":225}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":225,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":226,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":227,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":47},"contentChanges":[{"range":{"start":{"line":89,"character":1},"end":{"line":89,"character":2}},"rangeLength":1,"text":""}]}}Content-Length: 155

{"jsonrpc":"2.0","id":228,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":227,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":228,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":227}}
>>>
Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 3465

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":47},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"41","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"41","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"42","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"42","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":229,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":82,"character":20}}}
>>>
Content-Length: 284

{"jsonrpc":"2.0","id":229,"result":{"contents":{"kind":"markdown","value":"### instance-method `read`  \n\n---\n→ `uint8_t`  \nRead a byte.  \n\n---\n```cpp\n// In OneWire\npublic: uint8_t read()\n```"},"range":{"start":{"line":82,"character":17},"end":{"line":82,"character":21}}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":230,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":82,"character":19}}}
>>>
Content-Length: 284

{"jsonrpc":"2.0","id":230,"result":{"contents":{"kind":"markdown","value":"### instance-method `read`  \n\n---\n→ `uint8_t`  \nRead a byte.  \n\n---\n```cpp\n// In OneWire\npublic: uint8_t read()\n```"},"range":{"start":{"line":82,"character":17},"end":{"line":82,"character":21}}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":231,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":82,"character":21}}}
>>>
Content-Length: 284

{"jsonrpc":"2.0","id":231,"result":{"contents":{"kind":"markdown","value":"### instance-method `read`  \n\n---\n→ `uint8_t`  \nRead a byte.  \n\n---\n```cpp\n// In OneWire\npublic: uint8_t read()\n```"},"range":{"start":{"line":82,"character":17},"end":{"line":82,"character":21}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":232,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":0}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":232,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":233,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":0}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":233,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":234,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":2}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":234,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":79,"character":2},"end":{"line":79,"character":8}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":235,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":5}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":235,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":79,"character":2},"end":{"line":79,"character":8}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":236,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":3}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":236,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":79,"character":2},"end":{"line":79,"character":8}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":237,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":0}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":237,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":238,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":78,"character":2}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":238,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":78,"character":2},"end":{"line":78,"character":8}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":239,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":78,"character":2}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":239,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":78,"character":2},"end":{"line":78,"character":8}}}}
<<<
Content-Length: 195

{"jsonrpc":"2.0","id":240,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":78,"character":2}}}
>>>
Content-Length: 1619

{"jsonrpc":"2.0","id":240,"result":[{"range":{"start":{"line":12,"character":2},"end":{"line":12,"character":8}},"kind":1},{"range":{"start":{"line":50,"character":6},"end":{"line":50,"character":12}},"kind":1},{"range":{"start":{"line":54,"character":6},"end":{"line":54,"character":12}},"kind":1},{"range":{"start":{"line":58,"character":6},"end":{"line":58,"character":12}},"kind":1},{"range":{"start":{"line":62,"character":6},"end":{"line":62,"character":12}},"kind":1},{"range":{"start":{"line":78,"character":2},"end":{"line":78,"character":8}},"kind":1},{"range":{"start":{"line":79,"character":2},"end":{"line":79,"character":8}},"kind":1},{"range":{"start":{"line":80,"character":2},"end":{"line":80,"character":8}},"kind":1},{"range":{"start":{"line":83,"character":4},"end":{"line":83,"character":10}},"kind":1},{"range":{"start":{"line":84,"character":4},"end":{"line":84,"character":10}},"kind":1},{"range":{"start":{"line":86,"character":2},"end":{"line":86,"character":8}},"kind":1},{"range":{"start":{"line":87,"character":2},"end":{"line":87,"character":8}},"kind":1},{"range":{"start":{"line":88,"character":2},"end":{"line":88,"character":8}},"kind":1},{"range":{"start":{"line":112,"character":2},"end":{"line":112,"character":8}},"kind":1},{"range":{"start":{"line":113,"character":2},"end":{"line":113,"character":8}},"kind":1},{"range":{"start":{"line":114,"character":2},"end":{"line":114,"character":8}},"kind":1},{"range":{"start":{"line":115,"character":2},"end":{"line":115,"character":8}},"kind":1},{"range":{"start":{"line":116,"character":2},"end":{"line":116,"character":8}},"kind":1}]}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":241,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":78,"character":2},"end":{"line":78,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":241,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":242,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":2}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":242,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":79,"character":2},"end":{"line":79,"character":8}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":243,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":3}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":243,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":80,"character":2},"end":{"line":80,"character":8}}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":244,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":48},"contentChanges":[{"range":{"start":{"line":78,"character":2},"end":{"line":78,"character":2}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":245,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":246,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":78,"character":3},"context":{"triggerKind":2,"triggerCharacter":"/"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":244,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":245,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":246,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":244}}Content-Length: 155

{"jsonrpc":"2.0","id":247,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":49},"contentChanges":[{"range":{"start":{"line":78,"character":3},"end":{"line":78,"character":3}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":248,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":249,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":78,"character":4},"context":{"triggerKind":2,"triggerCharacter":"/"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":247}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":247,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":248,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":249,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":250,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":78,"character":4},"end":{"line":78,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":250,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":251,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":81,"character":4}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":251,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":252,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":252,"result":null}Content-Length: 119

{"jsonrpc":"2.0","id":"43","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"43","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3467

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":49},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  //Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 183

{"jsonrpc":"2.0","id":253,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":2}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":253,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":79,"character":2},"end":{"line":79,"character":8}}}}
<<<
Content-Length: 195

{"jsonrpc":"2.0","id":254,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":2}}}
>>>
Content-Length: 1532

{"jsonrpc":"2.0","id":254,"result":[{"range":{"start":{"line":12,"character":2},"end":{"line":12,"character":8}},"kind":1},{"range":{"start":{"line":50,"character":6},"end":{"line":50,"character":12}},"kind":1},{"range":{"start":{"line":54,"character":6},"end":{"line":54,"character":12}},"kind":1},{"range":{"start":{"line":58,"character":6},"end":{"line":58,"character":12}},"kind":1},{"range":{"start":{"line":62,"character":6},"end":{"line":62,"character":12}},"kind":1},{"range":{"start":{"line":79,"character":2},"end":{"line":79,"character":8}},"kind":1},{"range":{"start":{"line":80,"character":2},"end":{"line":80,"character":8}},"kind":1},{"range":{"start":{"line":83,"character":4},"end":{"line":83,"character":10}},"kind":1},{"range":{"start":{"line":84,"character":4},"end":{"line":84,"character":10}},"kind":1},{"range":{"start":{"line":86,"character":2},"end":{"line":86,"character":8}},"kind":1},{"range":{"start":{"line":87,"character":2},"end":{"line":87,"character":8}},"kind":1},{"range":{"start":{"line":88,"character":2},"end":{"line":88,"character":8}},"kind":1},{"range":{"start":{"line":112,"character":2},"end":{"line":112,"character":8}},"kind":1},{"range":{"start":{"line":113,"character":2},"end":{"line":113,"character":8}},"kind":1},{"range":{"start":{"line":114,"character":2},"end":{"line":114,"character":8}},"kind":1},{"range":{"start":{"line":115,"character":2},"end":{"line":115,"character":8}},"kind":1},{"range":{"start":{"line":116,"character":2},"end":{"line":116,"character":8}},"kind":1}]}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":255,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":79,"character":2},"end":{"line":79,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":255,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":256,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":3}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":256,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":80,"character":2},"end":{"line":80,"character":8}}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":257,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":50},"contentChanges":[{"range":{"start":{"line":79,"character":2},"end":{"line":79,"character":2}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":258,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":259,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":3},"context":{"triggerKind":2,"triggerCharacter":"/"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":257,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":258,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":259,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":257}}Content-Length: 155

{"jsonrpc":"2.0","id":260,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":51},"contentChanges":[{"range":{"start":{"line":79,"character":3},"end":{"line":79,"character":3}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":261,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":262,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":4},"context":{"triggerKind":2,"triggerCharacter":"/"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":260}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":260,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":261,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":262,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":263,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":79,"character":4},"end":{"line":79,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":263,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":264,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":2}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":264,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":80,"character":2},"end":{"line":80,"character":8}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":265,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":2}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":265,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":80,"character":2},"end":{"line":80,"character":8}}}}
<<<
Content-Length: 195

{"jsonrpc":"2.0","id":266,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":2}}}
>>>
Content-Length: 1445

{"jsonrpc":"2.0","id":266,"result":[{"range":{"start":{"line":12,"character":2},"end":{"line":12,"character":8}},"kind":1},{"range":{"start":{"line":50,"character":6},"end":{"line":50,"character":12}},"kind":1},{"range":{"start":{"line":54,"character":6},"end":{"line":54,"character":12}},"kind":1},{"range":{"start":{"line":58,"character":6},"end":{"line":58,"character":12}},"kind":1},{"range":{"start":{"line":62,"character":6},"end":{"line":62,"character":12}},"kind":1},{"range":{"start":{"line":80,"character":2},"end":{"line":80,"character":8}},"kind":1},{"range":{"start":{"line":83,"character":4},"end":{"line":83,"character":10}},"kind":1},{"range":{"start":{"line":84,"character":4},"end":{"line":84,"character":10}},"kind":1},{"range":{"start":{"line":86,"character":2},"end":{"line":86,"character":8}},"kind":1},{"range":{"start":{"line":87,"character":2},"end":{"line":87,"character":8}},"kind":1},{"range":{"start":{"line":88,"character":2},"end":{"line":88,"character":8}},"kind":1},{"range":{"start":{"line":112,"character":2},"end":{"line":112,"character":8}},"kind":1},{"range":{"start":{"line":113,"character":2},"end":{"line":113,"character":8}},"kind":1},{"range":{"start":{"line":114,"character":2},"end":{"line":114,"character":8}},"kind":1},{"range":{"start":{"line":115,"character":2},"end":{"line":115,"character":8}},"kind":1},{"range":{"start":{"line":116,"character":2},"end":{"line":116,"character":8}},"kind":1}]}Content-Length: 119

{"jsonrpc":"2.0","id":"44","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"44","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":267,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":267,"result":null}
<<<
Content-Length: 3469

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":51},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  //Serial.print(\"  Data = \");\r\n  //Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 256

{"jsonrpc":"2.0","id":268,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":80,"character":1},"end":{"line":80,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":268,"result":[]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":269,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":52},"contentChanges":[{"range":{"start":{"line":80,"character":1},"end":{"line":80,"character":2}},"rangeLength":1,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":270,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":271,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":2},"context":{"triggerKind":2,"triggerCharacter":"/"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":269}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":269,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":270,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":271,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":270}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":271}}Content-Length: 155

{"jsonrpc":"2.0","id":272,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":53},"contentChanges":[{"range":{"start":{"line":80,"character":2},"end":{"line":80,"character":2}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":273,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":274,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":3},"context":{"triggerKind":2,"triggerCharacter":"/"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":272}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":272,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":273,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":274,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":275,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":80,"character":3},"end":{"line":80,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":275,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":276,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":87,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":276,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":277,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":87,"character":0}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":277,"result":null}
<<<
Content-Length: 3470

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":53},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  //Serial.print(\"  Data = \");\r\n  //Serial.print(present, HEX);\r\n //Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 183

{"jsonrpc":"2.0","id":278,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":86,"character":0}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":278,"result":null}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":279,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":54},"contentChanges":[{"range":{"start":{"line":86,"character":1},"end":{"line":86,"character":1}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":280,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":281,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":86,"character":2},"context":{"triggerKind":2,"triggerCharacter":"/"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":279}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":279,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 114

{"jsonrpc":"2.0","id":"45","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 654

{"jsonrpc":"2.0","id":280,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":281,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"45","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":282,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":55},"contentChanges":[{"range":{"start":{"line":86,"character":2},"end":{"line":86,"character":2}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":283,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":284,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":86,"character":3},"context":{"triggerKind":2,"triggerCharacter":"/"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":282,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":283,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":284,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":282}}Content-Length: 183

{"jsonrpc":"2.0","id":285,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":87,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":285,"result":null}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":286,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":86,"character":3},"end":{"line":86,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":286,"result":[]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":287,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":56},"contentChanges":[{"range":{"start":{"line":87,"character":1},"end":{"line":87,"character":1}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":288,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":289,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":87,"character":2},"context":{"triggerKind":2,"triggerCharacter":"/"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":287,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":288,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":289,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":287}}Content-Length: 155

{"jsonrpc":"2.0","id":290,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":57},"contentChanges":[{"range":{"start":{"line":87,"character":2},"end":{"line":87,"character":2}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":291,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":292,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":87,"character":3},"context":{"triggerKind":2,"triggerCharacter":"/"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":290}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":290,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":291,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":292,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":293,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":88,"character":2}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":293,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":88,"character":2},"end":{"line":88,"character":8}}}}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":294,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":87,"character":3},"end":{"line":87,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":294,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":295,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":88,"character":0}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":295,"result":null}Content-Length: 119

{"jsonrpc":"2.0","id":"46","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"46","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3474

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":57},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  //Serial.print(\"  Data = \");\r\n  //Serial.print(present, HEX);\r\n //Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n // Serial.print(\" CRC=\");\r\n // Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 155

{"jsonrpc":"2.0","id":296,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":58},"contentChanges":[{"range":{"start":{"line":88,"character":1},"end":{"line":88,"character":1}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":297,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":298,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":88,"character":2},"context":{"triggerKind":2,"triggerCharacter":"/"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":296}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":296,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":297,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":298,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":299,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":59},"contentChanges":[{"range":{"start":{"line":88,"character":2},"end":{"line":88,"character":2}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":300,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":301,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":88,"character":3},"context":{"triggerKind":2,"triggerCharacter":"/"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":299,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":300,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":301,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":299}}Content-Length: 256

{"jsonrpc":"2.0","id":302,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":88,"character":3},"end":{"line":88,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":302,"result":[]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":303,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":82,"character":18}}}
>>>
Content-Length: 284

{"jsonrpc":"2.0","id":303,"result":{"contents":{"kind":"markdown","value":"### instance-method `read`  \n\n---\n→ `uint8_t`  \nRead a byte.  \n\n---\n```cpp\n// In OneWire\npublic: uint8_t read()\n```"},"range":{"start":{"line":82,"character":17},"end":{"line":82,"character":21}}}}
<<<
Content-Length: 3476

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":59},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  //Serial.print(\"  Data = \");\r\n  //Serial.print(present, HEX);\r\n //Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n // Serial.print(\" CRC=\");\r\n // Serial.print(OneWire::crc8(data, 8), HEX);\r\n // Serial.println();\r\n \r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":304,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":82,"character":19}}}
>>>
Content-Length: 284

{"jsonrpc":"2.0","id":304,"result":{"contents":{"kind":"markdown","value":"### instance-method `read`  \n\n---\n→ `uint8_t`  \nRead a byte.  \n\n---\n```cpp\n// In OneWire\npublic: uint8_t read()\n```"},"range":{"start":{"line":82,"character":17},"end":{"line":82,"character":21}}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":305,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":81,"character":25}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":305,"result":null}Content-Length: 119

{"jsonrpc":"2.0","id":"47","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"47","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"48","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"48","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":306,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":83,"character":5}}}
>>>
Content-Length: 254

{"jsonrpc":"2.0","id":306,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":83,"character":4},"end":{"line":83,"character":10}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":307,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":82,"character":4}}}
>>>
Content-Length: 250

{"jsonrpc":"2.0","id":307,"result":{"contents":{"kind":"markdown","value":"### variable `data`  \n\n---\nType: `byte[12]`  \n\n---\n```cpp\n// In loop\nbyte data[12]\n```"},"range":{"start":{"line":82,"character":4},"end":{"line":82,"character":8}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":308,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":83,"character":3}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":308,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":309,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":84,"character":3}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":309,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":310,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":83,"character":3}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":310,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":311,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":84,"character":3}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":311,"result":null}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":312,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":60},"contentChanges":[{"range":{"start":{"line":88,"character":2},"end":{"line":88,"character":3}},"rangeLength":1,"text":""}]}}Content-Length: 155

{"jsonrpc":"2.0","id":313,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":312}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":312,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":313,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":314,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":61},"contentChanges":[{"range":{"start":{"line":88,"character":1},"end":{"line":88,"character":2}},"rangeLength":1,"text":""}]}}Content-Length: 155

{"jsonrpc":"2.0","id":315,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":314,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":315,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":314}}Content-Length: 183

{"jsonrpc":"2.0","id":316,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":87,"character":3}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":316,"result":null}
<<<
Content-Length: 195

{"jsonrpc":"2.0","id":317,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":87,"character":4}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":317,"result":[]}
<<<
Content-Length: 3474


>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"49","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":61},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  //Serial.print(\"  Data = \");\r\n  //Serial.print(present, HEX);\r\n //Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n // Serial.print(\" CRC=\");\r\n // Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 41

{"jsonrpc":"2.0","id":"49","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":318,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":87,"character":4},"end":{"line":87,"character":4}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":318,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":319,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":87,"character":3}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":319,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":320,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":87,"character":2}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":320,"result":null}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":321,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":87,"character":3},"end":{"line":87,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":321,"result":[]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":322,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":62},"contentChanges":[{"range":{"start":{"line":87,"character":2},"end":{"line":87,"character":3}},"rangeLength":1,"text":""}]}}Content-Length: 155

{"jsonrpc":"2.0","id":323,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":322}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":322,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":323,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":323}}Content-Length: 155

{"jsonrpc":"2.0","id":324,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":63},"contentChanges":[{"range":{"start":{"line":87,"character":1},"end":{"line":87,"character":2}},"rangeLength":1,"text":""}]}}Content-Length: 155

{"jsonrpc":"2.0","id":325,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":324}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":324,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":325,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":326,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":87,"character":2}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":326,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":87,"character":2},"end":{"line":87,"character":8}}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 3472

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":63},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  //Serial.print(\"  Data = \");\r\n  //Serial.print(present, HEX);\r\n //Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n // Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 183

{"jsonrpc":"2.0","id":327,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":86,"character":0}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":327,"result":null}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":328,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":86,"character":1},"end":{"line":86,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":328,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":329,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":88,"character":7}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":329,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":88,"character":2},"end":{"line":88,"character":8}}}}Content-Length: 119

{"jsonrpc":"2.0","id":"50","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"50","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":330,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":88,"character":9}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":330,"result":null}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":331,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":64},"contentChanges":[{"range":{"start":{"line":86,"character":1},"end":{"line":86,"character":2}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":331,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":332,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":65},"contentChanges":[{"range":{"start":{"line":86,"character":1},"end":{"line":86,"character":2}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":332,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 114

{"jsonrpc":"2.0","id":"51","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"51","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":333,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":86,"character":10}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":333,"result":null}
<<<
Content-Length: 3470

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":65},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  //Serial.print(\"  Data = \");\r\n  //Serial.print(present, HEX);\r\n //Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 183

{"jsonrpc":"2.0","id":334,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":334,"result":null}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":335,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":335,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":336,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":78,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":336,"result":null}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":337,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":66},"contentChanges":[{"range":{"start":{"line":78,"character":2},"end":{"line":78,"character":3}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":337,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":338,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":78,"character":2},"end":{"line":78,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":338,"result":[]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":339,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":67},"contentChanges":[{"range":{"start":{"line":78,"character":2},"end":{"line":78,"character":3}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":339,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":340,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":0}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":340,"result":null}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":341,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":68},"contentChanges":[{"range":{"start":{"line":79,"character":1},"end":{"line":79,"character":2}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":341,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":342,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":0}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":342,"result":null}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":342}}Content-Length: 155

{"jsonrpc":"2.0","id":343,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":69},"contentChanges":[{"range":{"start":{"line":79,"character":1},"end":{"line":79,"character":2}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":343,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":344,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":344,"result":null}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":345,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":70},"contentChanges":[{"range":{"start":{"line":79,"character":1},"end":{"line":79,"character":2}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":345,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":346,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":0}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":346,"result":null}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":347,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":71},"contentChanges":[{"range":{"start":{"line":79,"character":1},"end":{"line":79,"character":1}},"rangeLength":0,"text":" "}]}}Content-Length: 155

{"jsonrpc":"2.0","id":348,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":347,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":348,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":347}}Content-Length: 256

{"jsonrpc":"2.0","id":349,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":79,"character":2},"end":{"line":79,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":349,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":350,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":350,"result":null}Content-Length: 119

{"jsonrpc":"2.0","id":"52","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"52","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3466

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":71},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n //Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 256

{"jsonrpc":"2.0","id":351,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":80,"character":2},"end":{"line":80,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":351,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":352,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":352,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":353,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":82,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":353,"result":null}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":354,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":82,"character":0}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":354,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":355,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":81,"character":0}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":355,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":356,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":356,"result":null}Content-Length: 119

{"jsonrpc":"2.0","id":"53","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"53","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":357,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":80,"character":1},"end":{"line":80,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":357,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":358,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":358,"result":null}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":359,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":72},"contentChanges":[{"range":{"start":{"line":80,"character":1},"end":{"line":80,"character":2}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":359,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":360,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":2}}}
>>>
Content-Length: 114

{"jsonrpc":"2.0","id":"54","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 40

{"jsonrpc":"2.0","id":360,"result":null}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"54","result":null}Content-Length: 155

{"jsonrpc":"2.0","id":361,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":73},"contentChanges":[{"range":{"start":{"line":80,"character":1},"end":{"line":80,"character":2}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 654

{"jsonrpc":"2.0","id":361,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":362,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":81,"character":4}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":362,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":363,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":82,"character":7}}}
>>>
Content-Length: 250

{"jsonrpc":"2.0","id":363,"result":{"contents":{"kind":"markdown","value":"### variable `data`  \n\n---\nType: `byte[12]`  \n\n---\n```cpp\n// In loop\nbyte data[12]\n```"},"range":{"start":{"line":82,"character":4},"end":{"line":82,"character":8}}}}
<<<
Content-Length: 3464

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":73},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":364,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":74},"contentChanges":[{"range":{"start":{"line":80,"character":1},"end":{"line":80,"character":1}},"rangeLength":0,"text":" "}]}}Content-Length: 155

{"jsonrpc":"2.0","id":365,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":364}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":364,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":365,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":366,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":80,"character":2},"end":{"line":80,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":366,"result":[]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":367,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":13}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":367,"result":null}Content-Length: 119

{"jsonrpc":"2.0","id":"55","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"55","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3465

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":74},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 184

{"jsonrpc":"2.0","id":368,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":13}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":368,"result":null}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 119

{"jsonrpc":"2.0","id":"56","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"56","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"57","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"57","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":369,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":13}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":369,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":370,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":12}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":370,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":371,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":78,"character":5}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":371,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":78,"character":2},"end":{"line":78,"character":8}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":372,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":78,"character":5}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":372,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":78,"character":2},"end":{"line":78,"character":8}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":373,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":80,"character":3}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":373,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":80,"character":2},"end":{"line":80,"character":8}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":374,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":374,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":375,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":78,"character":2}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":375,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":78,"character":2},"end":{"line":78,"character":8}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":376,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":78,"character":3}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":376,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":78,"character":2},"end":{"line":78,"character":8}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":377,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":84,"character":0}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":377,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":378,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":85,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":378,"result":null}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":379,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":75},"contentChanges":[{"range":{"start":{"line":89,"character":1},"end":{"line":89,"character":1}},"rangeLength":0,"text":"*"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":380,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":379,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":380,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":379}}Content-Length: 155

{"jsonrpc":"2.0","id":381,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":76},"contentChanges":[{"range":{"start":{"line":89,"character":2},"end":{"line":89,"character":2}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":382,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":383,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":89,"character":3},"context":{"triggerKind":2,"triggerCharacter":"/"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":381,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":382,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":383,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":381}}Content-Length: 256

{"jsonrpc":"2.0","id":384,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":89,"character":3},"end":{"line":89,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":384,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":385,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":78,"character":2}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":385,"result":{"contents":{"kind":"markdown","value":"### variable `Serial`  \n\n---\nType: `class Serial_`  \n\n---\n```cpp\nextern Serial_ Serial\n```"},"range":{"start":{"line":78,"character":2},"end":{"line":78,"character":8}}}}
<<<
Content-Length: 3467

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":76},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n */\r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 155

{"jsonrpc":"2.0","id":386,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":77},"contentChanges":[{"range":{"start":{"line":77,"character":1},"end":{"line":77,"character":1}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":387,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 239

{"jsonrpc":"2.0","id":388,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":77,"character":2},"context":{"triggerKind":2,"triggerCharacter":"/"}}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":386,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":387,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":388,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":386}}Content-Length: 183

{"jsonrpc":"2.0","id":389,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":78,"character":2}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":389,"result":null}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":390,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":77,"character":2},"end":{"line":77,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":390,"result":[]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":391,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":78},"contentChanges":[{"range":{"start":{"line":77,"character":2},"end":{"line":77,"character":2}},"rangeLength":0,"text":"*"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":392,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":391}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":391,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 654

{"jsonrpc":"2.0","id":392,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":393,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":79,"character":5}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":393,"result":null}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":394,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":77,"character":3},"end":{"line":77,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":394,"result":[]}Content-Length: 119

{"jsonrpc":"2.0","id":"58","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"58","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3469

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":78},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n /*\r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n */\r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 119

{"jsonrpc":"2.0","id":"59","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"59","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"60","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"60","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":395,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":108,"character":31}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":395,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":396,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":76,"character":31}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":396,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":397,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":76,"character":30}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":397,"result":null}
<<<
Content-Length: 196

{"jsonrpc":"2.0","id":398,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":62,"character":12}}}
>>>
Content-Length: 921

{"jsonrpc":"2.0","id":398,"result":[{"range":{"start":{"line":12,"character":2},"end":{"line":12,"character":8}},"kind":1},{"range":{"start":{"line":50,"character":6},"end":{"line":50,"character":12}},"kind":1},{"range":{"start":{"line":54,"character":6},"end":{"line":54,"character":12}},"kind":1},{"range":{"start":{"line":58,"character":6},"end":{"line":58,"character":12}},"kind":1},{"range":{"start":{"line":62,"character":6},"end":{"line":62,"character":12}},"kind":1},{"range":{"start":{"line":112,"character":2},"end":{"line":112,"character":8}},"kind":1},{"range":{"start":{"line":113,"character":2},"end":{"line":113,"character":8}},"kind":1},{"range":{"start":{"line":114,"character":2},"end":{"line":114,"character":8}},"kind":1},{"range":{"start":{"line":115,"character":2},"end":{"line":115,"character":8}},"kind":1},{"range":{"start":{"line":116,"character":2},"end":{"line":116,"character":8}},"kind":1}]}
<<<
Content-Length: 258

{"jsonrpc":"2.0","id":399,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":62,"character":12},"end":{"line":62,"character":12}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":399,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":400,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":25}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":400,"result":null}
<<<
Content-Length: 258

{"jsonrpc":"2.0","id":401,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":15,"character":17},"end":{"line":15,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":401,"result":[]}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":402,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":6,"character":8}}}
>>>
Content-Length: 181

{"jsonrpc":"2.0","id":402,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":403,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":19}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":403,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":404,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":40}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":404,"result":null}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":405,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":79},"contentChanges":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":0}},"rangeLength":0,"text":"\r\n"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":406,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":405}}
>>>
Content-Length: 654

{"jsonrpc":"2.0","id":405,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":117,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}Content-Length: 658

{"jsonrpc":"2.0","id":406,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":15}},"selectionRange":{"start":{"line":10,"character":9},"end":{"line":10,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":118,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":406}}Content-Length: 155

{"jsonrpc":"2.0","id":407,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":80},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":0}},"rangeLength":0,"text":"\r\n"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":408,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":407}}
>>>
Content-Length: 658

{"jsonrpc":"2.0","id":407,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":15}},"selectionRange":{"start":{"line":10,"character":9},"end":{"line":10,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":12,"character":0},"end":{"line":14,"character":1}},"selectionRange":{"start":{"line":12,"character":5},"end":{"line":12,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":118,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":9}}}]}Content-Length: 658

{"jsonrpc":"2.0","id":408,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":15}},"selectionRange":{"start":{"line":11,"character":9},"end":{"line":11,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":119,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}]}
<<<
Content-Length: 3477

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":80},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n /*\r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n */\r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"61","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"61","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":409,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 620

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":81},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":0}},"rangeLength":0,"text":"// Чтение данных с температурных датчиков типа 1-Wire: DS18S20, DS18B20, DS1822\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// Библиотека DallasTemperature может сделать это все за вас!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":410,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 658

{"jsonrpc":"2.0","id":409,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":15}},"selectionRange":{"start":{"line":11,"character":9},"end":{"line":11,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":15,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":119,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}]}Content-Length: 658

{"jsonrpc":"2.0","id":410,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":16,"character":0},"end":{"line":16,"character":15}},"selectionRange":{"start":{"line":16,"character":9},"end":{"line":16,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":20,"character":1}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":22,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":22,"character":5},"end":{"line":22,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":409}}Content-Length: 258

{"jsonrpc":"2.0","id":411,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":14,"character":60},"end":{"line":14,"character":60}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":411,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":412,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":21}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":412,"result":null}
<<<
Content-Length: 3822

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":81},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n// Чтение данных с температурных датчиков типа 1-Wire: DS18S20, DS18B20, DS1822\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// Библиотека DallasTemperature может сделать это все за вас!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n /*\r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n */\r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 119

{"jsonrpc":"2.0","id":"62","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"62","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"63","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"63","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":413,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":82},"contentChanges":[{"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":0}},"rangeLength":0,"text":"\r\n"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":414,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 658

{"jsonrpc":"2.0","id":413,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":16,"character":0},"end":{"line":16,"character":15}},"selectionRange":{"start":{"line":16,"character":9},"end":{"line":16,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":20,"character":1}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":22,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":22,"character":5},"end":{"line":22,"character":9}}}]}Content-Length: 658

{"jsonrpc":"2.0","id":414,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":15}},"selectionRange":{"start":{"line":17,"character":9},"end":{"line":17,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":21,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":23,"character":0},"end":{"line":125,"character":1}},"selectionRange":{"start":{"line":23,"character":5},"end":{"line":23,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":413}}Content-Length: 155

{"jsonrpc":"2.0","id":415,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":83},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":0}},"rangeLength":0,"text":"\r\n"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":416,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 658

{"jsonrpc":"2.0","id":415,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":15}},"selectionRange":{"start":{"line":17,"character":9},"end":{"line":17,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":21,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":23,"character":0},"end":{"line":125,"character":1}},"selectionRange":{"start":{"line":23,"character":5},"end":{"line":23,"character":9}}}]}Content-Length: 658

{"jsonrpc":"2.0","id":416,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":126,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":415}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"64","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"64","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3830

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":83},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n\r\n\r\n// Чтение данных с температурных датчиков типа 1-Wire: DS18S20, DS18B20, DS1822\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// Библиотека DallasTemperature может сделать это все за вас!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n /*\r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n */\r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 155

{"jsonrpc":"2.0","id":417,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 276

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":84},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":0}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":418,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 238

{"jsonrpc":"2.0","id":419,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":1},"context":{"triggerKind":2,"triggerCharacter":"/"}}}
>>>
Content-Length: 658

{"jsonrpc":"2.0","id":417,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":126,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 452

{"jsonrpc":"2.0","id":418,"result":[{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":126,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":419,"result":{"isIncomplete":false,"items":null}}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":417}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":418}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":419}}Content-Length: 155

{"jsonrpc":"2.0","id":420,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 276

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":85},"contentChanges":[{"range":{"start":{"line":9,"character":1},"end":{"line":9,"character":1}},"rangeLength":0,"text":"/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":421,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 238

{"jsonrpc":"2.0","id":422,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":2},"context":{"triggerKind":2,"triggerCharacter":"/"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":420}}
>>>
Content-Length: 452

{"jsonrpc":"2.0","id":420,"result":[{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":126,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 658

{"jsonrpc":"2.0","id":421,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":126,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 71

{"jsonrpc":"2.0","id":422,"result":{"isIncomplete":false,"items":null}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":423,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":2},"end":{"line":9,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":423,"result":[]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":424,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 373

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":86},"contentChanges":[{"range":{"start":{"line":9,"character":2},"end":{"line":9,"character":2}},"rangeLength":0,"text":"https://wikihandbk.com/wiki/Arduino:%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B/DS18x20_Temperature"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":425,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":424}}
>>>
Content-Length: 658

{"jsonrpc":"2.0","id":424,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":126,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 658

{"jsonrpc":"2.0","id":425,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":126,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 258

{"jsonrpc":"2.0","id":426,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":100},"end":{"line":9,"character":100}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":426,"result":[]}Content-Length: 119

{"jsonrpc":"2.0","id":"65","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"65","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3930

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":86},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n//https://wikihandbk.com/wiki/Arduino:%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B/DS18x20_Temperature\r\n\r\n// Чтение данных с температурных датчиков типа 1-Wire: DS18S20, DS18B20, DS1822\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// Библиотека DallasTemperature может сделать это все за вас!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n\r\n   /*\r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   */\r\n/*\r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n */\r\n/*\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  */\r\n\r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n /*\r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n */\r\n\r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 119

{"jsonrpc":"2.0","id":"66","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"66","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":427,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":427,"result":[]}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"67","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"67","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":428,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":25}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":428,"result":null}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":429,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":14,"character":2},"end":{"line":14,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":429,"result":[]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":430,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":20}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":430,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":431,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":18,"character":1}}}
>>>
Content-Length: 214

{"jsonrpc":"2.0","id":431,"result":{"contents":{"kind":"markdown","value":"### class `OneWire`  \n\n---\n```cpp\nclass OneWire {}\n```"},"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":7}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":432,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":18,"character":0}}}
>>>
Content-Length: 214

{"jsonrpc":"2.0","id":432,"result":{"contents":{"kind":"markdown","value":"### class `OneWire`  \n\n---\n```cpp\nclass OneWire {}\n```"},"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":7}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":433,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":18,"character":1}}}
>>>
Content-Length: 214

{"jsonrpc":"2.0","id":433,"result":{"contents":{"kind":"markdown","value":"### class `OneWire`  \n\n---\n```cpp\nclass OneWire {}\n```"},"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":7}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":434,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":18,"character":0}}}
>>>
Content-Length: 214

{"jsonrpc":"2.0","id":434,"result":{"contents":{"kind":"markdown","value":"### class `OneWire`  \n\n---\n```cpp\nclass OneWire {}\n```"},"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":7}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":435,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":19,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":435,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":436,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":18,"character":0}}}
>>>
Content-Length: 214

{"jsonrpc":"2.0","id":436,"result":{"contents":{"kind":"markdown","value":"### class `OneWire`  \n\n---\n```cpp\nclass OneWire {}\n```"},"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":7}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":437,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":18,"character":0}}}
>>>
Content-Length: 214

{"jsonrpc":"2.0","id":437,"result":{"contents":{"kind":"markdown","value":"### class `OneWire`  \n\n---\n```cpp\nclass OneWire {}\n```"},"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":7}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":438,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":18,"character":0}}}
>>>
Content-Length: 214

{"jsonrpc":"2.0","id":438,"result":{"contents":{"kind":"markdown","value":"### class `OneWire`  \n\n---\n```cpp\nclass OneWire {}\n```"},"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":7}}}}
<<<
Content-Length: 195

{"jsonrpc":"2.0","id":439,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":18,"character":0}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":439,"result":[{"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":7}},"kind":1}]}
<<<
Content-Length: 257

{"jsonrpc":"2.0","id":440,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":18,"character":0},"end":{"line":127,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":440,"result":[]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":441,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 4734

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":87},"contentChanges":[{"range":{"start":{"line":18,"character":0},"end":{"line":127,"character":0}},"rangeLength":2916,"text":"OneWire  ds(10);  // на 10-ом контакте (если необходимо, подключите резистор на 4,7 кОм)\r\n\r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n\r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n  \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");  //  \"Адресов больше нет.\"\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n  \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");  //  \"CRC не корректен!\"\r\n      return;\r\n  }\r\n  Serial.println();\r\n \r\n  // первый ROM-байт, определяет, с каким чипом мы имеем дело:\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  //  \"  Чип – DS18S20\" или старый DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");  //  \"  Чип – DS18B20\"\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");  //  \"  Чип – DS1822\"\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");  //  \"Устройство не принадлежит семейству DS18x20.\"\r\n      return;\r\n  } \r\n\r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // запускаем конверсию и включаем паразитное питание\r\n  \r\n  delay(1000);     // 750 миллисекунд может хватить, а может и нет;\r\n                   // здесь можно использовать ds.depower(), \r\n                   // но об этом позаботится сброс \r\n  \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // считываем scratchpad-память\r\n\r\n  Serial.print(\"  Data = \");  //  \"  Данные = \"\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // нам нужно 9 байтов\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n\r\n  // конвертируем данные в температуру; поскольку результат - это\r\n  // 16-битное целое знаковое число, оно должно быть записано в типе \r\n  // данных \"int16_t\", который всегда будет 16-битным – даже если\r\n  // данные скомпилированы на 32-битном процессоре.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // разрешение по умолчанию – 9 бит\r\n    if (data[7] == 0x10) {\r\n      // регистр \"count remain\" дает полное 12-битное разрешение\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // при низком разрешении младшие биты не определяются, поэтому обнуляем их:\r\n    if (cfg == 0x00) raw = raw & ~7;  /
>>>
Content-Length: 658

{"jsonrpc":"2.0","id":441,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":126,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
/ 9-битное разрешение (93,75 миллисекунд)\r\n    else if (cfg == 0x20) raw = raw & ~3;  // 10-битное разрешение (187,5 миллисекунд)\r\n    else if (cfg == 0x40) raw = raw & ~1;  // 11-битное разрешение (375 миллисекунд)\r\n\r\n    //// по умолчанию стоит 12-битное разрешение; время конверсии – 750 миллисекунд\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");  //  \"Температура = \"\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");  //  \" по Цельсию, \"\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");  //  \" по Фаренгейту\"\r\n}"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":442,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":441}}
>>>
Content-Length: 658

{"jsonrpc":"2.0","id":442,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":126,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 258

{"jsonrpc":"2.0","id":443,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":122,"character":1},"end":{"line":122,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":443,"result":[]}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":444,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":119,"character":40}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":444,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":445,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":119,"character":40}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":445,"result":null}Content-Length: 119

{"jsonrpc":"2.0","id":"68","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"68","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 5217

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":87},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n//https://wikihandbk.com/wiki/Arduino:%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B/DS18x20_Temperature\r\n\r\n// Чтение данных с температурных датчиков типа 1-Wire: DS18S20, DS18B20, DS1822\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// Библиотека DallasTemperature может сделать это все за вас!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n\r\nOneWire  ds(10);  // на 10-ом контакте (если необходимо, подключите резистор на 4,7 кОм)\r\n\r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n\r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n  \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");  //  \"Адресов больше нет.\"\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n  \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");  //  \"CRC не корректен!\"\r\n      return;\r\n  }\r\n  Serial.println();\r\n \r\n  // первый ROM-байт, определяет, с каким чипом мы имеем дело:\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  //  \"  Чип – DS18S20\" или старый DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");  //  \"  Чип – DS18B20\"\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");  //  \"  Чип – DS1822\"\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");  //  \"Устройство не принадлежит семейству DS18x20.\"\r\n      return;\r\n  } \r\n\r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // запускаем конверсию и включаем паразитное питание\r\n  \r\n  delay(1000);     // 750 миллисекунд может хватить, а может и нет;\r\n                   // здесь можно использовать ds.depower(), \r\n                   // но об этом позаботится сброс \r\n  \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // считываем scratchpad-память\r\n\r\n  Serial.print(\"  Data = \");  //  \"  Данные = \"\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // нам нужно 9 байтов\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n\r\n  // конвертируем данные в температуру; поскольку результат - это\r\n  // 16-битное целое знаковое число, оно должно быть записано в типе \r\n  // данных \"int16_t\", который всегда будет 16-битным – даже если\r\n  // данные скомпилированы на 32-битном процессоре.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // разрешение по умолчанию – 9 бит\r\n    if (data[7] == 0x10) {\r\n      // регистр \"count remain\" дает полное 12-битное разрешение\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // при низком разрешении младшие биты не определяются, поэтому обнуляем их:\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9-битное разрешение (93,75 миллисекунд)\r\n    else if (cfg == 0x20) raw = raw & ~3;  // 10-битное разрешение (187,5 миллисекунд)\r\n    else if (cfg == 0x40) raw = raw & ~1;  // 11-битное разрешение (375 миллисекунд)\r\n\r\n    //// по умолчанию стоит 12-битное разрешение; время конверсии – 750 миллисекунд\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");  //  \"Температура = \"\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");  //  \" по Цельсию, \"\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");  //  \" по Фаренгейту\"\r\n}"}}
>>>
Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 119

{"jsonrpc":"2.0","id":"69","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"69","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"70","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"70","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":446,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":13,"character":30}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":446,"result":null}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":447,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 275

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":88},"contentChanges":[{"range":{"start":{"line":5,"character":0},"end":{"line":6,"character":0}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 658

{"jsonrpc":"2.0","id":447,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":126,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":448,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":8,"character":25}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":448,"result":null}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":448}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"71","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"71","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 5213

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":88},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n//https://wikihandbk.com/wiki/Arduino:%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D1%8B/DS18x20_Temperature\r\n\r\n// Чтение данных с температурных датчиков типа 1-Wire: DS18S20, DS18B20, DS1822\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// Библиотека DallasTemperature может сделать это все за вас!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n\r\nOneWire  ds(10);  // на 10-ом контакте (если необходимо, подключите резистор на 4,7 кОм)\r\n\r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n\r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n  \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");  //  \"Адресов больше нет.\"\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n  \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");  //  \"CRC не корректен!\"\r\n      return;\r\n  }\r\n  Serial.println();\r\n \r\n  // первый ROM-байт, определяет, с каким чипом мы имеем дело:\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  //  \"  Чип – DS18S20\" или старый DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");  //  \"  Чип – DS18B20\"\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");  //  \"  Чип – DS1822\"\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");  //  \"Устройство не принадлежит семейству DS18x20.\"\r\n      return;\r\n  } \r\n\r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // запускаем конверсию и включаем паразитное питание\r\n  \r\n  delay(1000);     // 750 миллисекунд может хватить, а может и нет;\r\n                   // здесь можно использовать ds.depower(), \r\n                   // но об этом позаботится сброс \r\n  \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // считываем scratchpad-память\r\n\r\n  Serial.print(\"  Data = \");  //  \"  Данные = \"\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // нам нужно 9 байтов\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n\r\n  // конвертируем данные в температуру; поскольку результат - это\r\n  // 16-битное целое знаковое число, оно должно быть записано в типе \r\n  // данных \"int16_t\", который всегда будет 16-битным – даже если\r\n  // данные скомпилированы на 32-битном процессоре.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // разрешение по умолчанию – 9 бит\r\n    if (data[7] == 0x10) {\r\n      // регистр \"count remain\" дает полное 12-битное разрешение\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // при низком разрешении младшие биты не определяются, поэтому обнуляем их:\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9-битное разрешение (93,75 миллисекунд)\r\n    else if (cfg == 0x20) raw = raw & ~3;  // 10-битное разрешение (187,5 миллисекунд)\r\n    else if (cfg == 0x40) raw = raw & ~1;  // 11-битное разрешение (375 миллисекунд)\r\n\r\n    //// по умолчанию стоит 12-битное разрешение; время конверсии – 750 миллисекунд\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");  //  \"Температура = \"\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");  //  \" по Цельсию, \"\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");  //  \" по Фаренгейту\"\r\n}"}}
>>>
Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 119

{"jsonrpc":"2.0","id":"72","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"72","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":449,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":6,"character":22}}}
>>>
Content-Length: 211

{"jsonrpc":"2.0","id":449,"result":{"contents":{"kind":"markdown","value":"### `DallasTemperature.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\DallasTemperature.h\n```"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":450,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":8,"character":17}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":450,"result":null}
<<<
Content-Length: 24193

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildPath":"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","buildOutputUri":"file:///c%3A/Users/%D1%80%D1%81/AppData/Local/arduino/sketches/D3D3BD4A9EF75B21D6254DA8EDFB7FF8","executableSectionsSize":[{"name":"text","size":7202,"maxSize":28672},{"name":"data","size":365,"maxSize":2560}],"usedLibraries":[{"name":"OneWire","author":"Jim Studt, Tom Pollard, Robin James, Glenn Trewitt, Jason Dangel, Guillermo Lovato, Paul Stoffregen, Scott Roberts, Bertrik Sikken, Mark Tillotson, Ken Butcher, Roger Clark, Love Nystrom","maintainer":"Paul Stoffregen","sentence":"Access 1-wire temperature sensors, memory and other chips.","paragraph":"","website":"http://www.pjrc.com/teensy/td_libs_OneWire.html","category":"Communication","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"2.3.8","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS18x20_Temperature","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS2408_Switch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS250x_PROM"],"providesIncludes":["OneWire.h"],"properties":{},"compatibleWith":{}},{"name":"DallasTemperature","author":"Miles Burton <miles@mnetcs.com>, Tim Newsome <nuisance@casualhacker.net>, Guil Barros <gfbarros@bappos.com>, Rob Tillaart <rob.tillaart@gmail.com>","maintainer":"Miles Burton <miles@mnetcs.com>","sentence":"Arduino Library for Dallas Temperature ICs","paragraph":"Supports DS18B20, DS18S20, DS1822, DS1820","website":"https://github.com/milesburton/Arduino-Temperature-Control-Library","category":"Sensors","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"3.9.0","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Alarm","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\AlarmHandler","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\ExternalPullup","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multibus_simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multiple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SaveRecallScratchPad","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SetUserData","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Single","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Tester","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Timing","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\TwoPin_DS18B20","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataDemo","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataWriteBatch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion2","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\oneWireSearch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\readPowerSupply"],"providesIncludes":["DallasTemperature.h"],"properties":{},"compatibleWith":{}}],"buildPlatform":{"id":"arduino:avr","version":"1.8.6","installDir":"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","packageUrl":""},"buildProperties":["_id=leonardo","archive_file_path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}","bootloader.extended_fuses=0xcb","bootloader.file=caterina/Caterina-Leonardo.hex","bootloader.high_fuses=0xd8","bootloader.lock_bits=0x2F","bootloader.low_fuses=0xff","bootloader.tool=avrdude","bootloader.tool.default=avrdude","bootloader.unlock_bits=0x3F","build.arch=AVR","build.board=AVR_LEONARDO","build.board.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.core=arduino","build.core.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\cores\\arduino","build.core.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.extra_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.f_cpu=16000000L","build.fqbn=arduino:avr:leonardo","build.library_discovery_phase=0","build.mcu=atmega32u4","build.path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","build.pid=0x8036","build.project_name=Termometer.ino","build.source.path=D:\\Arduino_GitHub\\Termometer","build.system.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\system","build.usb_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.usb_manufacturer=\"Unknown\"","build.usb_product=\"Arduino Leonardo\"","build.variant=leonardo","build.variant.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\variants\\leonardo","build.vid=0x2341","compiler.S.extra_flags=","compiler.S.flags=-c -g -x assembler-with-cpp -flto -MMD","compiler.ar.cmd=avr-gcc-ar","compiler.ar.extra_flags=","compiler.ar.flags=rcs","compiler.c.cmd=avr-gcc","compiler.c.elf.cmd=avr-gcc","compiler.c.elf.extra_flags=","compiler.c.elf.flags=-w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections","compiler.c.extra_flags=","compiler.c.flags=-c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects","compiler.cpp.cmd=avr-g++","compiler.cpp.extra_flags=","compiler.cpp.flags=-c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto","compiler.elf2hex.cmd=avr-objcopy","compiler.elf2hex.extra_flags=","compiler.elf2hex.flags=-O ihex -R .eeprom","compiler.ldflags=","compiler.libraries.ldflags=","compiler.objcopy.cmd=avr-objcopy","compiler.objcopy.eep.extra_flags=","compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0","compiler.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/","compiler.size.cmd=avr-size","compiler.warning_flags=-w","compiler.warning_flags.all=-Wall -Wextra","compiler.warning_flags.default=","compiler.warning_flags.more=-Wall","compiler.warning_flags.none=-w","extra.time.dst=0","extra.time.local=1735761956","extra.time.utc=1735751156","extra.time.zone=10800","ide_version=10607","name=Arduino Leonardo","pid.0=0x0036","pid.1=0x8036","pid.2=0x0036","pid.3=0x8036","pluggable_discovery.required.0=builtin:serial-discovery","pluggable_discovery.required.1=builtin:mdns-discovery","pluggable_monitor.required.serial=builtin:serial-monitor","preproc.includes.flags=-w -x c++ -M -MG -MP","preproc.macros.flags=-w -x c++ -E -CC","recipe.S.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -x assembler-with-cpp -flto -MMD -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.ar.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc-ar\" rcs  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"{object_file}\"","recipe.c.combine.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections -mmcu=atmega32u4   -o \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" {object_files}  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"-LC:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\" -lm","recipe.c.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.cpp.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.objcopy.eep.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.eep\"","recipe.objcopy.hex.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -R .eeprom  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\"","recipe.output.save_file=Termometer.ino.leonardo.hex","recipe.output.tmp_file=Termometer.ino.hex","recipe.preproc.includes=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -M -MG -MP -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\"","recipe.preproc.macros=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -E -CC -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{preprocessed_file_path}\"","recipe.size.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-size\" -A \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\"","recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).*","recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).*","recipe.size.regex.eeprom=^(?:\\.eeprom)\\s+([0-9]+).*","runtime.hardware.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr","runtime.ide.path=C:\\Users\\рс\\AppData\\Local\\Programs\\Arduino IDE\\resources\\app\\lib\\backend\\resources","runtime.ide.version=10607","runtime.os=windows","runtime.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","runtime.tools.arduinoOTA-1.3.0.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arduinoOTA.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.arm-none-eabi-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino5","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino7.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avr-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avrdude-6.3.0-arduino17.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.bossac-1.6.1-arduino.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.bossac.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.ctags-5.8-arduino11.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.ctags.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.dfu-discovery-0.1.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.dfu-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.linux-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\dfu-util","runtime.tools.linux-hid_flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\hid_flash","runtime.tools.linux-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\src","runtime.tools.linux-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stlink","runtime.tools.linux-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux64-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\dfu-util","runtime.tools.linux64-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\src","runtime.tools.linux64-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stlink","runtime.tools.linux64-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.linux64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.macosx-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\dfu-util","runtime.tools.macosx-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\src","runtime.tools.macosx-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stlink","runtime.tools.macosx-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.macosx.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.mdns-discovery-1.0.5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.5","runtime.tools.mdns-discovery-1.0.9.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mdns-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mklittlefs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mklittlefs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.python3-3.7.2-post1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.python3.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.serial-discovery-1.2.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.2.1","runtime.tools.serial-discovery-1.3.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.3.2","runtime.tools.serial-discovery-1.4.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-monitor-0.14.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.serial-monitor-0.9.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.9.1","runtime.tools.serial-monitor.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.stm32tools-2021.5.31.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.stm32tools.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.win-dfu-util-0.9-win64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\dfu-util-0.9-win64","runtime.tools.win-lib.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\lib","runtime.tools.win-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\src","runtime.tools.win-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\stlink","runtime.tools.win-texane-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.win.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.xtensa-lx106-elf-gcc-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","runtime.tools.xtensa-lx106-elf-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","sketch_path=D:\\Arduino_GitHub\\Termometer","software=ARDUINO","tools.arduino_ota.cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.arduino_ota.upload.pattern=\"{cmd}\" -address {upload.port.address} -port {upload.port.properties.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.port.properties.endpoint_upload} -sync {upload.port.properties.endpoint_sync} -reset {upload.port.properties.endpoint_reset} -sync_exp {upload.port.properties.sync_return}","tools.avrdude.bootloader.params.quiet=-q -q","tools.avrdude.bootloader.params.verbose=-v","tools.avrdude.bootloader.pattern=\"{cmd.path}\" \"-C{config.path}\" {bootloader.verbose} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6/bootloaders/caterina/Caterina-Leonardo.hex:i\" -Ulock:w:0x2F:m","tools.avrdude.cmd.path={path}/bin/avrdude","tools.avrdude.config.path={path}/etc/avrdude.conf","tools.avrdude.erase.params.quiet=-q -q","tools.avrdude.erase.params.verbose=-v","tools.avrdude.erase.pattern=\"{cmd.path}\" \"-C{config.path}\" {erase.verbose} -patmega32u4 -c{protocol} {program.extra_params} -e -Ulock:w:0x3F:m -Uefuse:w:0xcb:m -Uhfuse:w:0xd8:m -Ulfuse:w:0xff:m","tools.avrdude.network_cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","tools.avrdude.program.params.noverify=-V","tools.avrdude.program.params.quiet=-q -q","tools.avrdude.program.params.verbose=-v","tools.avrdude.program.pattern=\"{cmd.path}\" \"-C{config.path}\" {program.verbose} {program.verify} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.program.verify=","tools.avrdude.upload.network_pattern=\"{network_cmd}\" -address {serial.port} -port {upload.network.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}","tools.avrdude.upload.params.noverify=-V","tools.avrdude.upload.params.quiet=-q -q","tools.avrdude.upload.params.verbose=-v","tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} {upload.verify} -patmega32u4 -cavr109 \"-P{serial.port}\" -b57600 -D \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.upload.verify=","tools.avrdude_remote.upload.pattern=/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -patmega32u4","upload.disable_flushing=true","upload.maximum_data_size=2560","upload.maximum_size=28672","upload.protocol=avr109","upload.speed=57600","upload.tool=avrdude","upload.tool.default=avrdude","upload.tool.network=arduino_ota","upload.use_1200bps_touch=true","upload.wait_for_upload_port=true","upload_port.0.pid=0x0036","upload_port.0.vid=0x2341","upload_port.1.pid=0x8036","upload_port.1.vid=0x2341","upload_port.2.pid=0x0036","upload_port.2.vid=0x2A03","upload_port.3.pid=0x8036","upload_port.3.vid=0x2A03","upload_port.4.board=leonardo","version=1.8.6","vid.0=0x2341","vid.1=0x2341","vid.2=0x2A03","vid.3=0x2A03"]}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"73","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"73","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"74","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"74","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":451,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":8,"character":16}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":451,"result":null}
<<<
Content-Length: 24193

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildPath":"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","buildOutputUri":"file:///c%3A/Users/%D1%80%D1%81/AppData/Local/arduino/sketches/D3D3BD4A9EF75B21D6254DA8EDFB7FF8","executableSectionsSize":[{"name":"text","size":7202,"maxSize":28672},{"name":"data","size":365,"maxSize":2560}],"usedLibraries":[{"name":"OneWire","author":"Jim Studt, Tom Pollard, Robin James, Glenn Trewitt, Jason Dangel, Guillermo Lovato, Paul Stoffregen, Scott Roberts, Bertrik Sikken, Mark Tillotson, Ken Butcher, Roger Clark, Love Nystrom","maintainer":"Paul Stoffregen","sentence":"Access 1-wire temperature sensors, memory and other chips.","paragraph":"","website":"http://www.pjrc.com/teensy/td_libs_OneWire.html","category":"Communication","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"2.3.8","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS18x20_Temperature","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS2408_Switch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS250x_PROM"],"providesIncludes":["OneWire.h"],"properties":{},"compatibleWith":{}},{"name":"DallasTemperature","author":"Miles Burton <miles@mnetcs.com>, Tim Newsome <nuisance@casualhacker.net>, Guil Barros <gfbarros@bappos.com>, Rob Tillaart <rob.tillaart@gmail.com>","maintainer":"Miles Burton <miles@mnetcs.com>","sentence":"Arduino Library for Dallas Temperature ICs","paragraph":"Supports DS18B20, DS18S20, DS1822, DS1820","website":"https://github.com/milesburton/Arduino-Temperature-Control-Library","category":"Sensors","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"3.9.0","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Alarm","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\AlarmHandler","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\ExternalPullup","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multibus_simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multiple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SaveRecallScratchPad","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SetUserData","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Single","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Tester","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Timing","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\TwoPin_DS18B20","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataDemo","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataWriteBatch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion2","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\oneWireSearch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\readPowerSupply"],"providesIncludes":["DallasTemperature.h"],"properties":{},"compatibleWith":{}}],"buildPlatform":{"id":"arduino:avr","version":"1.8.6","installDir":"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","packageUrl":""},"buildProperties":["_id=leonardo","archive_file_path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}","bootloader.extended_fuses=0xcb","bootloader.file=caterina/Caterina-Leonardo.hex","bootloader.high_fuses=0xd8","bootloader.lock_bits=0x2F","bootloader.low_fuses=0xff","bootloader.tool=avrdude","bootloader.tool.default=avrdude","bootloader.unlock_bits=0x3F","build.arch=AVR","build.board=AVR_LEONARDO","build.board.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.core=arduino","build.core.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\cores\\arduino","build.core.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.extra_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.f_cpu=16000000L","build.fqbn=arduino:avr:leonardo","build.library_discovery_phase=0","build.mcu=atmega32u4","build.path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","build.pid=0x8036","build.project_name=Termometer.ino","build.source.path=D:\\Arduino_GitHub\\Termometer","build.system.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\system","build.usb_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.usb_manufacturer=\"Unknown\"","build.usb_product=\"Arduino Leonardo\"","build.variant=leonardo","build.variant.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\variants\\leonardo","build.vid=0x2341","compiler.S.extra_flags=","compiler.S.flags=-c -g -x assembler-with-cpp -flto -MMD","compiler.ar.cmd=avr-gcc-ar","compiler.ar.extra_flags=","compiler.ar.flags=rcs","compiler.c.cmd=avr-gcc","compiler.c.elf.cmd=avr-gcc","compiler.c.elf.extra_flags=","compiler.c.elf.flags=-w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections","compiler.c.extra_flags=","compiler.c.flags=-c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects","compiler.cpp.cmd=avr-g++","compiler.cpp.extra_flags=","compiler.cpp.flags=-c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto","compiler.elf2hex.cmd=avr-objcopy","compiler.elf2hex.extra_flags=","compiler.elf2hex.flags=-O ihex -R .eeprom","compiler.ldflags=","compiler.libraries.ldflags=","compiler.objcopy.cmd=avr-objcopy","compiler.objcopy.eep.extra_flags=","compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0","compiler.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/","compiler.size.cmd=avr-size","compiler.warning_flags=-w","compiler.warning_flags.all=-Wall -Wextra","compiler.warning_flags.default=","compiler.warning_flags.more=-Wall","compiler.warning_flags.none=-w","extra.time.dst=0","extra.time.local=1735761981","extra.time.utc=1735751181","extra.time.zone=10800","ide_version=10607","name=Arduino Leonardo","pid.0=0x0036","pid.1=0x8036","pid.2=0x0036","pid.3=0x8036","pluggable_discovery.required.0=builtin:serial-discovery","pluggable_discovery.required.1=builtin:mdns-discovery","pluggable_monitor.required.serial=builtin:serial-monitor","preproc.includes.flags=-w -x c++ -M -MG -MP","preproc.macros.flags=-w -x c++ -E -CC","recipe.S.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -x assembler-with-cpp -flto -MMD -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.ar.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc-ar\" rcs  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"{object_file}\"","recipe.c.combine.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections -mmcu=atmega32u4   -o \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" {object_files}  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"-LC:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\" -lm","recipe.c.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.cpp.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.objcopy.eep.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.eep\"","recipe.objcopy.hex.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -R .eeprom  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\"","recipe.output.save_file=Termometer.ino.leonardo.hex","recipe.output.tmp_file=Termometer.ino.hex","recipe.preproc.includes=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -M -MG -MP -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\"","recipe.preproc.macros=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -E -CC -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{preprocessed_file_path}\"","recipe.size.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-size\" -A \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\"","recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).*","recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).*","recipe.size.regex.eeprom=^(?:\\.eeprom)\\s+([0-9]+).*","runtime.hardware.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr","runtime.ide.path=C:\\Users\\рс\\AppData\\Local\\Programs\\Arduino IDE\\resources\\app\\lib\\backend\\resources","runtime.ide.version=10607","runtime.os=windows","runtime.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","runtime.tools.arduinoOTA-1.3.0.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arduinoOTA.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.arm-none-eabi-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino5","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino7.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avr-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avrdude-6.3.0-arduino17.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.bossac-1.6.1-arduino.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.bossac.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.ctags-5.8-arduino11.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.ctags.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.dfu-discovery-0.1.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.dfu-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.linux-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\dfu-util","runtime.tools.linux-hid_flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\hid_flash","runtime.tools.linux-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\src","runtime.tools.linux-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stlink","runtime.tools.linux-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux64-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\dfu-util","runtime.tools.linux64-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\src","runtime.tools.linux64-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stlink","runtime.tools.linux64-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.linux64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.macosx-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\dfu-util","runtime.tools.macosx-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\src","runtime.tools.macosx-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stlink","runtime.tools.macosx-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.macosx.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.mdns-discovery-1.0.5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.5","runtime.tools.mdns-discovery-1.0.9.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mdns-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mklittlefs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mklittlefs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.python3-3.7.2-post1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.python3.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.serial-discovery-1.2.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.2.1","runtime.tools.serial-discovery-1.3.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.3.2","runtime.tools.serial-discovery-1.4.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-monitor-0.14.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.serial-monitor-0.9.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.9.1","runtime.tools.serial-monitor.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.stm32tools-2021.5.31.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.stm32tools.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.win-dfu-util-0.9-win64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\dfu-util-0.9-win64","runtime.tools.win-lib.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\lib","runtime.tools.win-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\src","runtime.tools.win-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\stlink","runtime.tools.win-texane-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.win.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.xtensa-lx106-elf-gcc-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","runtime.tools.xtensa-lx106-elf-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","sketch_path=D:\\Arduino_GitHub\\Termometer","software=ARDUINO","tools.arduino_ota.cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.arduino_ota.upload.pattern=\"{cmd}\" -address {upload.port.address} -port {upload.port.properties.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.port.properties.endpoint_upload} -sync {upload.port.properties.endpoint_sync} -reset {upload.port.properties.endpoint_reset} -sync_exp {upload.port.properties.sync_return}","tools.avrdude.bootloader.params.quiet=-q -q","tools.avrdude.bootloader.params.verbose=-v","tools.avrdude.bootloader.pattern=\"{cmd.path}\" \"-C{config.path}\" {bootloader.verbose} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6/bootloaders/caterina/Caterina-Leonardo.hex:i\" -Ulock:w:0x2F:m","tools.avrdude.cmd.path={path}/bin/avrdude","tools.avrdude.config.path={path}/etc/avrdude.conf","tools.avrdude.erase.params.quiet=-q -q","tools.avrdude.erase.params.verbose=-v","tools.avrdude.erase.pattern=\"{cmd.path}\" \"-C{config.path}\" {erase.verbose} -patmega32u4 -c{protocol} {program.extra_params} -e -Ulock:w:0x3F:m -Uefuse:w:0xcb:m -Uhfuse:w:0xd8:m -Ulfuse:w:0xff:m","tools.avrdude.network_cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","tools.avrdude.program.params.noverify=-V","tools.avrdude.program.params.quiet=-q -q","tools.avrdude.program.params.verbose=-v","tools.avrdude.program.pattern=\"{cmd.path}\" \"-C{config.path}\" {program.verbose} {program.verify} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.program.verify=","tools.avrdude.upload.network_pattern=\"{network_cmd}\" -address {serial.port} -port {upload.network.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}","tools.avrdude.upload.params.noverify=-V","tools.avrdude.upload.params.quiet=-q -q","tools.avrdude.upload.params.verbose=-v","tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} {upload.verify} -patmega32u4 -cavr109 \"-P{serial.port}\" -b57600 -D \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.upload.verify=","tools.avrdude_remote.upload.pattern=/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -patmega32u4","upload.disable_flushing=true","upload.maximum_data_size=2560","upload.maximum_size=28672","upload.protocol=avr109","upload.speed=57600","upload.tool=avrdude","upload.tool.default=avrdude","upload.tool.network=arduino_ota","upload.use_1200bps_touch=true","upload.wait_for_upload_port=true","upload_port.0.pid=0x0036","upload_port.0.vid=0x2341","upload_port.1.pid=0x8036","upload_port.1.vid=0x2341","upload_port.2.pid=0x0036","upload_port.2.vid=0x2A03","upload_port.3.pid=0x8036","upload_port.3.vid=0x2A03","upload_port.4.board=leonardo","version=1.8.6","vid.0=0x2341","vid.1=0x2341","vid.2=0x2A03","vid.3=0x2A03"]}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"75","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"75","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"76","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"76","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":452,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":8,"character":57}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":452,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":453,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":17,"character":55}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":453,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":454,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":8,"character":18}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":454,"result":null}
<<<
Content-Length: 195

{"jsonrpc":"2.0","id":455,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":3,"character":10}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":455,"result":[]}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":456,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":3,"character":10},"end":{"line":3,"character":10}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":456,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":457,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":6,"character":30}}}
>>>
Content-Length: 211

{"jsonrpc":"2.0","id":457,"result":{"contents":{"kind":"markdown","value":"### `DallasTemperature.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\DallasTemperature.h\n```"}}}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":458,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":5,"character":20},"end":{"line":5,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":458,"result":[]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":459,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":10,"character":55}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":459,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":460,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":10,"character":29}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":460,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":461,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":10,"character":16}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":461,"result":null}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":461}}Content-Length: 184

{"jsonrpc":"2.0","id":462,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":10,"character":17}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":462,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":463,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":15,"character":21}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":463,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":464,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":29,"character":26}}}
>>>
Content-Length: 258

{"jsonrpc":"2.0","id":464,"result":{"contents":{"kind":"markdown","value":"### variable `fahrenheit`  \n\n---\nType: `float`  \n\n---\n```cpp\n// In loop\nfloat fahrenheit\n```"},"range":{"start":{"line":29,"character":17},"end":{"line":29,"character":27}}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":465,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":42,"character":20}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":465,"result":null}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":466,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":43,"character":3},"end":{"line":43,"character":3}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":466,"result":[]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":467,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":58,"character":30}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":467,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":468,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":102,"character":37}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":468,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":469,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":107,"character":36}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":469,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":470,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":107,"character":45}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":470,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":471,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":109,"character":43}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":471,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":472,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":109,"character":47}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":472,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":473,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":102,"character":27}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":473,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":474,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":102,"character":28}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":474,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":475,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":102,"character":28}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":475,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":476,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":106,"character":22}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":476,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":477,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":106,"character":24}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":477,"result":null}
<<<
Content-Length: 258

{"jsonrpc":"2.0","id":478,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":36,"character":11},"end":{"line":36,"character":11}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":478,"result":[]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":479,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":66,"character":35}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":479,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":480,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":108,"character":37}}}
>>>
Content-Length: 254

{"jsonrpc":"2.0","id":480,"result":{"contents":{"kind":"markdown","value":"### variable `data`  \n\n---\nType: `byte[12]`  \n\n---\n```cpp\n// In loop\nbyte data[12]\n```"},"range":{"start":{"line":108,"character":34},"end":{"line":108,"character":38}}}}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":481,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":100,"character":18}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":481,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":482,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":100,"character":18}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":482,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":483,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":100,"character":17}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":483,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":484,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":20,"character":15}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":484,"result":null}
<<<
Content-Length: 258

{"jsonrpc":"2.0","id":485,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":23,"character":17},"end":{"line":23,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":485,"result":[]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":486,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":82,"character":46}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":486,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":487,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":103,"character":38}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":487,"result":null}
<<<
Content-Length: 185

{"jsonrpc":"2.0","id":488,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":102,"character":38}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":488,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":489,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":97,"character":44}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":489,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":490,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":94,"character":45}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":490,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":491,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":74,"character":46}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":491,"result":null}
<<<
Content-Length: 196

{"jsonrpc":"2.0","id":492,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":91,"character":16}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":492,"result":[]}
<<<
Content-Length: 258

{"jsonrpc":"2.0","id":493,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":91,"character":16},"end":{"line":91,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":493,"result":[]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":494,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":12,"character":29}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":494,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":495,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":15,"character":35}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":495,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":496,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":17,"character":29}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":496,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":497,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":17,"character":19}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":497,"result":null}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":497}}Content-Length: 184

{"jsonrpc":"2.0","id":498,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":12,"character":14}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":498,"result":null}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":498}}Content-Length: 184

{"jsonrpc":"2.0","id":499,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":10,"character":16}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":499,"result":null}
<<<
Content-Length: 196

{"jsonrpc":"2.0","id":500,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":10,"character":17}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":500,"result":[]}
<<<
Content-Length: 258

{"jsonrpc":"2.0","id":501,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":10,"character":17},"end":{"line":10,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":501,"result":[]}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":502,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":8,"character":3}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":502,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":503,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":8,"character":2}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":503,"result":null}
<<<
Content-Length: 194

{"jsonrpc":"2.0","id":504,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":8,"character":2}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":504,"result":[]}
<<<
Content-Length: 255

{"jsonrpc":"2.0","id":505,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":6,"character":30},"end":{"line":8,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":505,"result":[]}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":506,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":8,"character":2},"end":{"line":9,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":506,"result":[]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":507,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":89},"contentChanges":[{"range":{"start":{"line":8,"character":2},"end":{"line":9,"character":0}},"rangeLength":100,"text":""}]}}Content-Length: 155

{"jsonrpc":"2.0","id":508,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 658

{"jsonrpc":"2.0","id":507,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":15}},"selectionRange":{"start":{"line":17,"character":9},"end":{"line":17,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":21,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":23,"character":0},"end":{"line":125,"character":1}},"selectionRange":{"start":{"line":23,"character":5},"end":{"line":23,"character":9}}}]}Content-Length: 1074

{"jsonrpc":"2.0","id":508,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":16,"character":0},"end":{"line":16,"character":15}},"selectionRange":{"start":{"line":16,"character":9},"end":{"line":16,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":16}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":15}},"selectionRange":{"start":{"line":23,"character":5},"end":{"line":23,"character":9}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":20,"character":1}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":22,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":22,"character":5},"end":{"line":22,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":507}}Content-Length: 254

{"jsonrpc":"2.0","id":509,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":509,"result":[]}Content-Length: 119

{"jsonrpc":"2.0","id":"77","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"77","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 5111

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":89},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n//\r\n// Чтение данных с температурных датчиков типа 1-Wire: DS18S20, DS18B20, DS1822\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// Библиотека DallasTemperature может сделать это все за вас!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n\r\nOneWire  ds(10);  // на 10-ом контакте (если необходимо, подключите резистор на 4,7 кОм)\r\n\r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n\r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n  \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");  //  \"Адресов больше нет.\"\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n  \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");  //  \"CRC не корректен!\"\r\n      return;\r\n  }\r\n  Serial.println();\r\n \r\n  // первый ROM-байт, определяет, с каким чипом мы имеем дело:\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  //  \"  Чип – DS18S20\" или старый DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");  //  \"  Чип – DS18B20\"\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");  //  \"  Чип – DS1822\"\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");  //  \"Устройство не принадлежит семейству DS18x20.\"\r\n      return;\r\n  } \r\n\r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // запускаем конверсию и включаем паразитное питание\r\n  \r\n  delay(1000);     // 750 миллисекунд может хватить, а может и нет;\r\n                   // здесь можно использовать ds.depower(), \r\n                   // но об этом позаботится сброс \r\n  \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // считываем scratchpad-память\r\n\r\n  Serial.print(\"  Data = \");  //  \"  Данные = \"\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // нам нужно 9 байтов\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n\r\n  // конвертируем данные в температуру; поскольку результат - это\r\n  // 16-битное целое знаковое число, оно должно быть записано в типе \r\n  // данных \"int16_t\", который всегда будет 16-битным – даже если\r\n  // данные скомпилированы на 32-битном процессоре.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // разрешение по умолчанию – 9 бит\r\n    if (data[7] == 0x10) {\r\n      // регистр \"count remain\" дает полное 12-битное разрешение\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // при низком разрешении младшие биты не определяются, поэтому обнуляем их:\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9-битное разрешение (93,75 миллисекунд)\r\n    else if (cfg == 0x20) raw = raw & ~3;  // 10-битное разрешение (187,5 миллисекунд)\r\n    else if (cfg == 0x40) raw = raw & ~1;  // 11-битное разрешение (375 миллисекунд)\r\n\r\n    //// по умолчанию стоит 12-битное разрешение; время конверсии – 750 миллисекунд\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");  //  \"Температура = \"\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");  //  \" по Цельсию, \"\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");  //  \" по Фаренгейту\"\r\n}"}}Content-Length: 155

{"jsonrpc":"2.0","id":510,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 423

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":90},"contentChanges":[{"range":{"start":{"line":8,"character":2},"end":{"line":8,"character":2}},"rangeLength":0,"text":"https://роботехника18.рф/%d1%82%d0%b5%d1%80%d0%bc%d0%be%d0%b4%d0%b0%d1%82%d1%87%d0%b8%d0%ba-%d0%b0%d1%80%d0%b4%d1%83%d0%b8%d0%bd%d0%be/"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":511,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 1074

{"jsonrpc":"2.0","id":510,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":16,"character":0},"end":{"line":16,"character":15}},"selectionRange":{"start":{"line":16,"character":9},"end":{"line":16,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":16}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":15}},"selectionRange":{"start":{"line":23,"character":5},"end":{"line":23,"character":9}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":20,"character":1}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":22,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":22,"character":5},"end":{"line":22,"character":9}}}]}Content-Length: 1074

{"jsonrpc":"2.0","id":511,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":16,"character":0},"end":{"line":16,"character":15}},"selectionRange":{"start":{"line":16,"character":9},"end":{"line":16,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":19,"character":16}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":15}},"selectionRange":{"start":{"line":23,"character":5},"end":{"line":23,"character":9}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":20,"character":1}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":22,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":22,"character":5},"end":{"line":22,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":510}}Content-Length: 258

{"jsonrpc":"2.0","id":512,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":8,"character":137},"end":{"line":8,"character":137}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":512,"result":[]}
<<<
Content-Length: 5259

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":90},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n//https://роботехника18.рф/%d1%82%d0%b5%d1%80%d0%bc%d0%be%d0%b4%d0%b0%d1%82%d1%87%d0%b8%d0%ba-%d0%b0%d1%80%d0%b4%d1%83%d0%b8%d0%bd%d0%be/\r\n// Чтение данных с температурных датчиков типа 1-Wire: DS18S20, DS18B20, DS1822\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// Библиотека DallasTemperature может сделать это все за вас!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n\r\nOneWire  ds(10);  // на 10-ом контакте (если необходимо, подключите резистор на 4,7 кОм)\r\n\r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n\r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n  \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");  //  \"Адресов больше нет.\"\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n  \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");  //  \"CRC не корректен!\"\r\n      return;\r\n  }\r\n  Serial.println();\r\n \r\n  // первый ROM-байт, определяет, с каким чипом мы имеем дело:\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  //  \"  Чип – DS18S20\" или старый DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");  //  \"  Чип – DS18B20\"\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");  //  \"  Чип – DS1822\"\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");  //  \"Устройство не принадлежит семейству DS18x20.\"\r\n      return;\r\n  } \r\n\r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // запускаем конверсию и включаем паразитное питание\r\n  \r\n  delay(1000);     // 750 миллисекунд может хватить, а может и нет;\r\n                   // здесь можно использовать ds.depower(), \r\n                   // но об этом позаботится сброс \r\n  \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // считываем scratchpad-память\r\n\r\n  Serial.print(\"  Data = \");  //  \"  Данные = \"\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // нам нужно 9 байтов\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n\r\n  // конвертируем данные в температуру; поскольку результат - это\r\n  // 16-битное целое знаковое число, оно должно быть записано в типе \r\n  // данных \"int16_t\", который всегда будет 16-битным – даже если\r\n  // данные скомпилированы на 32-битном процессоре.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // разрешение по умолчанию – 9 бит\r\n    if (data[7] == 0x10) {\r\n      // регистр \"count remain\" дает полное 12-битное разрешение\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // при низком разрешении младшие биты не определяются, поэтому обнуляем их:\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9-битное разрешение (93,75 миллисекунд)\r\n    else if (cfg == 0x20) raw = raw & ~3;  // 10-битное разрешение (187,5 миллисекунд)\r\n    else if (cfg == 0x40) raw = raw & ~1;  // 11-битное разрешение (375 миллисекунд)\r\n\r\n    //// по умолчанию стоит 12-битное разрешение; время конверсии – 750 миллисекунд\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");  //  \"Температура = \"\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");  //  \" по Цельсию, \"\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");  //  \" по Фаренгейту\"\r\n}"}}
>>>
Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 119

{"jsonrpc":"2.0","id":"78","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"78","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":513,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":8,"character":0},"end":{"line":8,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":513,"result":[]}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"79","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"79","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":514,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":39}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":514,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":515,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":1}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":515,"result":null}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":515}}Content-Length: 182

{"jsonrpc":"2.0","id":516,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":516,"result":null}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":517,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":17}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":517,"result":[]}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":518,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":40}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":518,"result":[]}
<<<
Content-Length: 255

{"jsonrpc":"2.0","id":519,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":12,"character":2}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":519,"result":[]}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":520,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":50}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":520,"result":[]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":521,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":91},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":11,"character":50}},"rangeLength":135,"text":""}]}}Content-Length: 155

{"jsonrpc":"2.0","id":522,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 658

{"jsonrpc":"2.0","id":521,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":16,"character":0},"end":{"line":16,"character":15}},"selectionRange":{"start":{"line":16,"character":9},"end":{"line":16,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":20,"character":1}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":22,"character":0},"end":{"line":124,"character":1}},"selectionRange":{"start":{"line":22,"character":5},"end":{"line":22,"character":9}}}]}Content-Length: 659

{"jsonrpc":"2.0","id":522,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":15}},"selectionRange":{"start":{"line":14,"character":9},"end":{"line":14,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":16}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":122,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":521}}Content-Length: 184

{"jsonrpc":"2.0","id":523,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":60}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":523,"result":null}Content-Length: 119

{"jsonrpc":"2.0","id":"80","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"80","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 5082

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":91},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n//https://роботехника18.рф/%d1%82%d0%b5%d1%80%d0%bc%d0%be%d0%b4%d0%b0%d1%82%d1%87%d0%b8%d0%ba-%d0%b0%d1%80%d0%b4%d1%83%d0%b8%d0%bd%d0%be/\r\n\r\n//\r\n// Библиотека DallasTemperature может сделать это все за вас!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n\r\nOneWire  ds(10);  // на 10-ом контакте (если необходимо, подключите резистор на 4,7 кОм)\r\n\r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n\r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n  \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");  //  \"Адресов больше нет.\"\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n  \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");  //  \"CRC не корректен!\"\r\n      return;\r\n  }\r\n  Serial.println();\r\n \r\n  // первый ROM-байт, определяет, с каким чипом мы имеем дело:\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  //  \"  Чип – DS18S20\" или старый DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");  //  \"  Чип – DS18B20\"\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");  //  \"  Чип – DS1822\"\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");  //  \"Устройство не принадлежит семейству DS18x20.\"\r\n      return;\r\n  } \r\n\r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // запускаем конверсию и включаем паразитное питание\r\n  \r\n  delay(1000);     // 750 миллисекунд может хватить, а может и нет;\r\n                   // здесь можно использовать ds.depower(), \r\n                   // но об этом позаботится сброс \r\n  \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // считываем scratchpad-память\r\n\r\n  Serial.print(\"  Data = \");  //  \"  Данные = \"\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // нам нужно 9 байтов\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n\r\n  // конвертируем данные в температуру; поскольку результат - это\r\n  // 16-битное целое знаковое число, оно должно быть записано в типе \r\n  // данных \"int16_t\", который всегда будет 16-битным – даже если\r\n  // данные скомпилированы на 32-битном процессоре.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // разрешение по умолчанию – 9 бит\r\n    if (data[7] == 0x10) {\r\n      // регистр \"count remain\" дает полное 12-битное разрешение\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // при низком разрешении младшие биты не определяются, поэтому обнуляем их:\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9-битное разрешение (93,75 миллисекунд)\r\n    else if (cfg == 0x20) raw = raw & ~3;  // 10-битное разрешение (187,5 миллисекунд)\r\n    else if (cfg == 0x40) raw = raw & ~1;  // 11-битное разрешение (375 миллисекунд)\r\n\r\n    //// по умолчанию стоит 12-битное разрешение; время конверсии – 750 миллисекунд\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");  //  \"Температура = \"\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");  //  \" по Цельсию, \"\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");  //  \" по Фаренгейту\"\r\n}"}}Content-Length: 155

{"jsonrpc":"2.0","id":524,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 276

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":92},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":10,"character":0}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 659

{"jsonrpc":"2.0","id":524,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":15}},"selectionRange":{"start":{"line":14,"character":9},"end":{"line":14,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":16}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":122,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":9}}}]}
<<<
Content-Length: 5078

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":92},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n//https://роботехника18.рф/%d1%82%d0%b5%d1%80%d0%bc%d0%be%d0%b4%d0%b0%d1%82%d1%87%d0%b8%d0%ba-%d0%b0%d1%80%d0%b4%d1%83%d0%b8%d0%bd%d0%be/\r\n//\r\n// Библиотека DallasTemperature может сделать это все за вас!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n\r\nOneWire  ds(10);  // на 10-ом контакте (если необходимо, подключите резистор на 4,7 кОм)\r\n\r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n\r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n  \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");  //  \"Адресов больше нет.\"\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n  \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n\r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");  //  \"CRC не корректен!\"\r\n      return;\r\n  }\r\n  Serial.println();\r\n \r\n  // первый ROM-байт, определяет, с каким чипом мы имеем дело:\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  //  \"  Чип – DS18S20\" или старый DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");  //  \"  Чип – DS18B20\"\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");  //  \"  Чип – DS1822\"\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");  //  \"Устройство не принадлежит семейству DS18x20.\"\r\n      return;\r\n  } \r\n\r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // запускаем конверсию и включаем паразитное питание\r\n  \r\n  delay(1000);     // 750 миллисекунд может хватить, а может и нет;\r\n                   // здесь можно использовать ds.depower(), \r\n                   // но об этом позаботится сброс \r\n  \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // считываем scratchpad-память\r\n\r\n  Serial.print(\"  Data = \");  //  \"  Данные = \"\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // нам нужно 9 байтов\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n\r\n  // конвертируем данные в температуру; поскольку результат - это\r\n  // 16-битное целое знаковое число, оно должно быть записано в типе \r\n  // данных \"int16_t\", который всегда будет 16-битным – даже если\r\n  // данные скомпилированы на 32-битном процессоре.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // разрешение по умолчанию – 9 бит\r\n    if (data[7] == 0x10) {\r\n      // регистр \"count remain\" дает полное 12-битное разрешение\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // при низком разрешении младшие биты не определяются, поэтому обнуляем их:\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9-битное разрешение (93,75 миллисекунд)\r\n    else if (cfg == 0x20) raw = raw & ~3;  // 10-битное разрешение (187,5 миллисекунд)\r\n    else if (cfg == 0x40) raw = raw & ~1;  // 11-битное разрешение (375 миллисекунд)\r\n\r\n    //// по умолчанию стоит 12-битное разрешение; время конверсии – 750 миллисекунд\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");  //  \"Температура = \"\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");  //  \" по Цельсию, \"\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");  //  \" по Фаренгейту\"\r\n}"}}
>>>
Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":525,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":13,"character":25}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":525,"result":null}Content-Length: 119

{"jsonrpc":"2.0","id":"81","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"81","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":526,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":13,"character":16}}}
>>>
Content-Length: 114

{"jsonrpc":"2.0","id":"82","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 40

{"jsonrpc":"2.0","id":526,"result":null}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"82","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":527,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":17,"character":1},"end":{"line":17,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":527,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":528,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":13,"character":0}}}
>>>
Content-Length: 214

{"jsonrpc":"2.0","id":528,"result":{"contents":{"kind":"markdown","value":"### class `OneWire`  \n\n---\n```cpp\nclass OneWire {}\n```"},"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":7}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":529,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":13,"character":0}}}
>>>
Content-Length: 214

{"jsonrpc":"2.0","id":529,"result":{"contents":{"kind":"markdown","value":"### class `OneWire`  \n\n---\n```cpp\nclass OneWire {}\n```"},"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":7}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":530,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":13,"character":0}}}
>>>
Content-Length: 214

{"jsonrpc":"2.0","id":530,"result":{"contents":{"kind":"markdown","value":"### class `OneWire`  \n\n---\n```cpp\nclass OneWire {}\n```"},"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":7}}}}
<<<
Content-Length: 195

{"jsonrpc":"2.0","id":531,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":13,"character":0}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":531,"result":[{"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":7}},"kind":1}]}
<<<
Content-Length: 257

{"jsonrpc":"2.0","id":532,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":13,"character":0},"end":{"line":117,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":532,"result":[]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":533,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 865

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":93},"contentChanges":[{"range":{"start":{"line":13,"character":0},"end":{"line":117,"character":1}},"rangeLength":3390,"text":"OneWire oneWire(2);  // порт подключения датчика\r\nDallasTemperature ds(&oneWire);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);   // инициализация монитора порта\r\n  ds.begin();                 // инициализация датчика ds18b20\r\n}\r\n\r\nvoid loop() {\r\n  ds.requestTemperatures();                       // считываем температуру с датчика\r\n  \r\n  Serial.print(ds.getTempCByIndex(0));   // выводим температуру на монитор\r\n  Serial.println(\"C\");\r\n}"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":534,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 658

{"jsonrpc":"2.0","id":533,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":15}},"selectionRange":{"start":{"line":13,"character":9},"end":{"line":13,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":121,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":9}}}]}Content-Length: 671

{"jsonrpc":"2.0","id":534,"result":[{"name":"oneWire","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":18}},"selectionRange":{"start":{"line":18,"character":8},"end":{"line":18,"character":15}}},{"name":"ds","detail":"DallasTemperature","kind":13,"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":30}},"selectionRange":{"start":{"line":17,"character":18},"end":{"line":17,"character":20}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}]}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":533}}Content-Length: 256

{"jsonrpc":"2.0","id":535,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":26,"character":1},"end":{"line":26,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":535,"result":[]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":536,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":13,"character":16}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":536,"result":null}Content-Length: 119

{"jsonrpc":"2.0","id":"83","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"83","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 1209

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":93},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n//https://роботехника18.рф/%d1%82%d0%b5%d1%80%d0%bc%d0%be%d0%b4%d0%b0%d1%82%d1%87%d0%b8%d0%ba-%d0%b0%d1%80%d0%b4%d1%83%d0%b8%d0%bd%d0%be/\r\n//\r\n// Библиотека DallasTemperature может сделать это все за вас!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n\r\nOneWire oneWire(2);  // порт подключения датчика\r\nDallasTemperature ds(&oneWire);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);   // инициализация монитора порта\r\n  ds.begin();                 // инициализация датчика ds18b20\r\n}\r\n\r\nvoid loop() {\r\n  ds.requestTemperatures();                       // считываем температуру с датчика\r\n  \r\n  Serial.print(ds.getTempCByIndex(0));   // выводим температуру на монитор\r\n  Serial.println(\"C\");\r\n}"}}Content-Length: 196

{"jsonrpc":"2.0","id":537,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":13,"character":16}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":537,"result":[]}
<<<
Content-Length: 258

{"jsonrpc":"2.0","id":538,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":13,"character":16},"end":{"line":13,"character":16}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":538,"result":[]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":539,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":14,"character":17}}}
>>>
Content-Length: 40

{"jsonrpc":"2.0","id":539,"result":null}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":540,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":94},"contentChanges":[{"range":{"start":{"line":13,"character":16},"end":{"line":13,"character":17}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 671

{"jsonrpc":"2.0","id":540,"result":[{"name":"oneWire","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":18}},"selectionRange":{"start":{"line":18,"character":8},"end":{"line":18,"character":15}}},{"name":"ds","detail":"DallasTemperature","kind":13,"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":30}},"selectionRange":{"start":{"line":17,"character":18},"end":{"line":17,"character":20}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}]}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":541,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 280

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":95},"contentChanges":[{"range":{"start":{"line":13,"character":16},"end":{"line":13,"character":16}},"rangeLength":0,"text":"1"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":542,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":541,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}Content-Length: 124

{"jsonrpc":"2.0","id":542,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":541}}Content-Length: 155

{"jsonrpc":"2.0","id":543,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 280

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":96},"contentChanges":[{"range":{"start":{"line":13,"character":17},"end":{"line":13,"character":17}},"rangeLength":0,"text":"0"}]}}Content-Length: 155

{"jsonrpc":"2.0","id":544,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":543,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}Content-Length: 124

{"jsonrpc":"2.0","id":544,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}
<<<
Content-Length: 64

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":543}}Content-Length: 258

{"jsonrpc":"2.0","id":545,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":13,"character":18},"end":{"line":13,"character":18}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":545,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":546,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":17,"character":25}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":546,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}Content-Length: 119

{"jsonrpc":"2.0","id":"84","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"84","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 1210

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":96},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n//https://роботехника18.рф/%d1%82%d0%b5%d1%80%d0%bc%d0%be%d0%b4%d0%b0%d1%82%d1%87%d0%b8%d0%ba-%d0%b0%d1%80%d0%b4%d1%83%d0%b8%d0%bd%d0%be/\r\n//\r\n// Библиотека DallasTemperature может сделать это все за вас!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n\r\nOneWire oneWire(10);  // порт подключения датчика\r\nDallasTemperature ds(&oneWire);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);   // инициализация монитора порта\r\n  ds.begin();                 // инициализация датчика ds18b20\r\n}\r\n\r\nvoid loop() {\r\n  ds.requestTemperatures();                       // считываем температуру с датчика\r\n  \r\n  Serial.print(ds.getTempCByIndex(0));   // выводим температуру на монитор\r\n  Serial.println(\"C\");\r\n}"}}Content-Length: 184

{"jsonrpc":"2.0","id":547,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":17,"character":26}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":547,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 119

{"jsonrpc":"2.0","id":"85","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"85","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":548,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":548,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 258

{"jsonrpc":"2.0","id":549,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":16,"character":14},"end":{"line":16,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":549,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}
<<<
Content-Length: 24193

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildPath":"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","buildOutputUri":"file:///c%3A/Users/%D1%80%D1%81/AppData/Local/arduino/sketches/D3D3BD4A9EF75B21D6254DA8EDFB7FF8","executableSectionsSize":[{"name":"text","size":7500,"maxSize":28672},{"name":"data","size":208,"maxSize":2560}],"usedLibraries":[{"name":"OneWire","author":"Jim Studt, Tom Pollard, Robin James, Glenn Trewitt, Jason Dangel, Guillermo Lovato, Paul Stoffregen, Scott Roberts, Bertrik Sikken, Mark Tillotson, Ken Butcher, Roger Clark, Love Nystrom","maintainer":"Paul Stoffregen","sentence":"Access 1-wire temperature sensors, memory and other chips.","paragraph":"","website":"http://www.pjrc.com/teensy/td_libs_OneWire.html","category":"Communication","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"2.3.8","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS18x20_Temperature","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS2408_Switch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS250x_PROM"],"providesIncludes":["OneWire.h"],"properties":{},"compatibleWith":{}},{"name":"DallasTemperature","author":"Miles Burton <miles@mnetcs.com>, Tim Newsome <nuisance@casualhacker.net>, Guil Barros <gfbarros@bappos.com>, Rob Tillaart <rob.tillaart@gmail.com>","maintainer":"Miles Burton <miles@mnetcs.com>","sentence":"Arduino Library for Dallas Temperature ICs","paragraph":"Supports DS18B20, DS18S20, DS1822, DS1820","website":"https://github.com/milesburton/Arduino-Temperature-Control-Library","category":"Sensors","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"3.9.0","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Alarm","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\AlarmHandler","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\ExternalPullup","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multibus_simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multiple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SaveRecallScratchPad","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SetUserData","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Single","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Tester","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Timing","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\TwoPin_DS18B20","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataDemo","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataWriteBatch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion2","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\oneWireSearch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\readPowerSupply"],"providesIncludes":["DallasTemperature.h"],"properties":{},"compatibleWith":{}}],"buildPlatform":{"id":"arduino:avr","version":"1.8.6","installDir":"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","packageUrl":""},"buildProperties":["_id=leonardo","archive_file_path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}","bootloader.extended_fuses=0xcb","bootloader.file=caterina/Caterina-Leonardo.hex","bootloader.high_fuses=0xd8","bootloader.lock_bits=0x2F","bootloader.low_fuses=0xff","bootloader.tool=avrdude","bootloader.tool.default=avrdude","bootloader.unlock_bits=0x3F","build.arch=AVR","build.board=AVR_LEONARDO","build.board.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.core=arduino","build.core.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\cores\\arduino","build.core.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.extra_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.f_cpu=16000000L","build.fqbn=arduino:avr:leonardo","build.library_discovery_phase=0","build.mcu=atmega32u4","build.path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","build.pid=0x8036","build.project_name=Termometer.ino","build.source.path=D:\\Arduino_GitHub\\Termometer","build.system.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\system","build.usb_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.usb_manufacturer=\"Unknown\"","build.usb_product=\"Arduino Leonardo\"","build.variant=leonardo","build.variant.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\variants\\leonardo","build.vid=0x2341","compiler.S.extra_flags=","compiler.S.flags=-c -g -x assembler-with-cpp -flto -MMD","compiler.ar.cmd=avr-gcc-ar","compiler.ar.extra_flags=","compiler.ar.flags=rcs","compiler.c.cmd=avr-gcc","compiler.c.elf.cmd=avr-gcc","compiler.c.elf.extra_flags=","compiler.c.elf.flags=-w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections","compiler.c.extra_flags=","compiler.c.flags=-c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects","compiler.cpp.cmd=avr-g++","compiler.cpp.extra_flags=","compiler.cpp.flags=-c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto","compiler.elf2hex.cmd=avr-objcopy","compiler.elf2hex.extra_flags=","compiler.elf2hex.flags=-O ihex -R .eeprom","compiler.ldflags=","compiler.libraries.ldflags=","compiler.objcopy.cmd=avr-objcopy","compiler.objcopy.eep.extra_flags=","compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0","compiler.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/","compiler.size.cmd=avr-size","compiler.warning_flags=-w","compiler.warning_flags.all=-Wall -Wextra","compiler.warning_flags.default=","compiler.warning_flags.more=-Wall","compiler.warning_flags.none=-w","extra.time.dst=0","extra.time.local=1735762727","extra.time.utc=1735751927","extra.time.zone=10800","ide_version=10607","name=Arduino Leonardo","pid.0=0x0036","pid.1=0x8036","pid.2=0x0036","pid.3=0x8036","pluggable_discovery.required.0=builtin:serial-discovery","pluggable_discovery.required.1=builtin:mdns-discovery","pluggable_monitor.required.serial=builtin:serial-monitor","preproc.includes.flags=-w -x c++ -M -MG -MP","preproc.macros.flags=-w -x c++ -E -CC","recipe.S.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -x assembler-with-cpp -flto -MMD -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.ar.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc-ar\" rcs  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"{object_file}\"","recipe.c.combine.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections -mmcu=atmega32u4   -o \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" {object_files}  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"-LC:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\" -lm","recipe.c.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.cpp.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.objcopy.eep.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.eep\"","recipe.objcopy.hex.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -R .eeprom  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\"","recipe.output.save_file=Termometer.ino.leonardo.hex","recipe.output.tmp_file=Termometer.ino.hex","recipe.preproc.includes=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -M -MG -MP -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\"","recipe.preproc.macros=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -E -CC -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{preprocessed_file_path}\"","recipe.size.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-size\" -A \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\"","recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).*","recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).*","recipe.size.regex.eeprom=^(?:\\.eeprom)\\s+([0-9]+).*","runtime.hardware.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr","runtime.ide.path=C:\\Users\\рс\\AppData\\Local\\Programs\\Arduino IDE\\resources\\app\\lib\\backend\\resources","runtime.ide.version=10607","runtime.os=windows","runtime.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","runtime.tools.arduinoOTA-1.3.0.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arduinoOTA.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.arm-none-eabi-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino5","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino7.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avr-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avrdude-6.3.0-arduino17.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.bossac-1.6.1-arduino.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.bossac.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.ctags-5.8-arduino11.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.ctags.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.dfu-discovery-0.1.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.dfu-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.linux-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\dfu-util","runtime.tools.linux-hid_flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\hid_flash","runtime.tools.linux-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\src","runtime.tools.linux-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stlink","runtime.tools.linux-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux64-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\dfu-util","runtime.tools.linux64-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\src","runtime.tools.linux64-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stlink","runtime.tools.linux64-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.linux64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.macosx-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\dfu-util","runtime.tools.macosx-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\src","runtime.tools.macosx-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stlink","runtime.tools.macosx-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.macosx.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.mdns-discovery-1.0.5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.5","runtime.tools.mdns-discovery-1.0.9.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mdns-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mklittlefs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mklittlefs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.python3-3.7.2-post1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.python3.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.serial-discovery-1.2.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.2.1","runtime.tools.serial-discovery-1.3.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.3.2","runtime.tools.serial-discovery-1.4.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-monitor-0.14.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.serial-monitor-0.9.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.9.1","runtime.tools.serial-monitor.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.stm32tools-2021.5.31.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.stm32tools.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.win-dfu-util-0.9-win64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\dfu-util-0.9-win64","runtime.tools.win-lib.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\lib","runtime.tools.win-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\src","runtime.tools.win-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\stlink","runtime.tools.win-texane-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.win.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.xtensa-lx106-elf-gcc-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","runtime.tools.xtensa-lx106-elf-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","sketch_path=D:\\Arduino_GitHub\\Termometer","software=ARDUINO","tools.arduino_ota.cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.arduino_ota.upload.pattern=\"{cmd}\" -address {upload.port.address} -port {upload.port.properties.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.port.properties.endpoint_upload} -sync {upload.port.properties.endpoint_sync} -reset {upload.port.properties.endpoint_reset} -sync_exp {upload.port.properties.sync_return}","tools.avrdude.bootloader.params.quiet=-q -q","tools.avrdude.bootloader.params.verbose=-v","tools.avrdude.bootloader.pattern=\"{cmd.path}\" \"-C{config.path}\" {bootloader.verbose} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6/bootloaders/caterina/Caterina-Leonardo.hex:i\" -Ulock:w:0x2F:m","tools.avrdude.cmd.path={path}/bin/avrdude","tools.avrdude.config.path={path}/etc/avrdude.conf","tools.avrdude.erase.params.quiet=-q -q","tools.avrdude.erase.params.verbose=-v","tools.avrdude.erase.pattern=\"{cmd.path}\" \"-C{config.path}\" {erase.verbose} -patmega32u4 -c{protocol} {program.extra_params} -e -Ulock:w:0x3F:m -Uefuse:w:0xcb:m -Uhfuse:w:0xd8:m -Ulfuse:w:0xff:m","tools.avrdude.network_cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","tools.avrdude.program.params.noverify=-V","tools.avrdude.program.params.quiet=-q -q","tools.avrdude.program.params.verbose=-v","tools.avrdude.program.pattern=\"{cmd.path}\" \"-C{config.path}\" {program.verbose} {program.verify} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.program.verify=","tools.avrdude.upload.network_pattern=\"{network_cmd}\" -address {serial.port} -port {upload.network.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}","tools.avrdude.upload.params.noverify=-V","tools.avrdude.upload.params.quiet=-q -q","tools.avrdude.upload.params.verbose=-v","tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} {upload.verify} -patmega32u4 -cavr109 \"-P{serial.port}\" -b57600 -D \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.upload.verify=","tools.avrdude_remote.upload.pattern=/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -patmega32u4","upload.disable_flushing=true","upload.maximum_data_size=2560","upload.maximum_size=28672","upload.protocol=avr109","upload.speed=57600","upload.tool=avrdude","upload.tool.default=avrdude","upload.tool.network=arduino_ota","upload.use_1200bps_touch=true","upload.wait_for_upload_port=true","upload_port.0.pid=0x0036","upload_port.0.vid=0x2341","upload_port.1.pid=0x8036","upload_port.1.vid=0x2341","upload_port.2.pid=0x0036","upload_port.2.vid=0x2A03","upload_port.3.pid=0x8036","upload_port.3.vid=0x2A03","upload_port.4.board=leonardo","version=1.8.6","vid.0=0x2341","vid.1=0x2341","vid.2=0x2A03","vid.3=0x2A03"]}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"86","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"86","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 24193

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildPath":"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","buildOutputUri":"file:///c%3A/Users/%D1%80%D1%81/AppData/Local/arduino/sketches/D3D3BD4A9EF75B21D6254DA8EDFB7FF8","executableSectionsSize":[{"name":"text","size":7500,"maxSize":28672},{"name":"data","size":208,"maxSize":2560}],"usedLibraries":[{"name":"OneWire","author":"Jim Studt, Tom Pollard, Robin James, Glenn Trewitt, Jason Dangel, Guillermo Lovato, Paul Stoffregen, Scott Roberts, Bertrik Sikken, Mark Tillotson, Ken Butcher, Roger Clark, Love Nystrom","maintainer":"Paul Stoffregen","sentence":"Access 1-wire temperature sensors, memory and other chips.","paragraph":"","website":"http://www.pjrc.com/teensy/td_libs_OneWire.html","category":"Communication","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"2.3.8","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS18x20_Temperature","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS2408_Switch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS250x_PROM"],"providesIncludes":["OneWire.h"],"properties":{},"compatibleWith":{}},{"name":"DallasTemperature","author":"Miles Burton <miles@mnetcs.com>, Tim Newsome <nuisance@casualhacker.net>, Guil Barros <gfbarros@bappos.com>, Rob Tillaart <rob.tillaart@gmail.com>","maintainer":"Miles Burton <miles@mnetcs.com>","sentence":"Arduino Library for Dallas Temperature ICs","paragraph":"Supports DS18B20, DS18S20, DS1822, DS1820","website":"https://github.com/milesburton/Arduino-Temperature-Control-Library","category":"Sensors","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"3.9.0","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Alarm","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\AlarmHandler","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\ExternalPullup","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multibus_simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multiple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SaveRecallScratchPad","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SetUserData","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Single","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Tester","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Timing","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\TwoPin_DS18B20","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataDemo","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataWriteBatch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion2","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\oneWireSearch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\readPowerSupply"],"providesIncludes":["DallasTemperature.h"],"properties":{},"compatibleWith":{}}],"buildPlatform":{"id":"arduino:avr","version":"1.8.6","installDir":"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","packageUrl":""},"buildProperties":["_id=leonardo","archive_file_path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}","bootloader.extended_fuses=0xcb","bootloader.file=caterina/Caterina-Leonardo.hex","bootloader.high_fuses=0xd8","bootloader.lock_bits=0x2F","bootloader.low_fuses=0xff","bootloader.tool=avrdude","bootloader.tool.default=avrdude","bootloader.unlock_bits=0x3F","build.arch=AVR","build.board=AVR_LEONARDO","build.board.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.core=arduino","build.core.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\cores\\arduino","build.core.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.extra_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.f_cpu=16000000L","build.fqbn=arduino:avr:leonardo","build.library_discovery_phase=0","build.mcu=atmega32u4","build.path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","build.pid=0x8036","build.project_name=Termometer.ino","build.source.path=D:\\Arduino_GitHub\\Termometer","build.system.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\system","build.usb_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.usb_manufacturer=\"Unknown\"","build.usb_product=\"Arduino Leonardo\"","build.variant=leonardo","build.variant.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\variants\\leonardo","build.vid=0x2341","compiler.S.extra_flags=","compiler.S.flags=-c -g -x assembler-with-cpp -flto -MMD","compiler.ar.cmd=avr-gcc-ar","compiler.ar.extra_flags=","compiler.ar.flags=rcs","compiler.c.cmd=avr-gcc","compiler.c.elf.cmd=avr-gcc","compiler.c.elf.extra_flags=","compiler.c.elf.flags=-w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections","compiler.c.extra_flags=","compiler.c.flags=-c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects","compiler.cpp.cmd=avr-g++","compiler.cpp.extra_flags=","compiler.cpp.flags=-c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto","compiler.elf2hex.cmd=avr-objcopy","compiler.elf2hex.extra_flags=","compiler.elf2hex.flags=-O ihex -R .eeprom","compiler.ldflags=","compiler.libraries.ldflags=","compiler.objcopy.cmd=avr-objcopy","compiler.objcopy.eep.extra_flags=","compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0","compiler.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/","compiler.size.cmd=avr-size","compiler.warning_flags=-w","compiler.warning_flags.all=-Wall -Wextra","compiler.warning_flags.default=","compiler.warning_flags.more=-Wall","compiler.warning_flags.none=-w","extra.time.dst=0","extra.time.local=1735762737","extra.time.utc=1735751937","extra.time.zone=10800","ide_version=10607","name=Arduino Leonardo","pid.0=0x0036","pid.1=0x8036","pid.2=0x0036","pid.3=0x8036","pluggable_discovery.required.0=builtin:serial-discovery","pluggable_discovery.required.1=builtin:mdns-discovery","pluggable_monitor.required.serial=builtin:serial-monitor","preproc.includes.flags=-w -x c++ -M -MG -MP","preproc.macros.flags=-w -x c++ -E -CC","recipe.S.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -x assembler-with-cpp -flto -MMD -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.ar.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc-ar\" rcs  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"{object_file}\"","recipe.c.combine.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections -mmcu=atmega32u4   -o \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" {object_files}  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"-LC:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\" -lm","recipe.c.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.cpp.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.objcopy.eep.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.eep\"","recipe.objcopy.hex.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -R .eeprom  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\"","recipe.output.save_file=Termometer.ino.leonardo.hex","recipe.output.tmp_file=Termometer.ino.hex","recipe.preproc.includes=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -M -MG -MP -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\"","recipe.preproc.macros=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -E -CC -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{preprocessed_file_path}\"","recipe.size.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-size\" -A \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\"","recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).*","recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).*","recipe.size.regex.eeprom=^(?:\\.eeprom)\\s+([0-9]+).*","runtime.hardware.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr","runtime.ide.path=C:\\Users\\рс\\AppData\\Local\\Programs\\Arduino IDE\\resources\\app\\lib\\backend\\resources","runtime.ide.version=10607","runtime.os=windows","runtime.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","runtime.tools.arduinoOTA-1.3.0.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arduinoOTA.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.arm-none-eabi-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino5","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino7.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avr-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avrdude-6.3.0-arduino17.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.bossac-1.6.1-arduino.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.bossac.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.ctags-5.8-arduino11.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.ctags.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.dfu-discovery-0.1.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.dfu-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.linux-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\dfu-util","runtime.tools.linux-hid_flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\hid_flash","runtime.tools.linux-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\src","runtime.tools.linux-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stlink","runtime.tools.linux-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux64-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\dfu-util","runtime.tools.linux64-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\src","runtime.tools.linux64-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stlink","runtime.tools.linux64-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.linux64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.macosx-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\dfu-util","runtime.tools.macosx-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\src","runtime.tools.macosx-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stlink","runtime.tools.macosx-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.macosx.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.mdns-discovery-1.0.5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.5","runtime.tools.mdns-discovery-1.0.9.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mdns-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mklittlefs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mklittlefs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.python3-3.7.2-post1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.python3.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.serial-discovery-1.2.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.2.1","runtime.tools.serial-discovery-1.3.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.3.2","runtime.tools.serial-discovery-1.4.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-monitor-0.14.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.serial-monitor-0.9.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.9.1","runtime.tools.serial-monitor.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.stm32tools-2021.5.31.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.stm32tools.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.win-dfu-util-0.9-win64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\dfu-util-0.9-win64","runtime.tools.win-lib.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\lib","runtime.tools.win-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\src","runtime.tools.win-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\stlink","runtime.tools.win-texane-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.win.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.xtensa-lx106-elf-gcc-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","runtime.tools.xtensa-lx106-elf-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","sketch_path=D:\\Arduino_GitHub\\Termometer","software=ARDUINO","tools.arduino_ota.cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.arduino_ota.upload.pattern=\"{cmd}\" -address {upload.port.address} -port {upload.port.properties.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.port.properties.endpoint_upload} -sync {upload.port.properties.endpoint_sync} -reset {upload.port.properties.endpoint_reset} -sync_exp {upload.port.properties.sync_return}","tools.avrdude.bootloader.params.quiet=-q -q","tools.avrdude.bootloader.params.verbose=-v","tools.avrdude.bootloader.pattern=\"{cmd.path}\" \"-C{config.path}\" {bootloader.verbose} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6/bootloaders/caterina/Caterina-Leonardo.hex:i\" -Ulock:w:0x2F:m","tools.avrdude.cmd.path={path}/bin/avrdude","tools.avrdude.config.path={path}/etc/avrdude.conf","tools.avrdude.erase.params.quiet=-q -q","tools.avrdude.erase.params.verbose=-v","tools.avrdude.erase.pattern=\"{cmd.path}\" \"-C{config.path}\" {erase.verbose} -patmega32u4 -c{protocol} {program.extra_params} -e -Ulock:w:0x3F:m -Uefuse:w:0xcb:m -Uhfuse:w:0xd8:m -Ulfuse:w:0xff:m","tools.avrdude.network_cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","tools.avrdude.program.params.noverify=-V","tools.avrdude.program.params.quiet=-q -q","tools.avrdude.program.params.verbose=-v","tools.avrdude.program.pattern=\"{cmd.path}\" \"-C{config.path}\" {program.verbose} {program.verify} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.program.verify=","tools.avrdude.upload.network_pattern=\"{network_cmd}\" -address {serial.port} -port {upload.network.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}","tools.avrdude.upload.params.noverify=-V","tools.avrdude.upload.params.quiet=-q -q","tools.avrdude.upload.params.verbose=-v","tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} {upload.verify} -patmega32u4 -cavr109 \"-P{serial.port}\" -b57600 -D \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.upload.verify=","tools.avrdude_remote.upload.pattern=/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -patmega32u4","upload.disable_flushing=true","upload.maximum_data_size=2560","upload.maximum_size=28672","upload.protocol=avr109","upload.speed=57600","upload.tool=avrdude","upload.tool.default=avrdude","upload.tool.network=arduino_ota","upload.use_1200bps_touch=true","upload.wait_for_upload_port=true","upload_port.0.pid=0x0036","upload_port.0.vid=0x2341","upload_port.1.pid=0x8036","upload_port.1.vid=0x2341","upload_port.2.pid=0x0036","upload_port.2.vid=0x2A03","upload_port.3.pid=0x8036","upload_port.3.vid=0x2A03","upload_port.4.board=leonardo","version=1.8.6","vid.0=0x2341","vid.1=0x2341","vid.2=0x2A03","vid.3=0x2A03"]}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"87","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"87","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":550,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":10,"character":36}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":550,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":551,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":10,"character":29}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":551,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":552,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":24,"character":55}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":552,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}
<<<
Content-Length: 155

{"jsonrpc":"2.0","id":553,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":553,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":554,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":26,"character":1},"end":{"line":26,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":554,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":555,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":57}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":555,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":556,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":8,"character":56}}}
>>>
Content-Length: 124

{"jsonrpc":"2.0","id":556,"result":null,"error":{"code":-32603,"message":"-32602 trying to get AST for non-added document"}}






Started logging.

<<<
Content-Length: 3007

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":33772,"clientInfo":{"name":"vscode","version":"1.80.0"},"rootPath":"d:\\Arduino_GitHub\\Termometer","rootUri":"file:///d%3A/Arduino_GitHub/Termometer","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///d%3A/Arduino_GitHub/Termometer","name":"Termometer"}]}}
>>>
Content-Length: 940

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.0.0-git"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 1228

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","languageId":"cpp","version":1,"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n//https://роботехника18.рф/%d1%82%d0%b5%d1%80%d0%bc%d0%be%d0%b4%d0%b0%d1%82%d1%87%d0%b8%d0%ba-%d0%b0%d1%80%d0%b4%d1%83%d0%b8%d0%bd%d0%be/\r\n//\r\n// Библиотека DallasTemperature может сделать это все за вас!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n\r\nOneWire oneWire(10);  // порт подключения датчика\r\nDallasTemperature ds(&oneWire);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);   // инициализация монитора порта\r\n  ds.begin();                 // инициализация датчика ds18b20\r\n}\r\n\r\nvoid loop() {\r\n  ds.requestTemperatures();                       // считываем температуру с датчика\r\n  \r\n  Serial.print(ds.getTempCByIndex(0));   // выводим температуру на монитор\r\n  Serial.println(\"C\");\r\n}"}}}Content-Length: 254

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":26,"character":1},"end":{"line":26,"character":1}},"context":{"diagnostics":[]}}}Content-Length: 153

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 113

{"jsonrpc":"2.0","id":"1","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 36

{"jsonrpc":"2.0","id":1,"result":[]}Content-Length: 877

{"jsonrpc":"2.0","id":2,"result":[{"name":"oneWire","detail":"OneWire","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":19}},"selectionRange":{"start":{"line":13,"character":8},"end":{"line":13,"character":15}}},{"name":"ds","detail":"DallasTemperature","kind":13,"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":30}},"selectionRange":{"start":{"line":14,"character":18},"end":{"line":14,"character":20}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":16,"character":0},"end":{"line":19,"character":1}},"selectionRange":{"start":{"line":16,"character":5},"end":{"line":16,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":21,"character":0},"end":{"line":26,"character":1}},"selectionRange":{"start":{"line":21,"character":5},"end":{"line":21,"character":9}}}]}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"1","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/2","percentage":50}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 24193

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildPath":"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","buildOutputUri":"file:///c%3A/Users/%D1%80%D1%81/AppData/Local/arduino/sketches/D3D3BD4A9EF75B21D6254DA8EDFB7FF8","executableSectionsSize":[{"name":"text","size":7500,"maxSize":28672},{"name":"data","size":208,"maxSize":2560}],"usedLibraries":[{"name":"OneWire","author":"Jim Studt, Tom Pollard, Robin James, Glenn Trewitt, Jason Dangel, Guillermo Lovato, Paul Stoffregen, Scott Roberts, Bertrik Sikken, Mark Tillotson, Ken Butcher, Roger Clark, Love Nystrom","maintainer":"Paul Stoffregen","sentence":"Access 1-wire temperature sensors, memory and other chips.","paragraph":"","website":"http://www.pjrc.com/teensy/td_libs_OneWire.html","category":"Communication","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"2.3.8","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS18x20_Temperature","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS2408_Switch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS250x_PROM"],"providesIncludes":["OneWire.h"],"properties":{},"compatibleWith":{}},{"name":"DallasTemperature","author":"Miles Burton <miles@mnetcs.com>, Tim Newsome <nuisance@casualhacker.net>, Guil Barros <gfbarros@bappos.com>, Rob Tillaart <rob.tillaart@gmail.com>","maintainer":"Miles Burton <miles@mnetcs.com>","sentence":"Arduino Library for Dallas Temperature ICs","paragraph":"Supports DS18B20, DS18S20, DS1822, DS1820","website":"https://github.com/milesburton/Arduino-Temperature-Control-Library","category":"Sensors","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"3.9.0","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Alarm","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\AlarmHandler","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\ExternalPullup","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multibus_simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multiple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SaveRecallScratchPad","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SetUserData","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Single","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Tester","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Timing","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\TwoPin_DS18B20","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataDemo","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataWriteBatch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion2","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\oneWireSearch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\readPowerSupply"],"providesIncludes":["DallasTemperature.h"],"properties":{},"compatibleWith":{}}],"buildPlatform":{"id":"arduino:avr","version":"1.8.6","installDir":"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","packageUrl":""},"buildProperties":["_id=leonardo","archive_file_path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}","bootloader.extended_fuses=0xcb","bootloader.file=caterina/Caterina-Leonardo.hex","bootloader.high_fuses=0xd8","bootloader.lock_bits=0x2F","bootloader.low_fuses=0xff","bootloader.tool=avrdude","bootloader.tool.default=avrdude","bootloader.unlock_bits=0x3F","build.arch=AVR","build.board=AVR_LEONARDO","build.board.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.core=arduino","build.core.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\cores\\arduino","build.core.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.extra_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.f_cpu=16000000L","build.fqbn=arduino:avr:leonardo","build.library_discovery_phase=0","build.mcu=atmega32u4","build.path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","build.pid=0x8036","build.project_name=Termometer.ino","build.source.path=D:\\Arduino_GitHub\\Termometer","build.system.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\system","build.usb_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.usb_manufacturer=\"Unknown\"","build.usb_product=\"Arduino Leonardo\"","build.variant=leonardo","build.variant.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\variants\\leonardo","build.vid=0x2341","compiler.S.extra_flags=","compiler.S.flags=-c -g -x assembler-with-cpp -flto -MMD","compiler.ar.cmd=avr-gcc-ar","compiler.ar.extra_flags=","compiler.ar.flags=rcs","compiler.c.cmd=avr-gcc","compiler.c.elf.cmd=avr-gcc","compiler.c.elf.extra_flags=","compiler.c.elf.flags=-w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections","compiler.c.extra_flags=","compiler.c.flags=-c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects","compiler.cpp.cmd=avr-g++","compiler.cpp.extra_flags=","compiler.cpp.flags=-c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto","compiler.elf2hex.cmd=avr-objcopy","compiler.elf2hex.extra_flags=","compiler.elf2hex.flags=-O ihex -R .eeprom","compiler.ldflags=","compiler.libraries.ldflags=","compiler.objcopy.cmd=avr-objcopy","compiler.objcopy.eep.extra_flags=","compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0","compiler.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/","compiler.size.cmd=avr-size","compiler.warning_flags=-w","compiler.warning_flags.all=-Wall -Wextra","compiler.warning_flags.default=","compiler.warning_flags.more=-Wall","compiler.warning_flags.none=-w","extra.time.dst=0","extra.time.local=1735772823","extra.time.utc=1735762023","extra.time.zone=10800","ide_version=10607","name=Arduino Leonardo","pid.0=0x0036","pid.1=0x8036","pid.2=0x0036","pid.3=0x8036","pluggable_discovery.required.0=builtin:serial-discovery","pluggable_discovery.required.1=builtin:mdns-discovery","pluggable_monitor.required.serial=builtin:serial-monitor","preproc.includes.flags=-w -x c++ -M -MG -MP","preproc.macros.flags=-w -x c++ -E -CC","recipe.S.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -x assembler-with-cpp -flto -MMD -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.ar.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc-ar\" rcs  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"{object_file}\"","recipe.c.combine.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections -mmcu=atmega32u4   -o \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" {object_files}  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"-LC:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\" -lm","recipe.c.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.cpp.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.objcopy.eep.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.eep\"","recipe.objcopy.hex.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -R .eeprom  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\"","recipe.output.save_file=Termometer.ino.leonardo.hex","recipe.output.tmp_file=Termometer.ino.hex","recipe.preproc.includes=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -M -MG -MP -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\"","recipe.preproc.macros=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -E -CC -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{preprocessed_file_path}\"","recipe.size.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-size\" -A \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\"","recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).*","recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).*","recipe.size.regex.eeprom=^(?:\\.eeprom)\\s+([0-9]+).*","runtime.hardware.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr","runtime.ide.path=C:\\Users\\рс\\AppData\\Local\\Programs\\Arduino IDE\\resources\\app\\lib\\backend\\resources","runtime.ide.version=10607","runtime.os=windows","runtime.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","runtime.tools.arduinoOTA-1.3.0.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arduinoOTA.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.arm-none-eabi-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino5","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino7.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avr-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avrdude-6.3.0-arduino17.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.bossac-1.6.1-arduino.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.bossac.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.ctags-5.8-arduino11.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.ctags.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.dfu-discovery-0.1.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.dfu-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.linux-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\dfu-util","runtime.tools.linux-hid_flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\hid_flash","runtime.tools.linux-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\src","runtime.tools.linux-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stlink","runtime.tools.linux-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux64-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\dfu-util","runtime.tools.linux64-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\src","runtime.tools.linux64-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stlink","runtime.tools.linux64-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.linux64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.macosx-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\dfu-util","runtime.tools.macosx-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\src","runtime.tools.macosx-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stlink","runtime.tools.macosx-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.macosx.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.mdns-discovery-1.0.5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.5","runtime.tools.mdns-discovery-1.0.9.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mdns-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mklittlefs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mklittlefs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.python3-3.7.2-post1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.python3.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.serial-discovery-1.2.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.2.1","runtime.tools.serial-discovery-1.3.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.3.2","runtime.tools.serial-discovery-1.4.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-monitor-0.14.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.serial-monitor-0.9.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.9.1","runtime.tools.serial-monitor.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.stm32tools-2021.5.31.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.stm32tools.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.win-dfu-util-0.9-win64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\dfu-util-0.9-win64","runtime.tools.win-lib.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\lib","runtime.tools.win-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\src","runtime.tools.win-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\stlink","runtime.tools.win-texane-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.win.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.xtensa-lx106-elf-gcc-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","runtime.tools.xtensa-lx106-elf-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","sketch_path=D:\\Arduino_GitHub\\Termometer","software=ARDUINO","tools.arduino_ota.cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.arduino_ota.upload.pattern=\"{cmd}\" -address {upload.port.address} -port {upload.port.properties.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.port.properties.endpoint_upload} -sync {upload.port.properties.endpoint_sync} -reset {upload.port.properties.endpoint_reset} -sync_exp {upload.port.properties.sync_return}","tools.avrdude.bootloader.params.quiet=-q -q","tools.avrdude.bootloader.params.verbose=-v","tools.avrdude.bootloader.pattern=\"{cmd.path}\" \"-C{config.path}\" {bootloader.verbose} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6/bootloaders/caterina/Caterina-Leonardo.hex:i\" -Ulock:w:0x2F:m","tools.avrdude.cmd.path={path}/bin/avrdude","tools.avrdude.config.path={path}/etc/avrdude.conf","tools.avrdude.erase.params.quiet=-q -q","tools.avrdude.erase.params.verbose=-v","tools.avrdude.erase.pattern=\"{cmd.path}\" \"-C{config.path}\" {erase.verbose} -patmega32u4 -c{protocol} {program.extra_params} -e -Ulock:w:0x3F:m -Uefuse:w:0xcb:m -Uhfuse:w:0xd8:m -Ulfuse:w:0xff:m","tools.avrdude.network_cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","tools.avrdude.program.params.noverify=-V","tools.avrdude.program.params.quiet=-q -q","tools.avrdude.program.params.verbose=-v","tools.avrdude.program.pattern=\"{cmd.path}\" \"-C{config.path}\" {program.verbose} {program.verify} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.program.verify=","tools.avrdude.upload.network_pattern=\"{network_cmd}\" -address {serial.port} -port {upload.network.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}","tools.avrdude.upload.params.noverify=-V","tools.avrdude.upload.params.quiet=-q -q","tools.avrdude.upload.params.verbose=-v","tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} {upload.verify} -patmega32u4 -cavr109 \"-P{serial.port}\" -b57600 -D \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.upload.verify=","tools.avrdude_remote.upload.pattern=/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -patmega32u4","upload.disable_flushing=true","upload.maximum_data_size=2560","upload.maximum_size=28672","upload.protocol=avr109","upload.speed=57600","upload.tool=avrdude","upload.tool.default=avrdude","upload.tool.network=arduino_ota","upload.use_1200bps_touch=true","upload.wait_for_upload_port=true","upload_port.0.pid=0x0036","upload_port.0.vid=0x2341","upload_port.1.pid=0x8036","upload_port.1.vid=0x2341","upload_port.2.pid=0x0036","upload_port.2.vid=0x2A03","upload_port.3.pid=0x8036","upload_port.3.vid=0x2A03","upload_port.4.board=leonardo","version=1.8.6","vid.0=0x2341","vid.1=0x2341","vid.2=0x2A03","vid.3=0x2A03"]}}
>>>
Content-Length: 118

{"jsonrpc":"2.0","id":"2","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"2","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 113

{"jsonrpc":"2.0","id":"3","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"3","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
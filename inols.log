






Started logging.

<<<
Content-Length: 3007

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":21140,"clientInfo":{"name":"vscode","version":"1.80.0"},"rootPath":"d:\\Arduino_GitHub\\Termometer","rootUri":"file:///d%3A/Arduino_GitHub/Termometer","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///d%3A/Arduino_GitHub/Termometer","name":"Termometer"}]}}
>>>
Content-Length: 940

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.0.0-git"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 739

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","languageId":"cpp","version":1,"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n#define ONE_WIRE_BUS 2\r\n\r\nOneWire oneWire(ONE_WIRE_BUS);\r\nDallasTemperature sensors(&oneWire);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n  sensors.begin();\r\n}\r\n\r\nvoid loop() {\r\n  sensors.requestTemperatures();\r\n  float temperatureC = sensors.getTempCByIndex(0);\r\n  Serial.print(\"Temperature: \");\r\n  Serial.print(temperatureC);\r\n  Serial.println(\" °C\");\r\n  delay(1000);\r\n}\r\n\r\n"}}}Content-Length: 252

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 153

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 113

{"jsonrpc":"2.0","id":"1","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 36

{"jsonrpc":"2.0","id":1,"result":[]}Content-Length: 864

{"jsonrpc":"2.0","id":2,"result":[{"name":"oneWire","detail":"int","kind":13,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":15}},"selectionRange":{"start":{"line":11,"character":8},"end":{"line":11,"character":15}}},{"name":"sensors","detail":"int","kind":13,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":25}},"selectionRange":{"start":{"line":12,"character":18},"end":{"line":12,"character":25}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":26,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":9}}}]}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"1","result":null}Content-Length: 21523

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildPath":"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","buildOutputUri":"file:///c%3A/Users/%D1%80%D1%81/AppData/Local/arduino/sketches/D3D3BD4A9EF75B21D6254DA8EDFB7FF8","executableSectionsSize":[],"usedLibraries":[{"name":"OneWire","author":"Jim Studt, Tom Pollard, Robin James, Glenn Trewitt, Jason Dangel, Guillermo Lovato, Paul Stoffregen, Scott Roberts, Bertrik Sikken, Mark Tillotson, Ken Butcher, Roger Clark, Love Nystrom","maintainer":"Paul Stoffregen","sentence":"Access 1-wire temperature sensors, memory and other chips.","paragraph":"","website":"http://www.pjrc.com/teensy/td_libs_OneWire.html","category":"Communication","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"2.3.8","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS18x20_Temperature","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS2408_Switch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS250x_PROM"],"providesIncludes":["OneWire.h"],"properties":{},"compatibleWith":{}}],"buildPlatform":{"id":"arduino:avr","version":"1.8.6","installDir":"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","packageUrl":""},"buildProperties":["_id=leonardo","archive_file_path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}","bootloader.extended_fuses=0xcb","bootloader.file=caterina/Caterina-Leonardo.hex","bootloader.high_fuses=0xd8","bootloader.lock_bits=0x2F","bootloader.low_fuses=0xff","bootloader.tool=avrdude","bootloader.tool.default=avrdude","bootloader.unlock_bits=0x3F","build.arch=AVR","build.board=AVR_LEONARDO","build.board.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.core=arduino","build.core.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\cores\\arduino","build.core.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.extra_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.f_cpu=16000000L","build.fqbn=arduino:avr:leonardo","build.library_discovery_phase=0","build.mcu=atmega32u4","build.path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","build.pid=0x8036","build.project_name=Termometer.ino","build.source.path=D:\\Arduino_GitHub\\Termometer","build.system.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\system","build.usb_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.usb_manufacturer=\"Unknown\"","build.usb_product=\"Arduino Leonardo\"","build.variant=leonardo","build.variant.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\variants\\leonardo","build.vid=0x2341","compiler.S.extra_flags=","compiler.S.flags=-c -g -x assembler-with-cpp -flto -MMD","compiler.ar.cmd=avr-gcc-ar","compiler.ar.extra_flags=","compiler.ar.flags=rcs","compiler.c.cmd=avr-gcc","compiler.c.elf.cmd=avr-gcc","compiler.c.elf.extra_flags=","compiler.c.elf.flags=-w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections","compiler.c.extra_flags=","compiler.c.flags=-c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects","compiler.cpp.cmd=avr-g++","compiler.cpp.extra_flags=","compiler.cpp.flags=-c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto","compiler.elf2hex.cmd=avr-objcopy","compiler.elf2hex.extra_flags=","compiler.elf2hex.flags=-O ihex -R .eeprom","compiler.ldflags=","compiler.libraries.ldflags=","compiler.objcopy.cmd=avr-objcopy","compiler.objcopy.eep.extra_flags=","compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0","compiler.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/","compiler.size.cmd=avr-size","compiler.warning_flags=-w","compiler.warning_flags.all=-Wall -Wextra","compiler.warning_flags.default=","compiler.warning_flags.more=-Wall","compiler.warning_flags.none=-w","extra.time.dst=0","extra.time.local=1735745166","extra.time.utc=1735734366","extra.time.zone=10800","ide_version=10607","name=Arduino Leonardo","pid.0=0x0036","pid.1=0x8036","pid.2=0x0036","pid.3=0x8036","pluggable_discovery.required.0=builtin:serial-discovery","pluggable_discovery.required.1=builtin:mdns-discovery","pluggable_monitor.required.serial=builtin:serial-monitor","preproc.includes.flags=-w -x c++ -M -MG -MP","preproc.macros.flags=-w -x c++ -E -CC","recipe.S.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -x assembler-with-cpp -flto -MMD -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.ar.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc-ar\" rcs  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"{object_file}\"","recipe.c.combine.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections -mmcu=atmega32u4   -o \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" {object_files}  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"-LC:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\" -lm","recipe.c.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.cpp.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.objcopy.eep.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.eep\"","recipe.objcopy.hex.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -R .eeprom  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\"","recipe.output.save_file=Termometer.ino.leonardo.hex","recipe.output.tmp_file=Termometer.ino.hex","recipe.preproc.includes=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -M -MG -MP -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\"","recipe.preproc.macros=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -E -CC -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{preprocessed_file_path}\"","recipe.size.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-size\" -A \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\"","recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).*","recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).*","recipe.size.regex.eeprom=^(?:\\.eeprom)\\s+([0-9]+).*","runtime.hardware.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr","runtime.ide.path=C:\\Users\\рс\\AppData\\Local\\Programs\\Arduino IDE\\resources\\app\\lib\\backend\\resources","runtime.ide.version=10607","runtime.os=windows","runtime.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","runtime.tools.arduinoOTA-1.3.0.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arduinoOTA.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.arm-none-eabi-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino5","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino7.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avr-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avrdude-6.3.0-arduino17.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.bossac-1.6.1-arduino.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.bossac.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.ctags-5.8-arduino11.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.ctags.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.dfu-discovery-0.1.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.dfu-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.linux-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\dfu-util","runtime.tools.linux-hid_flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\hid_flash","runtime.tools.linux-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\src","runtime.tools.linux-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stlink","runtime.tools.linux-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux64-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\dfu-util","runtime.tools.linux64-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\src","runtime.tools.linux64-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stlink","runtime.tools.linux64-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.linux64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.macosx-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\dfu-util","runtime.tools.macosx-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\src","runtime.tools.macosx-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stlink","runtime.tools.macosx-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.macosx.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.mdns-discovery-1.0.5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.5","runtime.tools.mdns-discovery-1.0.9.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mdns-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mklittlefs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mklittlefs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.python3-3.7.2-post1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.python3.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.serial-discovery-1.2.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.2.1","runtime.tools.serial-discovery-1.3.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.3.2","runtime.tools.serial-discovery-1.4.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-monitor-0.14.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.serial-monitor-0.9.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.9.1","runtime.tools.serial-monitor.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.stm32tools-2021.5.31.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.stm32tools.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.win-dfu-util-0.9-win64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\dfu-util-0.9-win64","runtime.tools.win-lib.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\lib","runtime.tools.win-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\src","runtime.tools.win-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\stlink","runtime.tools.win-texane-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.win.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.xtensa-lx106-elf-gcc-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","runtime.tools.xtensa-lx106-elf-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","sketch_path=D:\\Arduino_GitHub\\Termometer","software=ARDUINO","tools.arduino_ota.cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.arduino_ota.upload.pattern=\"{cmd}\" -address {upload.port.address} -port {upload.port.properties.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.port.properties.endpoint_upload} -sync {upload.port.properties.endpoint_sync} -reset {upload.port.properties.endpoint_reset} -sync_exp {upload.port.properties.sync_return}","tools.avrdude.bootloader.params.quiet=-q -q","tools.avrdude.bootloader.params.verbose=-v","tools.avrdude.bootloader.pattern=\"{cmd.path}\" \"-C{config.path}\" {bootloader.verbose} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6/bootloaders/caterina/Caterina-Leonardo.hex:i\" -Ulock:w:0x2F:m","tools.avrdude.cmd.path={path}/bin/avrdude","tools.avrdude.config.path={path}/etc/avrdude.conf","tools.avrdude.erase.params.quiet=-q -q","tools.avrdude.erase.params.verbose=-v","tools.avrdude.erase.pattern=\"{cmd.path}\" \"-C{config.path}\" {erase.verbose} -patmega32u4 -c{protocol} {program.extra_params} -e -Ulock:w:0x3F:m -Uefuse:w:0xcb:m -Uhfuse:w:0xd8:m -Ulfuse:w:0xff:m","tools.avrdude.network_cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","tools.avrdude.program.params.noverify=-V","tools.avrdude.program.params.quiet=-q -q","tools.avrdude.program.params.verbose=-v","tools.avrdude.program.pattern=\"{cmd.path}\" \"-C{config.path}\" {program.verbose} {program.verify} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.program.verify=","tools.avrdude.upload.network_pattern=\"{network_cmd}\" -address {serial.port} -port {upload.network.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}","tools.avrdude.upload.params.noverify=-V","tools.avrdude.upload.params.quiet=-q -q","tools.avrdude.upload.params.verbose=-v","tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} {upload.verify} -patmega32u4 -cavr109 \"-P{serial.port}\" -b57600 -D \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.upload.verify=","tools.avrdude_remote.upload.pattern=/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -patmega32u4","upload.disable_flushing=true","upload.maximum_data_size=2560","upload.maximum_size=28672","upload.protocol=avr109","upload.speed=57600","upload.tool=avrdude","upload.tool.default=avrdude","upload.tool.network=arduino_ota","upload.use_1200bps_touch=true","upload.wait_for_upload_port=true","upload_port.0.pid=0x0036","upload_port.0.vid=0x2341","upload_port.1.pid=0x8036","upload_port.1.vid=0x2341","upload_port.2.pid=0x0036","upload_port.2.vid=0x2A03","upload_port.3.pid=0x8036","upload_port.3.vid=0x2A03","upload_port.4.board=leonardo","version=1.8.6","vid.0=0x2341","vid.1=0x2341","vid.2=0x2A03","vid.3=0x2A03"]}}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/2","percentage":50}}}
<<<
Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}Content-Length: 153

{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 864

{"jsonrpc":"2.0","id":3,"result":[{"name":"oneWire","detail":"int","kind":13,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":15}},"selectionRange":{"start":{"line":11,"character":8},"end":{"line":11,"character":15}}},{"name":"sensors","detail":"int","kind":13,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":25}},"selectionRange":{"start":{"line":12,"character":18},"end":{"line":12,"character":25}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":26,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":9}}}]}
<<<
Content-Length: 252

{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"jsonrpc":"2.0","id":4,"result":[]}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}Content-Length: 118

{"jsonrpc":"2.0","id":"2","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"2","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":21,"character":42}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":5,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":7,"character":24}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":6,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":7,"character":24}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":7,"result":null}
<<<
Content-Length: 58

{"jsonrpc":"2.0","id":8,"method":"shutdown","params":null}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":8,"result":null}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3007

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":21140,"clientInfo":{"name":"vscode","version":"1.80.0"},"rootPath":"d:\\Arduino_GitHub\\Termometer","rootUri":"file:///d%3A/Arduino_GitHub/Termometer","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///d%3A/Arduino_GitHub/Termometer","name":"Termometer"}]}}
>>>
Content-Length: 940

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.0.0-git"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 739

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","languageId":"cpp","version":1,"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n#define ONE_WIRE_BUS 2\r\n\r\nOneWire oneWire(ONE_WIRE_BUS);\r\nDallasTemperature sensors(&oneWire);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n  sensors.begin();\r\n}\r\n\r\nvoid loop() {\r\n  sensors.requestTemperatures();\r\n  float temperatureC = sensors.getTempCByIndex(0);\r\n  Serial.print(\"Temperature: \");\r\n  Serial.print(temperatureC);\r\n  Serial.println(\" °C\");\r\n  delay(1000);\r\n}\r\n\r\n"}}}Content-Length: 252

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":7,"character":0},"end":{"line":7,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 181

{"jsonrpc":"2.0","id":2,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":19}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}Content-Length: 181

{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":7,"character":11}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}
>>>
Content-Length: 113

{"jsonrpc":"2.0","id":"1","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 36

{"jsonrpc":"2.0","id":1,"result":[]}Content-Length: 222

{"jsonrpc":"2.0","id":2,"result":{"contents":{"kind":"markdown","value":"### macro `ONE_WIRE_BUS`  \n\n---\n```cpp\n#define ONE_WIRE_BUS 2\n```"},"range":{"start":{"line":9,"character":8},"end":{"line":9,"character":20}}}}Content-Length: 209

{"jsonrpc":"2.0","id":3,"result":{"contents":{"kind":"markdown","value":"### `DallasTemperature.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\DallasTemperature.h\n```"}}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"1","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/2","percentage":50}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":26}}}
>>>
Content-Length: 225

{"jsonrpc":"2.0","id":4,"result":{"contents":{"kind":"markdown","value":"### macro `ONE_WIRE_BUS`  \n\n---\n```cpp\n#define ONE_WIRE_BUS 2\n```"},"range":{"start":{"line":11,"character":16},"end":{"line":11,"character":28}}}}
<<<
Content-Length: 24193

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildPath":"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","buildOutputUri":"file:///c%3A/Users/%D1%80%D1%81/AppData/Local/arduino/sketches/D3D3BD4A9EF75B21D6254DA8EDFB7FF8","executableSectionsSize":[{"name":"text","size":7544,"maxSize":28672},{"name":"data","size":226,"maxSize":2560}],"usedLibraries":[{"name":"OneWire","author":"Jim Studt, Tom Pollard, Robin James, Glenn Trewitt, Jason Dangel, Guillermo Lovato, Paul Stoffregen, Scott Roberts, Bertrik Sikken, Mark Tillotson, Ken Butcher, Roger Clark, Love Nystrom","maintainer":"Paul Stoffregen","sentence":"Access 1-wire temperature sensors, memory and other chips.","paragraph":"","website":"http://www.pjrc.com/teensy/td_libs_OneWire.html","category":"Communication","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"2.3.8","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS18x20_Temperature","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS2408_Switch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS250x_PROM"],"providesIncludes":["OneWire.h"],"properties":{},"compatibleWith":{}},{"name":"DallasTemperature","author":"Miles Burton <miles@mnetcs.com>, Tim Newsome <nuisance@casualhacker.net>, Guil Barros <gfbarros@bappos.com>, Rob Tillaart <rob.tillaart@gmail.com>","maintainer":"Miles Burton <miles@mnetcs.com>","sentence":"Arduino Library for Dallas Temperature ICs","paragraph":"Supports DS18B20, DS18S20, DS1822, DS1820","website":"https://github.com/milesburton/Arduino-Temperature-Control-Library","category":"Sensors","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"3.9.0","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Alarm","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\AlarmHandler","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\ExternalPullup","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multibus_simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multiple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SaveRecallScratchPad","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SetUserData","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Single","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Tester","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Timing","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\TwoPin_DS18B20","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataDemo","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataWriteBatch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion2","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\oneWireSearch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\readPowerSupply"],"providesIncludes":["DallasTemperature.h"],"properties":{},"compatibleWith":{}}],"buildPlatform":{"id":"arduino:avr","version":"1.8.6","installDir":"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","packageUrl":""},"buildProperties":["_id=leonardo","archive_file_path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}","bootloader.extended_fuses=0xcb","bootloader.file=caterina/Caterina-Leonardo.hex","bootloader.high_fuses=0xd8","bootloader.lock_bits=0x2F","bootloader.low_fuses=0xff","bootloader.tool=avrdude","bootloader.tool.default=avrdude","bootloader.unlock_bits=0x3F","build.arch=AVR","build.board=AVR_LEONARDO","build.board.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.core=arduino","build.core.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\cores\\arduino","build.core.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.extra_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.f_cpu=16000000L","build.fqbn=arduino:avr:leonardo","build.library_discovery_phase=0","build.mcu=atmega32u4","build.path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","build.pid=0x8036","build.project_name=Termometer.ino","build.source.path=D:\\Arduino_GitHub\\Termometer","build.system.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\system","build.usb_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.usb_manufacturer=\"Unknown\"","build.usb_product=\"Arduino Leonardo\"","build.variant=leonardo","build.variant.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\variants\\leonardo","build.vid=0x2341","compiler.S.extra_flags=","compiler.S.flags=-c -g -x assembler-with-cpp -flto -MMD","compiler.ar.cmd=avr-gcc-ar","compiler.ar.extra_flags=","compiler.ar.flags=rcs","compiler.c.cmd=avr-gcc","compiler.c.elf.cmd=avr-gcc","compiler.c.elf.extra_flags=","compiler.c.elf.flags=-w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections","compiler.c.extra_flags=","compiler.c.flags=-c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects","compiler.cpp.cmd=avr-g++","compiler.cpp.extra_flags=","compiler.cpp.flags=-c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto","compiler.elf2hex.cmd=avr-objcopy","compiler.elf2hex.extra_flags=","compiler.elf2hex.flags=-O ihex -R .eeprom","compiler.ldflags=","compiler.libraries.ldflags=","compiler.objcopy.cmd=avr-objcopy","compiler.objcopy.eep.extra_flags=","compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0","compiler.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/","compiler.size.cmd=avr-size","compiler.warning_flags=-w","compiler.warning_flags.all=-Wall -Wextra","compiler.warning_flags.default=","compiler.warning_flags.more=-Wall","compiler.warning_flags.none=-w","extra.time.dst=0","extra.time.local=1735745549","extra.time.utc=1735734749","extra.time.zone=10800","ide_version=10607","name=Arduino Leonardo","pid.0=0x0036","pid.1=0x8036","pid.2=0x0036","pid.3=0x8036","pluggable_discovery.required.0=builtin:serial-discovery","pluggable_discovery.required.1=builtin:mdns-discovery","pluggable_monitor.required.serial=builtin:serial-monitor","preproc.includes.flags=-w -x c++ -M -MG -MP","preproc.macros.flags=-w -x c++ -E -CC","recipe.S.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -x assembler-with-cpp -flto -MMD -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.ar.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc-ar\" rcs  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"{object_file}\"","recipe.c.combine.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections -mmcu=atmega32u4   -o \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" {object_files}  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"-LC:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\" -lm","recipe.c.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.cpp.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.objcopy.eep.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.eep\"","recipe.objcopy.hex.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -R .eeprom  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\"","recipe.output.save_file=Termometer.ino.leonardo.hex","recipe.output.tmp_file=Termometer.ino.hex","recipe.preproc.includes=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -M -MG -MP -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\"","recipe.preproc.macros=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -E -CC -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{preprocessed_file_path}\"","recipe.size.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-size\" -A \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\"","recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).*","recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).*","recipe.size.regex.eeprom=^(?:\\.eeprom)\\s+([0-9]+).*","runtime.hardware.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr","runtime.ide.path=C:\\Users\\рс\\AppData\\Local\\Programs\\Arduino IDE\\resources\\app\\lib\\backend\\resources","runtime.ide.version=10607","runtime.os=windows","runtime.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","runtime.tools.arduinoOTA-1.3.0.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arduinoOTA.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.arm-none-eabi-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino5","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino7.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avr-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avrdude-6.3.0-arduino17.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.bossac-1.6.1-arduino.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.bossac.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.ctags-5.8-arduino11.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.ctags.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.dfu-discovery-0.1.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.dfu-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.linux-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\dfu-util","runtime.tools.linux-hid_flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\hid_flash","runtime.tools.linux-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\src","runtime.tools.linux-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stlink","runtime.tools.linux-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux64-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\dfu-util","runtime.tools.linux64-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\src","runtime.tools.linux64-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stlink","runtime.tools.linux64-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.linux64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.macosx-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\dfu-util","runtime.tools.macosx-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\src","runtime.tools.macosx-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stlink","runtime.tools.macosx-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.macosx.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.mdns-discovery-1.0.5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.5","runtime.tools.mdns-discovery-1.0.9.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mdns-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mklittlefs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mklittlefs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.python3-3.7.2-post1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.python3.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.serial-discovery-1.2.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.2.1","runtime.tools.serial-discovery-1.3.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.3.2","runtime.tools.serial-discovery-1.4.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-monitor-0.14.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.serial-monitor-0.9.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.9.1","runtime.tools.serial-monitor.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.stm32tools-2021.5.31.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.stm32tools.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.win-dfu-util-0.9-win64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\dfu-util-0.9-win64","runtime.tools.win-lib.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\lib","runtime.tools.win-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\src","runtime.tools.win-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\stlink","runtime.tools.win-texane-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.win.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.xtensa-lx106-elf-gcc-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","runtime.tools.xtensa-lx106-elf-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","sketch_path=D:\\Arduino_GitHub\\Termometer","software=ARDUINO","tools.arduino_ota.cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.arduino_ota.upload.pattern=\"{cmd}\" -address {upload.port.address} -port {upload.port.properties.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.port.properties.endpoint_upload} -sync {upload.port.properties.endpoint_sync} -reset {upload.port.properties.endpoint_reset} -sync_exp {upload.port.properties.sync_return}","tools.avrdude.bootloader.params.quiet=-q -q","tools.avrdude.bootloader.params.verbose=-v","tools.avrdude.bootloader.pattern=\"{cmd.path}\" \"-C{config.path}\" {bootloader.verbose} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6/bootloaders/caterina/Caterina-Leonardo.hex:i\" -Ulock:w:0x2F:m","tools.avrdude.cmd.path={path}/bin/avrdude","tools.avrdude.config.path={path}/etc/avrdude.conf","tools.avrdude.erase.params.quiet=-q -q","tools.avrdude.erase.params.verbose=-v","tools.avrdude.erase.pattern=\"{cmd.path}\" \"-C{config.path}\" {erase.verbose} -patmega32u4 -c{protocol} {program.extra_params} -e -Ulock:w:0x3F:m -Uefuse:w:0xcb:m -Uhfuse:w:0xd8:m -Ulfuse:w:0xff:m","tools.avrdude.network_cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","tools.avrdude.program.params.noverify=-V","tools.avrdude.program.params.quiet=-q -q","tools.avrdude.program.params.verbose=-v","tools.avrdude.program.pattern=\"{cmd.path}\" \"-C{config.path}\" {program.verbose} {program.verify} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.program.verify=","tools.avrdude.upload.network_pattern=\"{network_cmd}\" -address {serial.port} -port {upload.network.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}","tools.avrdude.upload.params.noverify=-V","tools.avrdude.upload.params.quiet=-q -q","tools.avrdude.upload.params.verbose=-v","tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} {upload.verify} -patmega32u4 -cavr109 \"-P{serial.port}\" -b57600 -D \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.upload.verify=","tools.avrdude_remote.upload.pattern=/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -patmega32u4","upload.disable_flushing=true","upload.maximum_data_size=2560","upload.maximum_size=28672","upload.protocol=avr109","upload.speed=57600","upload.tool=avrdude","upload.tool.default=avrdude","upload.tool.network=arduino_ota","upload.use_1200bps_touch=true","upload.wait_for_upload_port=true","upload_port.0.pid=0x0036","upload_port.0.vid=0x2341","upload_port.1.pid=0x8036","upload_port.1.vid=0x2341","upload_port.2.pid=0x0036","upload_port.2.vid=0x2A03","upload_port.3.pid=0x8036","upload_port.3.vid=0x2A03","upload_port.4.board=leonardo","version=1.8.6","vid.0=0x2341","vid.1=0x2341","vid.2=0x2A03","vid.3=0x2A03"]}}
>>>
Content-Length: 118

{"jsonrpc":"2.0","id":"2","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"2","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 113

{"jsonrpc":"2.0","id":"3","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"3","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":20}}}
>>>
Content-Length: 225

{"jsonrpc":"2.0","id":5,"result":{"contents":{"kind":"markdown","value":"### macro `ONE_WIRE_BUS`  \n\n---\n```cpp\n#define ONE_WIRE_BUS 2\n```"},"range":{"start":{"line":11,"character":16},"end":{"line":11,"character":28}}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":21}}}
>>>
Content-Length: 225

{"jsonrpc":"2.0","id":6,"result":{"contents":{"kind":"markdown","value":"### macro `ONE_WIRE_BUS`  \n\n---\n```cpp\n#define ONE_WIRE_BUS 2\n```"},"range":{"start":{"line":11,"character":16},"end":{"line":11,"character":28}}}}
<<<
Content-Length: 180

{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":1,"character":3}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":7,"result":null}
<<<
Content-Length: 180

{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":0,"character":0}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":8,"result":null}
<<<
Content-Length: 180

{"jsonrpc":"2.0","id":9,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":0,"character":0}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":9,"result":null}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":28,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":10,"result":[]}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":27,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":11,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":22,"character":20}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":12,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":19}}}
>>>
Content-Length: 290

{"jsonrpc":"2.0","id":13,"result":{"contents":{"kind":"markdown","value":"### variable `temperatureC`  \n\n---\nType: `float`  \n\n---\n```cpp\n// In loop\nfloat temperatureC = sensors.getTempCByIndex(0)\n```"},"range":{"start":{"line":23,"character":15},"end":{"line":23,"character":27}}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":17}}}
>>>
Content-Length: 290

{"jsonrpc":"2.0","id":14,"result":{"contents":{"kind":"markdown","value":"### variable `temperatureC`  \n\n---\nType: `float`  \n\n---\n```cpp\n// In loop\nfloat temperatureC = sensors.getTempCByIndex(0)\n```"},"range":{"start":{"line":23,"character":15},"end":{"line":23,"character":27}}}}
<<<
Content-Length: 257

{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":19,"character":13},"end":{"line":19,"character":13}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":15,"result":[]}
<<<
Content-Length: 255

{"jsonrpc":"2.0","id":16,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":17,"character":1},"end":{"line":17,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":16,"result":[]}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":7,"character":18}}}
>>>
Content-Length: 210

{"jsonrpc":"2.0","id":17,"result":{"contents":{"kind":"markdown","value":"### `DallasTemperature.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\DallasTemperature.h\n```"}}}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":18,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":0,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":18,"result":null}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":19,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":28,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":19,"result":[]}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":27,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":20,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":21,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":22,"character":13}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":21,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":22,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":13}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":22,"result":null}
<<<
Content-Length: 257

{"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":25,"character":14},"end":{"line":25,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":23,"result":[]}
<<<
Content-Length: 59

{"jsonrpc":"2.0","id":24,"method":"shutdown","params":null}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":24,"result":null}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3007

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":33868,"clientInfo":{"name":"vscode","version":"1.80.0"},"rootPath":"d:\\Arduino_GitHub\\Termometer","rootUri":"file:///d%3A/Arduino_GitHub/Termometer","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///d%3A/Arduino_GitHub/Termometer","name":"Termometer"}]}}
>>>
Content-Length: 940

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.0.0-git"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 739

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","languageId":"cpp","version":1,"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n#define ONE_WIRE_BUS 2\r\n\r\nOneWire oneWire(ONE_WIRE_BUS);\r\nDallasTemperature sensors(&oneWire);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n  sensors.begin();\r\n}\r\n\r\nvoid loop() {\r\n  sensors.requestTemperatures();\r\n  float temperatureC = sensors.getTempCByIndex(0);\r\n  Serial.print(\"Temperature: \");\r\n  Serial.print(temperatureC);\r\n  Serial.println(\" °C\");\r\n  delay(1000);\r\n}\r\n\r\n"}}}Content-Length: 256

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":25,"character":14},"end":{"line":25,"character":14}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 113

{"jsonrpc":"2.0","id":"1","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 36

{"jsonrpc":"2.0","id":1,"result":[]}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"1","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/2","percentage":50}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 194

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":25}}}
>>>
Content-Length: 36

{"jsonrpc":"2.0","id":2,"result":[]}
<<<
Content-Length: 256

{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":11,"character":25},"end":{"line":11,"character":25}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"jsonrpc":"2.0","id":3,"result":[]}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":20,"character":16}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":4,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":15,"character":16}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":5,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":26}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":6,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":27}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":7,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":7,"character":12}}}
>>>
Content-Length: 179

{"jsonrpc":"2.0","id":8,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 180

{"jsonrpc":"2.0","id":9,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":7,"character":0}}}
>>>
Content-Length: 179

{"jsonrpc":"2.0","id":9,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":10,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":7,"character":1}}}
>>>
Content-Length: 180

{"jsonrpc":"2.0","id":10,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":11,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":2}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":11,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":12,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":3}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":12,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":13,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":14,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":15,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":1}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":15,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":14,"character":7}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":16,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":14,"character":8}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":17,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":18,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":14,"character":6}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":18,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":19,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":20,"result":null}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":21,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":28,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":21,"result":[]}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":27,"character":0}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":22,"result":[]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":23,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":21,"character":12}}}
>>>
Content-Length: 160

{"jsonrpc":"2.0","id":23,"result":null,"error":{"code":-32603,"message":"Document is not available: file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino.cpp"}}






Started logging.

<<<
Content-Length: 3007

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":33868,"clientInfo":{"name":"vscode","version":"1.80.0"},"rootPath":"d:\\Arduino_GitHub\\Termometer","rootUri":"file:///d%3A/Arduino_GitHub/Termometer","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///d%3A/Arduino_GitHub/Termometer","name":"Termometer"}]}}
>>>
Content-Length: 940

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.0.0-git"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 739

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","languageId":"cpp","version":1,"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n#define ONE_WIRE_BUS 2\r\n\r\nOneWire oneWire(ONE_WIRE_BUS);\r\nDallasTemperature sensors(&oneWire);\r\n\r\nvoid setup() {\r\n  Serial.begin(9600);\r\n  sensors.begin();\r\n}\r\n\r\nvoid loop() {\r\n  sensors.requestTemperatures();\r\n  float temperatureC = sensors.getTempCByIndex(0);\r\n  Serial.print(\"Temperature: \");\r\n  Serial.print(temperatureC);\r\n  Serial.println(\" °C\");\r\n  delay(1000);\r\n}\r\n\r\n"}}}Content-Length: 253

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":27,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 182

{"jsonrpc":"2.0","id":2,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":18}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":2}}Content-Length: 182

{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":29}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}Content-Length: 182

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":27}}}
>>>
Content-Length: 113

{"jsonrpc":"2.0","id":"1","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 36

{"jsonrpc":"2.0","id":1,"result":[]}Content-Length: 289

{"jsonrpc":"2.0","id":2,"result":{"contents":{"kind":"markdown","value":"### variable `temperatureC`  \n\n---\nType: `float`  \n\n---\n```cpp\n// In loop\nfloat temperatureC = sensors.getTempCByIndex(0)\n```"},"range":{"start":{"line":23,"character":15},"end":{"line":23,"character":27}}}}Content-Length: 38

{"jsonrpc":"2.0","id":3,"result":null}Content-Length: 38

{"jsonrpc":"2.0","id":4,"result":null}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"1","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"1/2","percentage":50}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":23,"character":23}}}
>>>
Content-Length: 289

{"jsonrpc":"2.0","id":5,"result":{"contents":{"kind":"markdown","value":"### variable `temperatureC`  \n\n---\nType: `float`  \n\n---\n```cpp\n// In loop\nfloat temperatureC = sensors.getTempCByIndex(0)\n```"},"range":{"start":{"line":23,"character":15},"end":{"line":23,"character":27}}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":24,"character":21}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":6,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":7,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":24,"character":22}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":7,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":8,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":24,"character":22}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":8,"result":null}
<<<
Content-Length: 153

{"jsonrpc":"2.0","id":9,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 154

{"jsonrpc":"2.0","id":10,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 62

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":9}}
>>>
Content-Length: 882

{"jsonrpc":"2.0","id":9,"result":[{"name":"oneWire","detail":"OneWire","kind":13,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":29}},"selectionRange":{"start":{"line":11,"character":8},"end":{"line":11,"character":15}}},{"name":"sensors","detail":"DallasTemperature","kind":13,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":35}},"selectionRange":{"start":{"line":12,"character":18},"end":{"line":12,"character":25}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":26,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":9}}}]}Content-Length: 883

{"jsonrpc":"2.0","id":10,"result":[{"name":"oneWire","detail":"OneWire","kind":13,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":29}},"selectionRange":{"start":{"line":11,"character":8},"end":{"line":11,"character":15}}},{"name":"sensors","detail":"DallasTemperature","kind":13,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":35}},"selectionRange":{"start":{"line":12,"character":18},"end":{"line":12,"character":25}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":17,"character":1}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":26,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":9}}}]}
<<<
Content-Length: 3738

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":2},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":27,"character":0}},"rangeLength":373,"text":"#include \"OneWire.h\"\r\n \r\n// OneWire DS18S20, DS18B20, DS1822 Temperature Example\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// The DallasTemperature library can do all this work for you!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\nТеги:\r\n\r\n    Arduino Термометр"}]}}Content-Length: 259

{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":123,"character":21},"end":{"line":123,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 217

{"jsonrpc":"2.0","id":11,"result":null,"error":{"code":-32603,"message":"invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:21-123:21: could not be mapped to Arduino-preprocessed sketck.ino.cpp"}}
<<<
Content-Length: 3767

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":2},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n#include \"OneWire.h\"\r\n \r\n// OneWire DS18S20, DS18B20, DS1822 Temperature Example\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// The DallasTemperature library can do all this work for you!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\nТеги:\r\n\r\n    Arduino Термометр\r\n"}}
>>>
Content-Length: 118

{"jsonrpc":"2.0","id":"2","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"2","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 196

{"jsonrpc":"2.0","id":12,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":123,"character":20}}}
>>>
Content-Length: 217

{"jsonrpc":"2.0","id":12,"result":null,"error":{"code":-32603,"message":"invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:20-123:20: could not be mapped to Arduino-preprocessed sketck.ino.cpp"}}
<<<
Content-Length: 258

{"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":123,"character":3},"end":{"line":123,"character":21}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 216

{"jsonrpc":"2.0","id":13,"result":null,"error":{"code":-32603,"message":"invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:3-123:21: could not be mapped to Arduino-preprocessed sketck.ino.cpp"}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":123,"character":2}}}
>>>
Content-Length: 215

{"jsonrpc":"2.0","id":14,"result":null,"error":{"code":-32603,"message":"invalid range file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino:123:2-123:2: could not be mapped to Arduino-preprocessed sketck.ino.cpp"}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":15,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 280

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":3},"contentChanges":[{"range":{"start":{"line":123,"character":3},"end":{"line":123,"character":21}},"rangeLength":18,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":16,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":15}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":15,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":16,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":17,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":4},"contentChanges":[{"range":{"start":{"line":123,"character":2},"end":{"line":123,"character":3}},"rangeLength":1,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":18,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":17}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":17,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":18,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":19,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":5},"contentChanges":[{"range":{"start":{"line":123,"character":0},"end":{"line":123,"character":2}},"rangeLength":2,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":20,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":19}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":19,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 113

{"jsonrpc":"2.0","id":"3","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 657

{"jsonrpc":"2.0","id":20,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"3","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":21,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":6},"contentChanges":[{"range":{"start":{"line":122,"character":0},"end":{"line":123,"character":0}},"rangeLength":2,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":22,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":21}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":21,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":22,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":23,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":7},"contentChanges":[{"range":{"start":{"line":121,"character":5},"end":{"line":122,"character":0}},"rangeLength":2,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":24,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":23,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":24,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":23}}Content-Length: 257

{"jsonrpc":"2.0","id":25,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":121,"character":5},"end":{"line":121,"character":5}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":25,"result":[]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":26,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":8},"contentChanges":[{"range":{"start":{"line":121,"character":4},"end":{"line":121,"character":5}},"rangeLength":1,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":27,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":26}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":26,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":27,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":28,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 278

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":9},"contentChanges":[{"range":{"start":{"line":121,"character":3},"end":{"line":121,"character":4}},"rangeLength":1,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":29,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":28,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":29,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":28}}Content-Length: 154

{"jsonrpc":"2.0","id":30,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":10},"contentChanges":[{"range":{"start":{"line":121,"character":2},"end":{"line":121,"character":3}},"rangeLength":1,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":31,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":30}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":30,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":31,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":32,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":11},"contentChanges":[{"range":{"start":{"line":121,"character":1},"end":{"line":121,"character":2}},"rangeLength":1,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":33,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":32}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":32,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":33,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 257

{"jsonrpc":"2.0","id":34,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":121,"character":1},"end":{"line":121,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":34,"result":[]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":35,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":12},"contentChanges":[{"range":{"start":{"line":121,"character":0},"end":{"line":121,"character":1}},"rangeLength":1,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":36,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":35}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":35,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":36,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":37,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":13},"contentChanges":[{"range":{"start":{"line":120,"character":1},"end":{"line":121,"character":0}},"rangeLength":2,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":38,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":37}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":37,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":38,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 257

{"jsonrpc":"2.0","id":39,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":120,"character":1},"end":{"line":120,"character":1}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":39,"result":[]}Content-Length: 118

{"jsonrpc":"2.0","id":"4","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"4","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3717

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":13},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n#include \"OneWire.h\"\r\n \r\n// OneWire DS18S20, DS18B20, DS1822 Temperature Example\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// The DallasTemperature library can do all this work for you!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 184

{"jsonrpc":"2.0","id":40,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":103,"character":34}}}
>>>
Content-Length: 253

{"jsonrpc":"2.0","id":40,"result":{"contents":{"kind":"markdown","value":"### variable `data`  \n\n---\nType: `byte[12]`  \n\n---\n```cpp\n// In loop\nbyte data[12]\n```"},"range":{"start":{"line":103,"character":34},"end":{"line":103,"character":38}}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 118

{"jsonrpc":"2.0","id":"5","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"5","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 113

{"jsonrpc":"2.0","id":"6","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"6","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":41,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":15,"character":53}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":41,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":42,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":9}}}
>>>
Content-Length: 180

{"jsonrpc":"2.0","id":42,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":42}}Content-Length: 181

{"jsonrpc":"2.0","id":43,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 180

{"jsonrpc":"2.0","id":43,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":44,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":19}}}
>>>
Content-Length: 180

{"jsonrpc":"2.0","id":44,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":45,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":2}}}
>>>
Content-Length: 180

{"jsonrpc":"2.0","id":45,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":46,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 180

{"jsonrpc":"2.0","id":46,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":47,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 180

{"jsonrpc":"2.0","id":47,"result":{"contents":{"kind":"markdown","value":"### `OneWire.h`  \n\n---\n```\nC:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\OneWire.h\n```"}}}
<<<
Content-Length: 254

{"jsonrpc":"2.0","id":48,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":20}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":48,"result":[]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":49,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 277

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":14},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":20}},"rangeLength":20,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":50,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":49}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":49,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}Content-Length: 657

{"jsonrpc":"2.0","id":50,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":51,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 276

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":15},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":10,"character":0}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":51,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":15}},"selectionRange":{"start":{"line":18,"character":9},"end":{"line":18,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":22,"character":1}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":120,"character":1}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}}]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":52,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":10,"character":36}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":52,"result":null}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":53,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 275

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":16},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":1}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 1073

{"jsonrpc":"2.0","id":53,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":15}},"selectionRange":{"start":{"line":17,"character":9},"end":{"line":17,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":16}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":15}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":21,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":23,"character":0},"end":{"line":119,"character":1}},"selectionRange":{"start":{"line":23,"character":5},"end":{"line":23,"character":9}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":54,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 276

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":17},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":10,"character":0}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 1073

{"jsonrpc":"2.0","id":54,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":17,"character":0},"end":{"line":17,"character":15}},"selectionRange":{"start":{"line":17,"character":9},"end":{"line":17,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":20,"character":0},"end":{"line":20,"character":16}},"selectionRange":{"start":{"line":20,"character":5},"end":{"line":20,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":15}},"selectionRange":{"start":{"line":24,"character":5},"end":{"line":24,"character":9}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":19,"character":0},"end":{"line":21,"character":1}},"selectionRange":{"start":{"line":19,"character":5},"end":{"line":19,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":23,"character":0},"end":{"line":119,"character":1}},"selectionRange":{"start":{"line":23,"character":5},"end":{"line":23,"character":9}}}]}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":55,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":10,"character":30}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":55,"result":null}Content-Length: 118

{"jsonrpc":"2.0","id":"7","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"7","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3686

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":17},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n// OneWire DS18S20, DS18B20, DS1822 Temperature Example\r\n//\r\n// http://www.pjrc.com/teensy/td_libs_OneWire.html\r\n//\r\n// The DallasTemperature library can do all this work for you!\r\n// http://milesburton.com/Dallas_Temperature_Control_Library\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 118

{"jsonrpc":"2.0","id":"8","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"8","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 113

{"jsonrpc":"2.0","id":"9","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"9","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":56,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":12,"character":2}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":56,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":57,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":57,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":58,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":58,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":59,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":1}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":59,"result":null}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":60,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":11,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":60,"result":null}
<<<
Content-Length: 181

{"jsonrpc":"2.0","id":61,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":0}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":61,"result":null}
<<<
Content-Length: 255

{"jsonrpc":"2.0","id":62,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":9,"character":0},"end":{"line":14,"character":60}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":62,"result":[]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":63,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 279

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":18},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":14,"character":60}},"rangeLength":241,"text":""}]}}Content-Length: 154

{"jsonrpc":"2.0","id":64,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 657

{"jsonrpc":"2.0","id":63,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":16,"character":0},"end":{"line":16,"character":15}},"selectionRange":{"start":{"line":16,"character":9},"end":{"line":16,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":20,"character":1}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":22,"character":0},"end":{"line":118,"character":1}},"selectionRange":{"start":{"line":22,"character":5},"end":{"line":22,"character":9}}}]}Content-Length: 1073

{"jsonrpc":"2.0","id":64,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":15}},"selectionRange":{"start":{"line":11,"character":9},"end":{"line":11,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":16}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":15}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":18,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":113,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}]}
<<<
Content-Length: 63

{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":63}}Content-Length: 154

{"jsonrpc":"2.0","id":65,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 276

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":19},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":10,"character":0}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 1073

{"jsonrpc":"2.0","id":65,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":15}},"selectionRange":{"start":{"line":11,"character":9},"end":{"line":11,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":16}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":15}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":18,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":17,"character":0},"end":{"line":113,"character":1}},"selectionRange":{"start":{"line":17,"character":5},"end":{"line":17,"character":9}}}]}Content-Length: 119

{"jsonrpc":"2.0","id":"10","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"10","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}
<<<
Content-Length: 3431

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":19},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\n \r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}Content-Length: 154

{"jsonrpc":"2.0","id":66,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 275

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":20},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":1}},"rangeLength":1,"text":""}]}}
>>>
Content-Length: 866

{"jsonrpc":"2.0","id":66,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":15}},"selectionRange":{"start":{"line":10,"character":9},"end":{"line":10,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":16}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":15}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":10}}}]}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":67,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}Content-Length: 276

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":21},"contentChanges":[{"range":{"start":{"line":9,"character":0},"end":{"line":10,"character":0}},"rangeLength":2,"text":""}]}}
>>>
Content-Length: 866

{"jsonrpc":"2.0","id":67,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":10,"character":0},"end":{"line":10,"character":15}},"selectionRange":{"start":{"line":10,"character":9},"end":{"line":10,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":18,"character":0},"end":{"line":18,"character":16}},"selectionRange":{"start":{"line":18,"character":5},"end":{"line":18,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":14,"character":0},"end":{"line":14,"character":15}},"selectionRange":{"start":{"line":14,"character":5},"end":{"line":14,"character":9}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":13,"character":0},"end":{"line":12,"character":1}},"selectionRange":{"start":{"line":13,"character":5},"end":{"line":13,"character":10}}}]}
<<<
Content-Length: 182

{"jsonrpc":"2.0","id":68,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":9,"character":17}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":68,"result":null}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}
<<<
Content-Length: 3426

{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino","version":21},"text":"/*1янв25\r\nТермометр\r\nПроект 9\r\nScriptor42\r\n*/\r\n\r\n#include <OneWire.h>\r\n#include <DallasTemperature.h>\r\n\r\nOneWire  ds(10);  // on pin 10 (a 4.7K resistor is necessary)\r\n \r\nvoid setup(void) {\r\n  Serial.begin(9600);\r\n}\r\n \r\nvoid loop(void) {\r\n  byte i;\r\n  byte present = 0;\r\n  byte type_s;\r\n  byte data[12];\r\n  byte addr[8];\r\n  float celsius, fahrenheit;\r\n   \r\n  if ( !ds.search(addr)) {\r\n    Serial.println(\"No more addresses.\");\r\n    Serial.println();\r\n    ds.reset_search();\r\n    delay(250);\r\n    return;\r\n  }\r\n   \r\n  Serial.print(\"ROM =\");\r\n  for( i = 0; i < 8; i++) {\r\n    Serial.write(' ');\r\n    Serial.print(addr[i], HEX);\r\n  }\r\n \r\n  if (OneWire::crc8(addr, 7) != addr[7]) {\r\n      Serial.println(\"CRC is not valid!\");\r\n      return;\r\n  }\r\n  Serial.println();\r\n  \r\n  // the first ROM byte indicates which chip\r\n  switch (addr[0]) {\r\n    case 0x10:\r\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\r\n      type_s = 1;\r\n      break;\r\n    case 0x28:\r\n      Serial.println(\"  Chip = DS18B20\");\r\n      type_s = 0;\r\n      break;\r\n    case 0x22:\r\n      Serial.println(\"  Chip = DS1822\");\r\n      type_s = 0;\r\n      break;\r\n    default:\r\n      Serial.println(\"Device is not a DS18x20 family device.\");\r\n      return;\r\n  } \r\n \r\n  ds.reset();\r\n  ds.select(addr);\r\n  ds.write(0x44, 1);        // start conversion, with parasite power on at the end\r\n   \r\n  delay(1000);     // maybe 750ms is enough, maybe not\r\n  // we might do a ds.depower() here, but the reset will take care of it.\r\n   \r\n  present = ds.reset();\r\n  ds.select(addr);    \r\n  ds.write(0xBE);         // Read Scratchpad\r\n \r\n  Serial.print(\"  Data = \");\r\n  Serial.print(present, HEX);\r\n  Serial.print(\" \");\r\n  for ( i = 0; i < 9; i++) {           // we need 9 bytes\r\n    data[i] = ds.read();\r\n    Serial.print(data[i], HEX);\r\n    Serial.print(\" \");\r\n  }\r\n  Serial.print(\" CRC=\");\r\n  Serial.print(OneWire::crc8(data, 8), HEX);\r\n  Serial.println();\r\n \r\n  // Convert the data to actual temperature\r\n  // because the result is a 16 bit signed integer, it should\r\n  // be stored to an \"int16_t\" type, which is always 16 bits\r\n  // even when compiled on a 32 bit processor.\r\n  int16_t raw = (data[1] << 8) | data[0];\r\n  if (type_s) {\r\n    raw = raw << 3; // 9 bit resolution default\r\n    if (data[7] == 0x10) {\r\n      // \"count remain\" gives full 12 bit resolution\r\n      raw = (raw & 0xFFF0) + 12 - data[6];\r\n    }\r\n  } else {\r\n    byte cfg = (data[4] & 0x60);\r\n    // at lower res, the low bits are undefined, so let's zero them\r\n    if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms\r\n    else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms\r\n    else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms\r\n    //// default is 12 bit resolution, 750 ms conversion time\r\n  }\r\n  celsius = (float)raw / 16.0;\r\n  fahrenheit = celsius * 1.8 + 32.0;\r\n  Serial.print(\"  Temperature = \");\r\n  Serial.print(celsius);\r\n  Serial.print(\" Celsius, \");\r\n  Serial.print(fahrenheit);\r\n  Serial.println(\" Fahrenheit\");\r\n}\r\n"}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"11","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"11","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"12","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"12","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":69,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":66,"character":30}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":69,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":70,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":104,"character":24}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":70,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":71,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":106,"character":22}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":71,"result":null}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":72,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":101,"character":44}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":72,"result":null}
<<<
Content-Length: 24193

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildPath":"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","buildOutputUri":"file:///c%3A/Users/%D1%80%D1%81/AppData/Local/arduino/sketches/D3D3BD4A9EF75B21D6254DA8EDFB7FF8","executableSectionsSize":[{"name":"text","size":7202,"maxSize":28672},{"name":"data","size":365,"maxSize":2560}],"usedLibraries":[{"name":"OneWire","author":"Jim Studt, Tom Pollard, Robin James, Glenn Trewitt, Jason Dangel, Guillermo Lovato, Paul Stoffregen, Scott Roberts, Bertrik Sikken, Mark Tillotson, Ken Butcher, Roger Clark, Love Nystrom","maintainer":"Paul Stoffregen","sentence":"Access 1-wire temperature sensors, memory and other chips.","paragraph":"","website":"http://www.pjrc.com/teensy/td_libs_OneWire.html","category":"Communication","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"2.3.8","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS18x20_Temperature","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS2408_Switch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\OneWire\\examples\\DS250x_PROM"],"providesIncludes":["OneWire.h"],"properties":{},"compatibleWith":{}},{"name":"DallasTemperature","author":"Miles Burton <miles@mnetcs.com>, Tim Newsome <nuisance@casualhacker.net>, Guil Barros <gfbarros@bappos.com>, Rob Tillaart <rob.tillaart@gmail.com>","maintainer":"Miles Burton <miles@mnetcs.com>","sentence":"Arduino Library for Dallas Temperature ICs","paragraph":"Supports DS18B20, DS18S20, DS1822, DS1820","website":"https://github.com/milesburton/Arduino-Temperature-Control-Library","category":"Sensors","installDir":"C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","sourceDir":"c:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature","utilityDir":"","containerPlatform":"","dotALinkage":false,"precompiled":false,"ldFlags":"","isLegacy":false,"version":"3.9.0","license":"Unspecified","location":1,"layout":0,"inDevelopment":false,"architectures":["*"],"types":[],"examples":["C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Alarm","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\AlarmHandler","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\ExternalPullup","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multibus_simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Multiple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SaveRecallScratchPad","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\SetUserData","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Simple","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Single","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Tester","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\Timing","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\TwoPin_DS18B20","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataDemo","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\UserDataWriteBatch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\WaitForConversion2","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\oneWireSearch","C:\\Users\\рс\\Documents\\Arduino\\libraries\\DallasTemperature\\examples\\readPowerSupply"],"providesIncludes":["DallasTemperature.h"],"properties":{},"compatibleWith":{}}],"buildPlatform":{"id":"arduino:avr","version":"1.8.6","installDir":"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","packageUrl":""},"buildProperties":["_id=leonardo","archive_file_path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}","bootloader.extended_fuses=0xcb","bootloader.file=caterina/Caterina-Leonardo.hex","bootloader.high_fuses=0xd8","bootloader.lock_bits=0x2F","bootloader.low_fuses=0xff","bootloader.tool=avrdude","bootloader.tool.default=avrdude","bootloader.unlock_bits=0x3F","build.arch=AVR","build.board=AVR_LEONARDO","build.board.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.core=arduino","build.core.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\cores\\arduino","build.core.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","build.extra_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.f_cpu=16000000L","build.fqbn=arduino:avr:leonardo","build.library_discovery_phase=0","build.mcu=atmega32u4","build.path=C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8","build.pid=0x8036","build.project_name=Termometer.ino","build.source.path=D:\\Arduino_GitHub\\Termometer","build.system.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\system","build.usb_flags=-DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"'","build.usb_manufacturer=\"Unknown\"","build.usb_product=\"Arduino Leonardo\"","build.variant=leonardo","build.variant.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6\\variants\\leonardo","build.vid=0x2341","compiler.S.extra_flags=","compiler.S.flags=-c -g -x assembler-with-cpp -flto -MMD","compiler.ar.cmd=avr-gcc-ar","compiler.ar.extra_flags=","compiler.ar.flags=rcs","compiler.c.cmd=avr-gcc","compiler.c.elf.cmd=avr-gcc","compiler.c.elf.extra_flags=","compiler.c.elf.flags=-w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections","compiler.c.extra_flags=","compiler.c.flags=-c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects","compiler.cpp.cmd=avr-g++","compiler.cpp.extra_flags=","compiler.cpp.flags=-c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto","compiler.elf2hex.cmd=avr-objcopy","compiler.elf2hex.extra_flags=","compiler.elf2hex.flags=-O ihex -R .eeprom","compiler.ldflags=","compiler.libraries.ldflags=","compiler.objcopy.cmd=avr-objcopy","compiler.objcopy.eep.extra_flags=","compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0","compiler.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/","compiler.size.cmd=avr-size","compiler.warning_flags=-w","compiler.warning_flags.all=-Wall -Wextra","compiler.warning_flags.default=","compiler.warning_flags.more=-Wall","compiler.warning_flags.none=-w","extra.time.dst=0","extra.time.local=1735753789","extra.time.utc=1735742989","extra.time.zone=10800","ide_version=10607","name=Arduino Leonardo","pid.0=0x0036","pid.1=0x8036","pid.2=0x0036","pid.3=0x8036","pluggable_discovery.required.0=builtin:serial-discovery","pluggable_discovery.required.1=builtin:mdns-discovery","pluggable_monitor.required.serial=builtin:serial-monitor","preproc.includes.flags=-w -x c++ -M -MG -MP","preproc.macros.flags=-w -x c++ -E -CC","recipe.S.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -x assembler-with-cpp -flto -MMD -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.ar.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc-ar\" rcs  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"{object_file}\"","recipe.c.combine.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -w -Os -g -flto -fuse-linker-plugin -Wl,--gc-sections -mmcu=atmega32u4   -o \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" {object_files}  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/{archive_file}\" \"-LC:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8\" -lm","recipe.c.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-gcc\" -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.cpp.o.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{object_file}\"","recipe.objcopy.eep.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.eep\"","recipe.objcopy.hex.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-objcopy\" -O ihex -R .eeprom  \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\" \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\"","recipe.output.save_file=Termometer.ino.leonardo.hex","recipe.output.tmp_file=Termometer.ino.hex","recipe.preproc.includes=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -M -MG -MP -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\"","recipe.preproc.macros=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-g++\" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -Wno-error=narrowing -MMD -flto -w -x c++ -E -CC -mmcu=atmega32u4 -DF_CPU=16000000L -DARDUINO=10607 -DARDUINO_AVR_LEONARDO -DARDUINO_ARCH_AVR  -DUSB_VID=0x2341 -DUSB_PID=0x8036 '-DUSB_MANUFACTURER=\"Unknown\"' '-DUSB_PRODUCT=\"Arduino Leonardo\"' {includes} \"{source_file}\" -o \"{preprocessed_file_path}\"","recipe.size.pattern=\"C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7/bin/avr-size\" -A \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.elf\"","recipe.size.regex=^(?:\\.text|\\.data|\\.bootloader)\\s+([0-9]+).*","recipe.size.regex.data=^(?:\\.data|\\.bss|\\.noinit)\\s+([0-9]+).*","recipe.size.regex.eeprom=^(?:\\.eeprom)\\s+([0-9]+).*","runtime.hardware.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr","runtime.ide.path=C:\\Users\\рс\\AppData\\Local\\Programs\\Arduino IDE\\resources\\app\\lib\\backend\\resources","runtime.ide.version=10607","runtime.os=windows","runtime.platform.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6","runtime.tools.arduinoOTA-1.3.0.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arduinoOTA.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0","runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.arm-none-eabi-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arm-none-eabi-gcc\\4.8.3-2014q1","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino5","runtime.tools.avr-gcc-7.3.0-atmel3.6.1-arduino7.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avr-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avr-gcc\\7.3.0-atmel3.6.1-arduino7","runtime.tools.avrdude-6.3.0-arduino17.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","runtime.tools.bossac-1.6.1-arduino.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.bossac.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\bossac\\1.6.1-arduino","runtime.tools.ctags-5.8-arduino11.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.ctags.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\ctags\\5.8-arduino11","runtime.tools.dfu-discovery-0.1.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.dfu-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\dfu-discovery\\0.1.2","runtime.tools.linux-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\dfu-util","runtime.tools.linux-hid_flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\hid_flash","runtime.tools.linux-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\src","runtime.tools.linux-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stlink","runtime.tools.linux-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux\\stm32flash","runtime.tools.linux64-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\dfu-util","runtime.tools.linux64-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\src","runtime.tools.linux64-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stlink","runtime.tools.linux64-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.linux64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\linux64\\stm32flash","runtime.tools.macosx-dfu-util.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\dfu-util","runtime.tools.macosx-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\src","runtime.tools.macosx-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stlink","runtime.tools.macosx-stm32flash.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.macosx.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\macosx\\stm32flash","runtime.tools.mdns-discovery-1.0.5.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.5","runtime.tools.mdns-discovery-1.0.9.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mdns-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\mdns-discovery\\1.0.9","runtime.tools.mklittlefs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mklittlefs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mklittlefs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.mkspiffs.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\mkspiffs\\3.1.0-gcc10.3-e5f9fec","runtime.tools.python3-3.7.2-post1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.python3.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\python3\\3.7.2-post1","runtime.tools.serial-discovery-1.2.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.2.1","runtime.tools.serial-discovery-1.3.2.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.3.2","runtime.tools.serial-discovery-1.4.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-discovery.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-discovery\\1.4.1","runtime.tools.serial-monitor-0.14.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.serial-monitor-0.9.1.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.9.1","runtime.tools.serial-monitor.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\builtin\\tools\\serial-monitor\\0.14.1","runtime.tools.stm32tools-2021.5.31.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.stm32tools.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\stm32duino\\tools\\stm32tools\\2021.5.31","runtime.tools.win-dfu-util-0.9-win64.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\dfu-util-0.9-win64","runtime.tools.win-lib.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\lib","runtime.tools.win-src.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\src","runtime.tools.win-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\stlink","runtime.tools.win-texane-stlink.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.win.path=C:\\Users\\рс\\Documents\\Arduino\\hardware\\Arduino_STM32-master\\tools\\win\\texane-stlink","runtime.tools.xtensa-lx106-elf-gcc-3.1.0-gcc10.3-e5f9fec.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","runtime.tools.xtensa-lx106-elf-gcc.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\esp8266\\tools\\xtensa-lx106-elf-gcc\\3.1.0-gcc10.3-e5f9fec","sketch_path=D:\\Arduino_GitHub\\Termometer","software=ARDUINO","tools.arduino_ota.cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.arduino_ota.upload.pattern=\"{cmd}\" -address {upload.port.address} -port {upload.port.properties.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.port.properties.endpoint_upload} -sync {upload.port.properties.endpoint_sync} -reset {upload.port.properties.endpoint_reset} -sync_exp {upload.port.properties.sync_return}","tools.avrdude.bootloader.params.quiet=-q -q","tools.avrdude.bootloader.params.verbose=-v","tools.avrdude.bootloader.pattern=\"{cmd.path}\" \"-C{config.path}\" {bootloader.verbose} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\hardware\\avr\\1.8.6/bootloaders/caterina/Caterina-Leonardo.hex:i\" -Ulock:w:0x2F:m","tools.avrdude.cmd.path={path}/bin/avrdude","tools.avrdude.config.path={path}/etc/avrdude.conf","tools.avrdude.erase.params.quiet=-q -q","tools.avrdude.erase.params.verbose=-v","tools.avrdude.erase.pattern=\"{cmd.path}\" \"-C{config.path}\" {erase.verbose} -patmega32u4 -c{protocol} {program.extra_params} -e -Ulock:w:0x3F:m -Uefuse:w:0xcb:m -Uhfuse:w:0xd8:m -Ulfuse:w:0xff:m","tools.avrdude.network_cmd=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\arduinoOTA\\1.3.0/bin/arduinoOTA","tools.avrdude.path=C:\\Users\\рс\\AppData\\Local\\Arduino15\\packages\\arduino\\tools\\avrdude\\6.3.0-arduino17","tools.avrdude.program.params.noverify=-V","tools.avrdude.program.params.quiet=-q -q","tools.avrdude.program.params.verbose=-v","tools.avrdude.program.pattern=\"{cmd.path}\" \"-C{config.path}\" {program.verbose} {program.verify} -patmega32u4 -c{protocol} {program.extra_params} \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.program.verify=","tools.avrdude.upload.network_pattern=\"{network_cmd}\" -address {serial.port} -port {upload.network.port} -sketch \"C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex\" -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}","tools.avrdude.upload.params.noverify=-V","tools.avrdude.upload.params.quiet=-q -q","tools.avrdude.upload.params.verbose=-v","tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} {upload.verify} -patmega32u4 -cavr109 \"-P{serial.port}\" -b57600 -D \"-Uflash:w:C:\\Users\\рс\\AppData\\Local\\arduino\\sketches\\D3D3BD4A9EF75B21D6254DA8EDFB7FF8/Termometer.ino.hex:i\"","tools.avrdude.upload.verify=","tools.avrdude_remote.upload.pattern=/usr/bin/run-avrdude /tmp/sketch.hex {upload.verbose} -patmega32u4","upload.disable_flushing=true","upload.maximum_data_size=2560","upload.maximum_size=28672","upload.protocol=avr109","upload.speed=57600","upload.tool=avrdude","upload.tool.default=avrdude","upload.tool.network=arduino_ota","upload.use_1200bps_touch=true","upload.wait_for_upload_port=true","upload_port.0.pid=0x0036","upload_port.0.vid=0x2341","upload_port.1.pid=0x8036","upload_port.1.vid=0x2341","upload_port.2.pid=0x0036","upload_port.2.vid=0x2A03","upload_port.3.pid=0x8036","upload_port.3.vid=0x2A03","upload_port.4.board=leonardo","version=1.8.6","vid.0=0x2341","vid.1=0x2341","vid.2=0x2A03","vid.3=0x2A03"]}}
>>>
Content-Length: 119

{"jsonrpc":"2.0","id":"13","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"13","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 114

{"jsonrpc":"2.0","id":"14","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 41

{"jsonrpc":"2.0","id":"14","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 154

{"jsonrpc":"2.0","id":73,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"}}}
>>>
Content-Length: 653

{"jsonrpc":"2.0","id":73,"result":[{"name":"ds","detail":"OneWire","kind":13,"range":{"start":{"line":9,"character":0},"end":{"line":9,"character":15}},"selectionRange":{"start":{"line":9,"character":9},"end":{"line":9,"character":11}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":11,"character":0},"end":{"line":13,"character":1}},"selectionRange":{"start":{"line":11,"character":5},"end":{"line":11,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":15,"character":0},"end":{"line":111,"character":1}},"selectionRange":{"start":{"line":15,"character":5},"end":{"line":15,"character":9}}}]}
<<<
Content-Length: 259

{"jsonrpc":"2.0","id":74,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"range":{"start":{"line":108,"character":29},"end":{"line":108,"character":29}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":74,"result":[]}
<<<
Content-Length: 184

{"jsonrpc":"2.0","id":75,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":101,"character":57}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":75,"result":null}
<<<
Content-Length: 183

{"jsonrpc":"2.0","id":76,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///d%3A/Arduino_GitHub/Termometer/Termometer.ino"},"position":{"line":98,"character":65}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":76,"result":null}